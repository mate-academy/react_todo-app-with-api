{
    "sourceFile": "src/App.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1715328509577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715328591585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n   };\n \n   useEffect(() => {\n     getTodosFromServer()\n-      .then(serverTodos => {\n+      .then((serverTodos: Todo[]) => {\n         setTodos(\n           serverTodos.map(todo => ({\n             ...todo,\n             isFromServer: true,\n@@ -95,9 +95,9 @@\n         userId: USER_ID,\n         completed: false,\n         id: generateId(),\n       })\n-        .then(addedTodo => {\n+        .then((addedTodo: Todo) => {\n           setTodos(prev => [...prev, addedTodo]);\n           updateErrorCases(false, 'addTodo');\n           didSucceed = true;\n         })\n"
                },
                {
                    "date": 1715329662427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n   USER_ID,\n   getTodosFromServer,\n   postTodoToServer,\n   deleteTodoFromServer,\n+  updateTodoOnServer,\n } from './api/todos';\n \n import { Todo } from './types/Todo';\n import { Header } from './components/Header';\n@@ -160,8 +161,18 @@\n \n     setTodos(updatedTodos);\n   };\n \n+  const updateTodo = (todo: Todo) => {\n+    return updateTodoOnServer(todo)\n+      .then((data: Todo) => {\n+        const selectedTodoId = todos.findIndex(el => el.id === todo.id);\n+        const todosCopy = [...todos];\n+        todosCopy[selectedTodoId] = data;\n+        setTodos(todosCopy)\n+      })\n+  }\n+\n   return (\n     <div className=\"todoapp\">\n       <h1 className=\"todoapp__title\">todos</h1>\n \n@@ -176,8 +187,9 @@\n           todos={todosToDisplay}\n           deleteTodo={deleteTodo}\n           tempTodo={tempTodo}\n           handleCompleteTodo={handleCompleteTodo}\n+          updateTodo={updateTodo}\n         />\n         {todos.length !== 0 && (\n           <Footer\n             todos={todos}\n"
                },
                {
                    "date": 1715330337104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,23 +146,13 @@\n   const todosToDisplay = todos.filter(\n     ({ completed }) => completeFilter === null || completed !== completeFilter,\n   );\n \n-  const handleCompleteTodo = (todoId: number) => {\n-    const updatedTodos = todos.map(todo => {\n-      if (todo.id === todoId) {\n-        return {\n-          ...todo,\n-          completed: !todo.completed,\n-        };\n-      }\n-\n-      return todo;\n-    });\n-\n-    setTodos(updatedTodos);\n-  };\n-\n+  const patchTodo = async () => {\n+    const newTodo = await updateTodo(todo: Todo);\n+    setTodos(prev => prev.map(todo => (todo.id !== newTodo.id ? todo : newTodo)))\n+    \n+  }\n   const updateTodo = (todo: Todo) => {\n     return updateTodoOnServer(todo).then((data: Todo) => {\n       const selectedTodoId = todos.findIndex(el => el.id === todo.id);\n       const todosCopy = [...todos];\n@@ -185,9 +175,8 @@\n         <TodoList\n           todos={todosToDisplay}\n           deleteTodo={deleteTodo}\n           tempTodo={tempTodo}\n-          handleCompleteTodo={handleCompleteTodo}\n           updateTodo={updateTodo}\n         />\n         {todos.length !== 0 && (\n           <Footer\n"
                },
                {
                    "date": 1715331802690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     ({ completed }) => completeFilter === null || completed !== completeFilter,\n   );\n \n   const patchTodo = async () => {\n-    const newTodo = await updateTodo(todo: Todo);\n+    const newTodo = await updateTodo(todo);\n     setTodos(prev => prev.map(todo => (todo.id !== newTodo.id ? todo : newTodo)))\n     \n   }\n   const updateTodo = (todo: Todo) => {\n"
                }
            ],
            "date": 1715328509577,
            "name": "Commit-0",
            "content": "/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { UserWarning } from './UserWarning';\n\nimport {\n  USER_ID,\n  getTodosFromServer,\n  postTodoToServer,\n  deleteTodoFromServer,\n} from './api/todos';\n\nimport { Todo } from './types/Todo';\nimport { Header } from './components/Header';\nimport { TodoList } from './components/TodoList';\nimport { Footer } from './components/Footer';\nimport { ErrorNotification } from './components/ErrorNotification';\nimport { ErrorTypes } from './types/Error';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const [errorCases, setErrorCases] = useState<ErrorTypes>({\n    todoLoad: false,\n    titleLength: false,\n    addTodo: false,\n    deleteTodo: false,\n    updateTodo: false,\n  });\n  const [isInputDisabled, setIsInputDisabled] = useState<boolean>(false);\n  const [completeFilter, setCompleteFilter] = useState<null | boolean>(null);\n\n  const updateErrorCases = (\n    value: boolean,\n    errorTitle: keyof ErrorTypes | 'all' = 'all',\n  ) => {\n    if (errorTitle === 'all') {\n      setErrorCases({\n        todoLoad: false,\n        titleLength: false,\n        addTodo: false,\n        deleteTodo: false,\n        updateTodo: false,\n      });\n    } else {\n      setErrorCases(prev => ({\n        ...prev,\n        [errorTitle]: value,\n      }));\n    }\n  };\n\n  useEffect(() => {\n    getTodosFromServer()\n      .then(serverTodos => {\n        setTodos(\n          serverTodos.map(todo => ({\n            ...todo,\n            isFromServer: true,\n          })),\n        );\n        updateErrorCases(false, 'todoLoad');\n      })\n      .catch(() => {\n        updateErrorCases(true, 'todoLoad');\n      });\n  }, []);\n\n  const todoInput = useRef<HTMLInputElement>(null);\n\n  const generateId = () => {\n    return Math.floor(Math.random() * 2137);\n  };\n\n  useEffect(() => {\n    todoInput.current?.focus();\n  }, [todos, updateErrorCases]);\n\n  const addTodo = async (tempTodoTitle: string) => {\n    let didSucceed = false;\n\n    if (tempTodoTitle.trim() === '') {\n      updateErrorCases(true, 'titleLength');\n    } else {\n      updateErrorCases(false, 'titleLength');\n      setTempTodo({\n        title: tempTodoTitle.trim(),\n        userId: USER_ID,\n        completed: false,\n        id: generateId(),\n      });\n      setIsInputDisabled(true);\n      await postTodoToServer({\n        title: tempTodoTitle.trim(),\n        userId: USER_ID,\n        completed: false,\n        id: generateId(),\n      })\n        .then(addedTodo => {\n          setTodos(prev => [...prev, addedTodo]);\n          updateErrorCases(false, 'addTodo');\n          didSucceed = true;\n        })\n        .catch(() => {\n          updateErrorCases(true, 'addTodo');\n        })\n        .finally(() => {\n          setIsInputDisabled(false);\n          setTempTodo(null);\n        });\n    }\n\n    return didSucceed;\n  };\n\n  const deleteTodo = async (todoId: number) => {\n    let didSucceed = false;\n\n    await deleteTodoFromServer(todoId)\n      .then(() => {\n        didSucceed = true;\n        setTodos(prev => prev.filter(({ id }) => id !== todoId));\n      })\n      .catch(() => {\n        updateErrorCases(true, 'deleteTodo');\n      });\n\n    return didSucceed;\n  };\n\n  const deleteFinishedTodos = async () => {\n    const todosToDelete = todos\n      .filter(({ completed }) => completed)\n      .map(({ id }) => id);\n\n    todosToDelete.forEach(todoId => {\n      deleteTodo(todoId);\n    });\n  };\n\n  if (!USER_ID) {\n    return <UserWarning />;\n  }\n\n  const todosToDisplay = todos.filter(\n    ({ completed }) => completeFilter === null || completed !== completeFilter,\n  );\n\n  const handleCompleteTodo = (todoId: number) => {\n    const updatedTodos = todos.map(todo => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <Header\n          todos={todos}\n          addTodo={addTodo}\n          isInputDisabled={isInputDisabled}\n          todoInput={todoInput}\n        />\n        <TodoList\n          todos={todosToDisplay}\n          deleteTodo={deleteTodo}\n          tempTodo={tempTodo}\n          handleCompleteTodo={handleCompleteTodo}\n        />\n        {todos.length !== 0 && (\n          <Footer\n            todos={todos}\n            completeFilter={completeFilter}\n            setCompleteFilter={setCompleteFilter}\n            deleteFinishedTodos={deleteFinishedTodos}\n          />\n        )}\n      </div>\n      <ErrorNotification\n        errorCases={errorCases}\n        updateErrorCases={updateErrorCases}\n      />\n    </div>\n  );\n};\n"
        }
    ]
}