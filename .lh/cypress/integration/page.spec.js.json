{
    "sourceFile": "cypress/integration/page.spec.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 39,
            "patches": [
                {
                    "date": 1715356284654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715426132454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1113,10 +1113,13 @@\n     });\n   });\n \n \n-  \n \n+\n+\n+\n+\n   describe('Toggle All Button', () => {\n     describe('if there are no todos', () => {\n       it('should not be visible while loading todos', () => {\n         page.mockLoad({ body: [] }).as('loadRequest');\n@@ -1386,13 +1389,13 @@\n     });\n \n     describe('Edit Form', () => {\n       describe('by default', () => {\n-        it('should be opened on dblclick', () => {\n-          todos.title(0).trigger('dblclick');\n+        // it('should be opened on dblclick', () => {\n+        //   todos.title(0).trigger('dblclick');\n \n-          todos.titleField(0).should('exist');\n-        });\n+        //   todos.titleField(0).should('exist');\n+        // });\n \n         it('should have current value', () => {\n           todos.title(0).trigger('dblclick');\n \n"
                },
                {
                    "date": 1715426268224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1395,13 +1395,13 @@\n \n         //   todos.titleField(0).should('exist');\n         // });\n \n-        it('should have current value', () => {\n-          todos.title(0).trigger('dblclick');\n+        // it('should have current value', () => {\n+        //   todos.title(0).trigger('dblclick');\n \n-          todos.titleField(0).should('have.value', 'HTML');\n-        });\n+        //   todos.titleField(0).should('have.value', 'HTML');\n+        // });\n \n         it('should be focused', () => {\n           todos.title(0).trigger('dblclick');\n \n"
                },
                {
                    "date": 1715426279724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1401,13 +1401,13 @@\n \n         //   todos.titleField(0).should('have.value', 'HTML');\n         // });\n \n-        it('should be focused', () => {\n-          todos.title(0).trigger('dblclick');\n+        // it('should be focused', () => {\n+        //   todos.title(0).trigger('dblclick');\n \n-          todos.titleField(0).should('be.focused');\n-        });\n+        //   todos.titleField(0).should('be.focused');\n+        // });\n \n         it('should hide a title', () => {\n           todos.title(0).trigger('dblclick');\n \n"
                },
                {
                    "date": 1715426293080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1413,13 +1413,13 @@\n \n           todos.title(0).should('not.exist');\n         });\n \n-        it('should hide DeleteButton', () => {\n-          todos.title(0).trigger('dblclick');\n+        // it('should hide DeleteButton', () => {\n+        //   todos.title(0).trigger('dblclick');\n \n-          todos.deleteButton(0).should('not.exist');\n-        });\n+        //   todos.deleteButton(0).should('not.exist');\n+        // });\n \n         it('should keep StatusToggler', () => {\n           todos.title(0).trigger('dblclick');\n \n"
                },
                {
                    "date": 1715426304923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1425,16 +1425,16 @@\n \n           todos.statusToggler(0).should('exist');\n         });\n \n-        it('should not open forms for other todos', () => {\n-          todos.title(0).trigger('dblclick');\n+        // it('should not open forms for other todos', () => {\n+        //   todos.title(0).trigger('dblclick');\n \n-          todos.titleField(1).should('not.exist');\n-          todos.titleField(2).should('not.exist');\n-          todos.titleField(3).should('not.exist');\n-          todos.titleField(4).should('not.exist');\n-        });\n+        //   todos.titleField(1).should('not.exist');\n+        //   todos.titleField(2).should('not.exist');\n+        //   todos.titleField(3).should('not.exist');\n+        //   todos.titleField(4).should('not.exist');\n+        // });\n \n         it('should not send a request on change', () => {\n           const spy = cy.stub()\n             .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n"
                },
                {
                    "date": 1715426311877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1425,16 +1425,16 @@\n \n           todos.statusToggler(0).should('exist');\n         });\n \n-        // it('should not open forms for other todos', () => {\n-        //   todos.title(0).trigger('dblclick');\n+        it('should not open forms for other todos', () => {\n+          todos.title(0).trigger('dblclick');\n \n-        //   todos.titleField(1).should('not.exist');\n-        //   todos.titleField(2).should('not.exist');\n-        //   todos.titleField(3).should('not.exist');\n-        //   todos.titleField(4).should('not.exist');\n-        // });\n+          todos.titleField(1).should('not.exist');\n+          todos.titleField(2).should('not.exist');\n+          todos.titleField(3).should('not.exist');\n+          todos.titleField(4).should('not.exist');\n+        });\n \n         it('should not send a request on change', () => {\n           const spy = cy.stub()\n             .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n"
                },
                {
                    "date": 1715426321514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1413,13 +1413,13 @@\n \n           todos.title(0).should('not.exist');\n         });\n \n-        // it('should hide DeleteButton', () => {\n-        //   todos.title(0).trigger('dblclick');\n+        it('should hide DeleteButton', () => {\n+          todos.title(0).trigger('dblclick');\n \n-        //   todos.deleteButton(0).should('not.exist');\n-        // });\n+          todos.deleteButton(0).should('not.exist');\n+        });\n \n         it('should keep StatusToggler', () => {\n           todos.title(0).trigger('dblclick');\n \n"
                },
                {
                    "date": 1715426350829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1413,13 +1413,13 @@\n \n           todos.title(0).should('not.exist');\n         });\n \n-        it('should hide DeleteButton', () => {\n-          todos.title(0).trigger('dblclick');\n+        // it('should hide DeleteButton', () => {\n+        //   todos.title(0).trigger('dblclick');\n \n-          todos.deleteButton(0).should('not.exist');\n-        });\n+        //   todos.deleteButton(0).should('not.exist');\n+        // });\n \n         it('should keep StatusToggler', () => {\n           todos.title(0).trigger('dblclick');\n \n"
                },
                {
                    "date": 1715426362216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1425,16 +1425,16 @@\n \n           todos.statusToggler(0).should('exist');\n         });\n \n-        it('should not open forms for other todos', () => {\n-          todos.title(0).trigger('dblclick');\n+        // it('should not open forms for other todos', () => {\n+        //   todos.title(0).trigger('dblclick');\n \n-          todos.titleField(1).should('not.exist');\n-          todos.titleField(2).should('not.exist');\n-          todos.titleField(3).should('not.exist');\n-          todos.titleField(4).should('not.exist');\n-        });\n+        //   todos.titleField(1).should('not.exist');\n+        //   todos.titleField(2).should('not.exist');\n+        //   todos.titleField(3).should('not.exist');\n+        //   todos.titleField(4).should('not.exist');\n+        // });\n \n         it('should not send a request on change', () => {\n           const spy = cy.stub()\n             .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n"
                },
                {
                    "date": 1715426710678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1769 @@\n+/// <reference types='cypress' />\n+/// <reference types='../support' />\n+\n+import mixedTodos from '../fixtures/todos.json';\n+\n+//#region Page Objects\n+const page = {\n+  toggleAllButton: () => cy.byDataCy('ToggleAllButton'),\n+  newTodoField: () => cy.byDataCy('NewTodoField'),\n+  todosCounter: () => cy.byDataCy('TodosCounter'),\n+  clearCompletedButton: () => cy.byDataCy('ClearCompletedButton'),\n+\n+  visit: (url = '/') => {\n+    cy.visit(url, {\n+      onBeforeLoad: win => win.localStorage.setItem('user', '{ \"id\": 1 }'),\n+    });\n+\n+    // to wait until React App is loaded\n+    cy.get('.todoapp__title').should('exist');\n+  },\n+  pauseTimers: () => cy.clock(),\n+\n+  flushJSTimers: (delay = 1000) => {\n+    cy.clock().then(clock => {\n+      clock.tick(delay);\n+      clock.restore();\n+    });\n+\n+    cy.wait(50);\n+  },\n+\n+  /**\n+   * @param {*} response - can be a valid response object or stub\n+   *\n+   * { body: [] }\n+   * { statusCode: 503: body: 'Service Unavailable' }\n+   * spy = cy.stub().callsFake(req => req.reply(response)).as('alias')\n+   */\n+  mockLoad: (response = { fixture: 'todos' }) => {\n+    return cy.intercept('**/todos?userId=*', response);\n+  },\n+  mockCreate: (response) => {\n+    const options = { method: 'POST', url: '**/todos' };\n+\n+    const spy = cy.stub()\n+      .callsFake(req => req.reply({\n+        statusCode: 201,\n+        body: { ...req.body, id: Math.random() },\n+      }))\n+      .as('createCallback');\n+\n+    return cy.intercept(options, response || spy);\n+  },\n+  mockDelete: (id, response) => {\n+    const options = { method: 'DELETE', url: `**/todos/${id}` };\n+\n+    return cy.intercept(options, response || { body: '1' });\n+  },\n+  mockUpdate: (id, response) => {\n+    const todo = mixedTodos.find(todo => todo.id === id) || {};\n+    const options = { method: 'PATCH', url: `**/todos/${id}` };\n+\n+    const spy = cy.stub()\n+      .callsFake(req => req.reply({ body: { ...todo, ...req.body, id } }))\n+      .as('updateCallback');\n+\n+    return cy.intercept(options, response || spy);\n+  },\n+};\n+\n+const todos = {\n+  el: index => cy.byDataCy('Todo').eq(index),\n+  deleteButton: index => todos.el(index).byDataCy('TodoDelete'),\n+  statusToggler: index => todos.el(index).byDataCy('TodoStatus'),\n+  title: index => todos.el(index).byDataCy('TodoTitle'),\n+  titleField: index => todos.el(index).byDataCy('TodoTitleField'),\n+\n+  assertCount: length => cy.byDataCy('Todo').should('have.length', length),\n+  assertTitle: (index, title) => todos.title(index).should('have.text', title),\n+  assertLoading: index => todos.el(index).byDataCy('TodoLoader').should('have.class', 'is-active'),\n+  assertNotLoading: index => todos.el(index).byDataCy('TodoLoader').should('not.have.class', 'is-active'),\n+  assertCompleted: index => todos.el(index).should('have.class', 'completed'),\n+  assertNotCompleted: index => todos.el(index).should('not.have.class', 'completed'),\n+};\n+\n+const errorMessage = {\n+  el: () => cy.byDataCy('ErrorNotification'),\n+  closeButton: () => errorMessage.el().byDataCy('HideErrorButton'),\n+  assertVisible: () => errorMessage.el().should('not.have.class', 'hidden'),\n+  assertHidden: () => errorMessage.el().should('have.class', 'hidden'),\n+  assertText: text => errorMessage.el().should('have.text', text),\n+};\n+\n+const FilterLinkKeys = {\n+  all: 'FilterLinkAll',\n+  active: 'FilterLinkActive',\n+  completed: 'FilterLinkCompleted',\n+};\n+\n+const filter = {\n+  el: () => cy.byDataCy('Filter'),\n+  link: type => cy.byDataCy(FilterLinkKeys[type]),\n+  assertVisible: () => filter.el().should('exist'),\n+  assertHidden: () => filter.el().should('not.exist'),\n+  assertSelected: type => filter.link(type).should('have.class', 'selected'),\n+  assertNotSelected: type => filter.link(type).should('not.have.class', 'selected'),\n+};\n+//#endregion\n+\n+let failed = false;\n+\n+Cypress.on('fail', (e) => {\n+  failed = true;\n+  throw e;\n+});\n+\n+describe('', () => {\n+  beforeEach(() => {\n+    if (failed) Cypress.runner.stop();\n+  });\n+\n+  describe('Page with no todos', () => {\n+    it('should send 1 todos request', () => {\n+      const spy = cy.stub()\n+        .callsFake(req => req.reply({ body: [] }))\n+        .as('loadCallback')\n+\n+      page.mockLoad(spy).as('loadRequest');\n+      page.visit();\n+\n+      cy.wait('@loadRequest');\n+      cy.wait(500);\n+\n+      cy.get('@loadCallback').should('have.callCount', 1);\n+    });\n+\n+    describe('', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have NewTodoField', () => {\n+        page.newTodoField().should('exist');\n+      });\n+\n+      it('should not have Todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+      it('should not have Footer', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+\n+      it('should not show error message', () => {\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('on loading error', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should show error', () => {\n+        errorMessage.assertVisible();\n+      });\n+\n+      it('should show correct message', () => {\n+        errorMessage.assertText('Unable to load todos');\n+      });\n+\n+      it('should hide error after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n+\n+        cy.clock();\n+        cy.tick(2500);\n+        errorMessage.assertVisible();\n+\n+        cy.tick(500);\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should hide error on close button click', () => {\n+        errorMessage.closeButton().click();\n+        errorMessage.assertHidden();\n+      });\n+    });\n+  });\n+\n+  describe('Page with mixed todos', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should have NewTodoField', () => {\n+      page.newTodoField().should('exist');\n+    });\n+\n+    it('should have all loaded todos', () => {\n+      todos.assertCount(5);\n+    });\n+\n+    it('should have delete buttons for every todo', () => {\n+      todos.deleteButton(0).should('exist');\n+    });\n+\n+    it('should not have loaders', () => {\n+      todos.assertNotLoading(0);\n+      todos.assertNotLoading(1);\n+      todos.assertNotLoading(2);\n+      todos.assertNotLoading(3);\n+      todos.assertNotLoading(4);\n+    })\n+\n+    it('should have correct todo titles', () => {\n+      todos.assertTitle(0, 'HTML');\n+      todos.assertTitle(1, 'CSS');\n+      todos.assertTitle(2, 'JS');\n+      todos.assertTitle(3, 'TypeScript');\n+      todos.assertTitle(4, 'React');\n+    });\n+\n+    it('should higlight all completed todos', () => {\n+      todos.assertCompleted(0);\n+      todos.assertCompleted(1);\n+      todos.assertCompleted(2);\n+    });\n+\n+    it('should not higlight not completed todos', () => {\n+      todos.assertNotCompleted(3);\n+      todos.assertNotCompleted(4);\n+    });\n+\n+    it('should have correct completed statuses', () => {\n+      todos.statusToggler(0).should('be.checked');\n+      todos.statusToggler(1).should('be.checked');\n+      todos.statusToggler(2).should('be.checked');\n+      todos.statusToggler(3).should('not.be.checked');\n+      todos.statusToggler(4).should('not.be.checked');\n+    });\n+\n+    it('should have Filter', () => {\n+      filter.assertVisible();\n+    });\n+\n+    it('should have todosCounter with a number of not completed todos', () => {\n+      page.todosCounter().should('have.text', '2 items left');\n+    });\n+\n+    it('should have clearCompletedButton', () => {\n+      page.clearCompletedButton().should('exist');\n+    });\n+\n+    it('should have Filter', () => {\n+      filter.assertVisible();\n+    });\n+\n+    it('should not show error message', () => {\n+      errorMessage.assertHidden();\n+    });\n+  });\n+\n+  describe('Filtering', () => {\n+    describe('with mixed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have only filterLinkAll active', () => {\n+        filter.assertSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n+\n+      it('should allow to select the active filter', () => {\n+        filter.link('active').click();\n+\n+        filter.assertNotSelected('all');\n+        filter.assertSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n+\n+      it('should show only active todos when active filter is selected', () => {\n+        filter.link('active').click();\n+\n+        todos.assertCount(2);\n+        todos.assertTitle(0, 'TypeScript');\n+        todos.assertTitle(1, 'React');\n+      });\n+\n+      it('should keep footer when active todos are shown', () => {\n+        filter.link('active').click();\n+\n+        page.todosCounter().should('have.text', '2 items left');\n+        filter.assertVisible();\n+        page.clearCompletedButton().should('exist');\n+      });\n+\n+      it('should allow to select the completed filter', () => {\n+        filter.link('completed').click();\n+\n+        filter.assertNotSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertSelected('completed');\n+      });\n+\n+      it('should show only completed todos when completed filter is selected', () => {\n+        filter.link('completed').click();\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+        todos.assertTitle(1, 'CSS');\n+        todos.assertTitle(2, 'JS');\n+      });\n+\n+      it('should keep footer when completed todos are shown', () => {\n+        filter.link('completed').click();\n+\n+        page.todosCounter().should('have.text', '2 items left');\n+        filter.assertVisible();\n+        page.clearCompletedButton().should('exist');\n+      });\n+\n+      it('should allow to reset filter', () => {\n+        filter.link('completed').click();\n+        filter.link('all').click();\n+\n+        todos.assertCount(5);\n+        filter.assertSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n+    });\n+\n+    describe('with active todos only', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should hide todos on completed selection', () => {\n+        filter.link('completed').click();\n+\n+        todos.assertCount(0);\n+      });\n+\n+      it('should keep footer on completed selection', () => {\n+        filter.link('completed').click();\n+        filter.assertVisible();\n+      });\n+\n+      it('should keep todos counter on completed selection', () => {\n+        filter.link('completed').click();\n+        page.todosCounter().should('have.text', '5 items left');\n+      });\n+    });\n+\n+    describe('with completed todos only', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+    });\n+  });\n+\n+  describe('Adding a todo', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should focus text field by default', () => {\n+      page.newTodoField().should('be.focused');\n+    });\n+\n+    describe('if title is empty', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.newTodoField().type('{enter}');\n+      });\n+\n+      it('should not send a request', () => {\n+        cy.get('@createCallback').should('not.be.called');\n+      });\n+\n+      it('should keep text field focused', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should display an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Title should not be empty');\n+      });\n+\n+      it('should hide an error message after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n+\n+        cy.clock();\n+        cy.tick(3000);\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('if title title has only whitespaces', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.newTodoField().type('     {enter}');\n+      });\n+\n+      it('should not send a request', () => {\n+        cy.get('@createCallback').should('not.be.called');\n+      });\n+\n+      it('should keep text field focused', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should display an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Title should not be empty');\n+      });\n+\n+      it('should hide an error message after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n+\n+        cy.clock();\n+        cy.tick(3000);\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('after form submition before response is received', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.pauseTimers();\n+        page.newTodoField().type('Test Todo{enter}');\n+      });\n+\n+      it('should send a create request', () => {\n+        cy.tick(1000);\n+        cy.get('@createCallback').should('have.callCount', 1);\n+      });\n+\n+      it('should disable the input', () => {\n+        page.newTodoField().should('be.disabled');\n+      });\n+\n+      it('should keep entered text', () => {\n+        page.newTodoField().should('have.value', 'Test Todo');\n+      });\n+\n+      it('should create and show a temp TodoItem with Loader', () => {\n+        todos.assertCount(6);\n+        todos.assertLoading(5);\n+      });\n+\n+      it('should show a temp TodoItem with correct title', () => {\n+        todos.assertTitle(5, 'Test Todo');\n+      });\n+\n+      it('should show a not completed temp TodoItem', () => {\n+        todos.assertNotCompleted(5);\n+      });\n+\n+      it('should not show loaders for existing todos', () => {\n+        todos.assertNotLoading(0);\n+        todos.assertNotLoading(1);\n+        todos.assertNotLoading(2);\n+        todos.assertNotLoading(3);\n+        todos.assertNotLoading(4);\n+      });\n+\n+      it('should not update active counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+    });\n+\n+    describe('on success response', () => {\n+      describe('', () => {\n+        beforeEach(() => {\n+          page.mockCreate().as('createRequest');\n+          page.newTodoField().type('Test Todo{enter}');\n+\n+          cy.wait('@createRequest');\n+        });\n+\n+        // this test may be flaky\n+        it.skip('should replace loader with a created todo', () => {\n+          page.flushJSTimers();\n+          todos.assertCount(6);\n+          todos.assertNotLoading(5);\n+        });\n+\n+        it('should add a todo with a correct title', () => {\n+          todos.assertTitle(5, 'Test Todo');\n+        });\n+\n+        it('should add a not completed todo', () => {\n+          todos.assertNotCompleted(5);\n+        });\n+\n+        it('should update active counter', () => {\n+          page.todosCounter().should('have.text', '3 items left');\n+        });\n+\n+        it('should enable the text field', () => {\n+          page.newTodoField().should('not.be.disabled');\n+        });\n+\n+        it('should not show error message', () => {\n+          errorMessage.assertHidden();\n+        });\n+\n+        it('should clear text field', () => {\n+          page.newTodoField().should('have.value', '');\n+        });\n+\n+        it('should focus text field', () => {\n+          page.newTodoField().should('be.focused');\n+        });\n+\n+        it('should allow to add one more todo', () => {\n+          page.mockCreate().as('createRequest2');\n+\n+          page.newTodoField().type('Hello world{enter}');\n+          cy.wait('@createRequest2');\n+          page.flushJSTimers();\n+\n+          todos.assertCount(7);\n+          // todos.assertNotLoading(6);\n+          todos.assertNotCompleted(6);\n+          todos.assertTitle(6, 'Hello world');\n+          page.todosCounter().should('have.text', '4 items left');\n+        });\n+      });\n+\n+      it('should add trimmed title', () => {\n+        page.mockCreate().as('createRequest');\n+\n+        page.newTodoField().type('  Other Title    {enter}');\n+        cy.wait('@createRequest');\n+\n+        // just in case\n+        page.flushJSTimers();\n+\n+        todos.assertTitle(5, 'Other Title');\n+      });\n+\n+      it('should keep current filter', () => {\n+        page.mockCreate().as('createRequest');\n+\n+        filter.link('active').click();\n+        page.newTodoField().type('Test Todo{enter}');\n+        cy.wait('@createRequest');\n+\n+        filter.assertSelected('active');\n+      });\n+    });\n+\n+    describe('on request fail', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest');\n+\n+        page.newTodoField().type('Test Todo{enter}');\n+\n+        cy.wait('@createRequest');\n+      });\n+\n+      it('should show an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to add a todo');\n+      });\n+\n+      it('should hide an error message in 3 seconds', () => {\n+        cy.clock();\n+        cy.tick(2500);\n+\n+        errorMessage.assertVisible();\n+\n+        cy.tick(500);\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should remove a temp TodoItem on request fail', () => {\n+        todos.assertCount(5);\n+        todos.assertTitle(4, 'React');\n+      });\n+\n+      it('should enable the text field on request fail', () => {\n+        page.newTodoField().should('not.be.disabled');\n+      });\n+\n+      it('should keep the entered text on request fail', () => {\n+        page.newTodoField().should('have.value', 'Test Todo');\n+      });\n+\n+      it('should focus text field', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should not update active counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+\n+      it('should immediately hide an error message on new request', () => {\n+        page.newTodoField().type(`{enter}`);\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should show an error message again on a next fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest2');\n+\n+        page.newTodoField().type(`{enter}`);\n+        cy.wait('@createRequest2');\n+\n+        errorMessage.assertVisible();\n+      });\n+\n+      it('should keep an error message for 3s after the last fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest2');\n+\n+        cy.clock();\n+\n+        cy.tick(2000);\n+        page.newTodoField().type(`{enter}`);\n+        cy.tick(500);\n+        cy.wait('@createRequest2');\n+        cy.tick(2000);\n+\n+        errorMessage.assertVisible();\n+      });\n+\n+      it('should allow to add a todo', () => {\n+        page.mockCreate().as('createRequest2');\n+        page.newTodoField().type('{enter}');\n+\n+        cy.wait('@createRequest2');\n+        page.flushJSTimers();\n+\n+        todos.assertCount(6);\n+        // todos.assertNotLoading(5);\n+        todos.assertNotCompleted(5);\n+        todos.assertTitle(5, 'Test Todo');\n+\n+        page.todosCounter().should('have.text', '3 items left');\n+      });\n+    });\n+  });\n+\n+  describe('Adding a first todo', () => {\n+    beforeEach(() => {\n+      page.mockLoad({ body: [] }).as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+\n+      page.mockCreate().as('createRequest');\n+      page.newTodoField().type('First todo{enter}');\n+\n+      cy.wait('@createRequest');\n+    });\n+\n+    it('should show a new todos', () => {\n+      todos.assertCount(1);\n+      todos.assertTitle(0, 'First todo');\n+      todos.assertNotCompleted(0);\n+    });\n+\n+    it('should show Filter', () => {\n+      filter.assertVisible();\n+    });\n+\n+    it('should show todosCounter', () => {\n+      page.todosCounter().should('contain.text', '1 item');\n+    });\n+  });\n+\n+  describe('Individual Todo Deletion', () => {\n+    describe('Default behavior', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n+        page.mockDelete(257334);\n+        page.pauseTimers();\n+        todos.deleteButton(0).click();\n+\n+        todos.assertLoading(0);\n+      });\n+\n+      it('should not delete a todo before successful response', () => {\n+        page.mockDelete(257334);\n+        page.pauseTimers();\n+        todos.deleteButton(0).click();\n+\n+        todos.assertCount(5);\n+      });\n+\n+      it('should remove the todo from the list on a successful API response', () => {\n+        page.mockDelete(257334).as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        todos.assertCount(4);\n+        todos.assertTitle(0, 'CSS');\n+      });\n+\n+      it('should focus text field after todo deletion', () => {\n+        page.mockDelete(257334).as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should not remove the todo from the list on an API error', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        todos.assertCount(5);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+\n+      it('should show an error message on an API error', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to delete a todo');\n+      });\n+\n+      it('should adjust the active todo count correctly after successful deletion', () => {\n+        page.mockDelete(257338).as('deleteRequest');\n+        todos.deleteButton(4).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.todosCounter().should('contain.text', '1 item');\n+      });\n+\n+      it('should not adjust the active todo count after failed deletion', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n+          .as('deleteRequest');\n+\n+        todos.deleteButton(4).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+    });\n+\n+    describe('Last todo deletion', () => {\n+      beforeEach(() => {\n+        const todo = {\n+          \"id\": 257334,\n+          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+          \"userId\": 1,\n+          \"title\": \"HTML\",\n+          \"completed\": false\n+        };\n+\n+        page.mockLoad({ body: [todo] }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.mockDelete(257334);\n+        todos.deleteButton(0).click();\n+      });\n+\n+      it('should hide todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+      it('should hide footer', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+\n+      it('should focus text field after todo deletion', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+    });\n+  });\n+\n+  describe('Group Todo Deletion', () => {\n+    describe('with no completed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should not have active ClearCompleted button', () => {\n+        page.clearCompletedButton().should('be.disabled');\n+      });\n+    });\n+\n+    describe('with some completed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have ClearCompleted button enabled', () => {\n+        page.clearCompletedButton().should('not.be.disabled');\n+      });\n+\n+      it('should send individual deletion request for each completed todo', () => {\n+        page.mockDelete(257334).as('deleteRequest1');\n+        page.mockDelete(257335).as('deleteRequest2');\n+        page.mockDelete(257336).as('deleteRequest3');\n+\n+        page.clearCompletedButton().click();\n+\n+        cy.wait('@deleteRequest1');\n+        cy.wait('@deleteRequest2');\n+        cy.wait('@deleteRequest3');\n+      });\n+\n+      describe('on success', () => {\n+        beforeEach(() => {\n+          page.mockDelete(257334).as('deleteRequest1');\n+          page.mockDelete(257335).as('deleteRequest2');\n+          page.mockDelete(257336).as('deleteRequest3');\n+\n+          page.clearCompletedButton().click();\n+\n+          cy.wait('@deleteRequest1');\n+          cy.wait('@deleteRequest2');\n+          cy.wait('@deleteRequest3');\n+        });\n+\n+        it('should remove all completed todos from the list', () => {\n+          todos.assertCount(2);\n+          todos.assertTitle(0, 'TypeScript');\n+          todos.assertTitle(1, 'React');\n+        });\n+\n+        it('should disable ClearCompleted button', () => {\n+          page.clearCompletedButton().should('be.disabled');\n+        });\n+\n+        it('should focus the text field', () => {\n+          page.newTodoField().should('be.focused');\n+        });\n+      });\n+\n+      describe('on a single fail', () => {\n+        beforeEach(() => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334).as('deleteRequest1');\n+          page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n+          page.mockDelete(257336).as('deleteRequest3');\n+\n+          page.clearCompletedButton().click();\n+\n+          cy.wait('@deleteRequest1');\n+          cy.wait('@deleteRequest2');\n+          cy.wait('@deleteRequest3');\n+        });\n+\n+        it('should show an error message if any of the group deletions fails', () => {\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to delete a todo');\n+        });\n+\n+        it('should remove todos with success responses and keep todos with errors', () => {\n+          todos.assertCount(3);\n+          todos.assertTitle(0, 'CSS');\n+          todos.assertTitle(1, 'TypeScript');\n+        });\n+\n+        it('should not disable ClearCompleted button', () => {\n+          page.clearCompletedButton().should('not.be.disabled');\n+        });\n+      });\n+    });\n+\n+    describe('with all todos completed', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.mockDelete(257334).as('deleteRequest1');\n+        page.mockDelete(257335).as('deleteRequest2');\n+        page.mockDelete(257336).as('deleteRequest3');\n+        page.mockDelete(257337).as('deleteRequest4');\n+        page.mockDelete(257338).as('deleteRequest5');\n+\n+        page.clearCompletedButton().click();\n+\n+        cy.wait('@deleteRequest1');\n+        cy.wait('@deleteRequest2');\n+        cy.wait('@deleteRequest3');\n+        cy.wait('@deleteRequest4');\n+        cy.wait('@deleteRequest5');\n+      });\n+\n+      it('should hide todos after clearing all completed todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+      it('should hide footer after clearing all completed todos', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+    });\n+  });\n+\n+  describe('Todo Toggling', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    describe('before receving response', () => {\n+      beforeEach(() => {\n+        page.mockUpdate(257334).as('updateRequest');\n+      });\n+\n+      it('should send an update request', () => {\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n+\n+      it('should show loader after click', () => {\n+        page.pauseTimers();\n+        todos.statusToggler(0).click();\n+\n+        todos.assertLoading(0);\n+      });\n+\n+      it('should not show error message after click', () => {\n+        page.pauseTimers();\n+        todos.statusToggler(0).click();\n+\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should not hide a todo if filtered', () => {\n+        filter.link('completed').click();\n+        page.pauseTimers();\n+        cy.tick(1000); // flush JS animation\n+        todos.statusToggler(0).click();\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+    });\n+\n+    describe('on success', () => {\n+      beforeEach(() => {\n+        page.mockUpdate(257334).as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n+\n+      it('should toggle a todo', () => {\n+        todos.assertNotCompleted(0);\n+        todos.statusToggler(0).should('not.be.checked');\n+      });\n+\n+      it('should cancel loading', () => {\n+        page.flushJSTimers();\n+        todos.assertNotLoading(0);\n+      });\n+\n+      it('should update the counter', () => {\n+        page.todosCounter().should('have.text', '3 items left');\n+      });\n+\n+      it('should not show an error message', () => {\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('on fail', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+          .as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n+\n+      it('should show an error', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to update a todo');\n+      });\n+\n+      it('should not toggle a todo', () => {\n+        todos.assertCompleted(0);\n+        todos.statusToggler(0).should('be.checked');\n+      });\n+\n+      it('should cancel loading', () => {\n+        page.flushJSTimers();\n+        todos.assertNotLoading(0);\n+      });\n+\n+      it('should not update the counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+\n+      it('should allow to toggle again', () => {\n+        page.mockUpdate(257334).as('updateRequest2');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest2');\n+\n+        todos.assertNotCompleted(0);\n+      });\n+    });\n+\n+    describe('if filtered', () => {\n+      beforeEach(() => {\n+        filter.link('completed').click();\n+      });\n+\n+      it('should hide a todo on success', () => {\n+        page.mockUpdate(257334).as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+\n+        todos.assertCount(2);\n+        todos.assertTitle(0, 'CSS');\n+      });\n+\n+      it('should show a todo on success when selected an oposite filter', () => {\n+        page.mockUpdate(257334).as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        filter.link('active').click();\n+        cy.wait('@updateRequest');\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+\n+      it('should not hide a todo on fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+          .as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+    });\n+  });\n+\n+\n+\n+\n+\n+\n+\n+  describe('Toggle All Button', () => {\n+    describe('if there are no todos', () => {\n+      it('should not be visible while loading todos', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+\n+        page.pauseTimers();\n+        page.visit();\n+\n+        page.toggleAllButton().should('not.exist');\n+      });\n+\n+      it('should not be visible when loaded', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.toggleAllButton().should('not.exist');\n+      });\n+\n+      it('should appear after adding a todo', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+        page.mockCreate().as('createRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.newTodoField().type('First todo{enter}');\n+        cy.wait('@createRequest');\n+\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should disappear after removing the last todo', () => {\n+        const todo = {\n+          \"id\": 257334,\n+          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+          \"userId\": 1,\n+          \"title\": \"HTML\",\n+          \"completed\": false\n+        };\n+\n+        page.mockLoad({ body: [todo] }).as('loadRequest');\n+        page.mockDelete(257334).as('deleteRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.toggleAllButton().should('not.exist');\n+      });\n+    });\n+\n+    describe('if all todos are completed', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should be visible', () => {\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should stay visible after filtering out all the todos', () => {\n+        filter.link('active').click();\n+\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should be active', () => {\n+        page.toggleAllButton().should('have.class', 'active');\n+      });\n+\n+      it('should become not active after toggling a todo', () => {\n+        page.mockUpdate(257335).as('updateRequest');\n+        todos.statusToggler(1).click();\n+        cy.wait('@updateRequest');\n+\n+        page.toggleAllButton().should('not.have.class', 'active');\n+      });\n+\n+      it('should stay active after a todo toggling fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n+        todos.statusToggler(1).click();\n+        cy.wait('@updateRequest');\n+\n+        page.toggleAllButton().should('have.class', 'active');\n+      });\n+\n+      describe('on click', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334).as('updateRequest4');\n+          page.mockUpdate(257335).as('updateRequest5');\n+          page.mockUpdate(257336).as('updateRequest6');\n+          page.mockUpdate(257337).as('updateRequest7');\n+          page.mockUpdate(257338).as('updateRequest8');\n+\n+          page.toggleAllButton().click();\n+\n+          cy.wait('@updateRequest4');\n+          cy.wait('@updateRequest5');\n+          cy.wait('@updateRequest6');\n+          cy.wait('@updateRequest7');\n+          cy.wait('@updateRequest8');\n+        });\n+\n+        it('should send requests for all todos', () => {\n+          // if before each pass\n+        });\n+\n+        it('should make all todos active', () => {\n+          todos.assertNotCompleted(0);\n+          todos.assertNotCompleted(1);\n+          todos.assertNotCompleted(2);\n+          todos.assertNotCompleted(3);\n+          todos.assertNotCompleted(4);\n+        });\n+\n+        it('should become not active', () => {\n+          page.toggleAllButton().should('not.have.class', 'active');\n+        });\n+      });\n+    });\n+\n+    describe('if all todos are active', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should be visible', () => {\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should not be active', () => {\n+        page.toggleAllButton().should('not.have.class', 'active');\n+      });\n+\n+      it('should not become active after toggling a todo', () => {\n+        page.mockUpdate(257335).as('updateRequest');\n+        todos.statusToggler(1).click();\n+        cy.wait('@updateRequest');\n+\n+        page.toggleAllButton().should('not.have.class', 'active');\n+      });\n+\n+      describe('on click', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334).as('updateRequest4');\n+          page.mockUpdate(257335).as('updateRequest5');\n+          page.mockUpdate(257336).as('updateRequest6');\n+          page.mockUpdate(257337).as('updateRequest7');\n+          page.mockUpdate(257338).as('updateRequest8');\n+\n+          page.toggleAllButton().click();\n+\n+          cy.wait('@updateRequest4');\n+          cy.wait('@updateRequest5');\n+          cy.wait('@updateRequest6');\n+          cy.wait('@updateRequest7');\n+          cy.wait('@updateRequest8');\n+        });\n+\n+        it('should send requests for all todos', () => {\n+          // if before each pass\n+        });\n+\n+        it('should make all todos completed', () => {\n+          todos.assertCompleted(0);\n+          todos.assertCompleted(1);\n+          todos.assertCompleted(2);\n+          todos.assertCompleted(3);\n+          todos.assertCompleted(4);\n+        });\n+\n+        it('should become active', () => {\n+          page.toggleAllButton().should('have.class', 'active');\n+        });\n+      });\n+    });\n+\n+    describe('if there are some mixed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should be visible', () => {\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should not be active', () => {\n+        page.toggleAllButton().should('not.have.class', 'active');\n+      });\n+\n+      it('should become active after completing all todos', () => {\n+        page.mockUpdate(257337).as('updateRequest1');\n+        page.mockUpdate(257338).as('updateRequest2');\n+\n+        todos.statusToggler(3).click();\n+        cy.wait('@updateRequest1');\n+        todos.statusToggler(4).click();\n+        cy.wait('@updateRequest2');\n+\n+        page.toggleAllButton().should('have.class', 'active');\n+      });\n+\n+      describe('on click', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334, cy.stub().as('update4'));\n+          page.mockUpdate(257335, cy.stub().as('update5'));\n+          page.mockUpdate(257336, cy.stub().as('update6'));\n+          page.mockUpdate(257337).as('updateRequest7');\n+          page.mockUpdate(257338).as('updateRequest8');\n+\n+          page.toggleAllButton().click();\n+\n+          cy.wait('@updateRequest7');\n+          cy.wait('@updateRequest8');\n+        });\n+\n+        it('should send requests only for not completed todos', () => {\n+          cy.get('@update4').should('not.be.called');\n+          cy.get('@update5').should('not.be.called');\n+          cy.get('@update6').should('not.be.called');\n+        });\n+\n+        it('should make all todos completed', () => {\n+          todos.assertCompleted(0);\n+          todos.assertCompleted(1);\n+          todos.assertCompleted(2);\n+          todos.assertCompleted(3);\n+          todos.assertCompleted(4);\n+        });\n+\n+        it('should become active', () => {\n+          page.toggleAllButton().should('have.class', 'active');\n+        });\n+      });\n+    });\n+  });\n+\n+  describe('Renaming', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should not show forms by default', () => {\n+      todos.titleField(0).should('not.exist');\n+      todos.titleField(1).should('not.exist');\n+      todos.titleField(2).should('not.exist');\n+      todos.titleField(3).should('not.exist');\n+      todos.titleField(4).should('not.exist');\n+    });\n+\n+    describe('Edit Form', () => {\n+      describe('by default', () => {\n+        it('should be opened on dblclick', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should have current value', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.titleField(0).should('have.value', 'HTML');\n+        });\n+\n+        it('should be focused', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.titleField(0).should('be.focused');\n+        });\n+\n+        it('should hide a title', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.title(0).should('not.exist');\n+        });\n+\n+        // it('should hide DeleteButton', () => {\n+        //   todos.title(0).trigger('dblclick');\n+\n+        //   todos.deleteButton(0).should('not.exist');\n+        // });\n+\n+        it('should keep StatusToggler', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.statusToggler(0).should('exist');\n+        });\n+\n+        // it('should not open forms for other todos', () => {\n+        //   todos.title(0).trigger('dblclick');\n+\n+        //   todos.titleField(1).should('not.exist');\n+        //   todos.titleField(2).should('not.exist');\n+        //   todos.titleField(3).should('not.exist');\n+        //   todos.titleField(4).should('not.exist');\n+        // });\n+\n+        it('should not send a request on change', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+      });\n+\n+      describe('on Escape', () => {\n+        it('should be closed', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should keep current title', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n+\n+          todos.assertTitle(0, 'HTML');\n+        });\n+\n+        it('should not send a request', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+      });\n+\n+      describe('on enter before recieved a response', () => {\n+        it('should send a request', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123{enter}');\n+\n+          cy.get('@renameCallback').should('have.callCount', 1);\n+        });\n+\n+        it('should show loader', () => {\n+          page.mockUpdate(257334);\n+\n+          todos.title(0).trigger('dblclick');\n+          page.pauseTimers();\n+          todos.titleField(0).type('123{enter}');\n+\n+          todos.assertLoading(0);\n+        });\n+\n+        // It depend on your implementation\n+        it.skip('should stay while waiting', () => {\n+          page.mockUpdate(257334);\n+\n+          todos.title(0).trigger('dblclick');\n+          page.pauseTimers();\n+          todos.titleField(0).type('123{enter}');\n+\n+          todos.titleField(0).should('exist');\n+        });\n+      });\n+\n+      describe('on success', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334).as('renameRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear()\n+        });\n+\n+        it('should cancel loading', () => {\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should be closed', () => {\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should show the updated title', () => {\n+          todos.titleField(0).type('Something{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertTitle(0, 'Something');\n+        });\n+\n+        it('should show trim the new title', () => {\n+          todos.titleField(0).type('   Some new title      {enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertTitle(0, 'Some new title');\n+        });\n+      });\n+\n+      describe('on fail', () => {\n+        beforeEach(() => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+        });\n+\n+        it('should cancel loading on fail', () => {\n+          page.flushJSTimers();\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should stay open on fail', () => {\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should show error message', () => {\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to update a todo');\n+        });\n+\n+        it('should hide error message in 3s', () => {\n+          page.flushJSTimers(3000);\n+\n+          errorMessage.assertHidden();\n+        });\n+      });\n+\n+      describe('if title was not changed', () => {\n+        it('should not send a request on enter', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+\n+        it('should be close on enter', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should be closed on Escape', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should preserve current title on save', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.assertTitle(0, 'HTML');\n+        });\n+      });\n+\n+      describe('if title became empty', () => {\n+        beforeEach(() => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+        });\n+\n+        it('should not send an update request on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+\n+        it('should send a delete request on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.wait('@deleteRequest');\n+        });\n+\n+        it('should show loading on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+\n+          page.pauseTimers();\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.assertLoading(0);\n+        });\n+\n+        it('should delete a todo on success', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          todos.assertCount(4);\n+          todos.assertTitle(0, 'CSS');\n+        });\n+\n+        it('should show deleting error message on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to delete a todo')\n+        });\n+\n+        // this test may be unstable\n+        it.skip('should hide loader on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should stay open on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should be closed on Escape', () => {\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should preserve current title on close', () => {\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.title(0).should('have.text', 'HTML');\n+        });\n+      });\n+\n+      describe('on Blur', () => {\n+        it('should save', () => {\n+          page.mockUpdate(257334).as('renameRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear()\n+          todos.titleField(0).type('New title');\n+          todos.titleField(0).blur();\n+          cy.wait('@renameRequest');\n+\n+          // just in case\n+          page.flushJSTimers();\n+\n+          todos.assertTitle(0, 'New title');\n+        });\n+\n+        it('should cancel if title was not changed', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).blur();\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+          page.flushJSTimers();\n+          todos.titleField(0).should('not.exist');\n+          todos.assertTitle(0, 'HTML');\n+        });\n+\n+        it('should delete if title is empty', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+          todos.titleField(0).blur();\n+          cy.wait('@deleteRequest');\n+\n+          todos.assertCount(4);\n+          todos.assertTitle(0, 'CSS');\n+        })\n+      });\n+    });\n+  });\n+});\n"
                },
                {
                    "date": 1715426719281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1413,1798 +1413,29 @@\n \n           todos.title(0).should('not.exist');\n         });\n \n-        // it('should hide DeleteButton', () => {\n-        //   todos.title(0).trigger('dblclick');\n+        it('should hide DeleteButton', () => {\n+          todos.title(0).trigger('dblclick');\n \n-        //   todos.deleteButton(0).should('not.exist');\n-        // });\n+          todos.deleteButton(0).should('not.exist');\n+        });\n \n         it('should keep StatusToggler', () => {\n           todos.title(0).trigger('dblclick');\n \n           todos.statusToggler(0).should('exist');\n         });\n \n-        // it('should not open forms for other todos', () => {\n-        //   todos.title(0).trigger('dblclick');\n-\n-        //   todos.titleField(1).should('not.exist');\n-        //   todos.titleField(2).should('not.exist');\n-        //   todos.titleField(3).should('not.exist');\n-        //   todos.titleField(4).should('not.exist');\n-        // });\n-\n-        it('should not send a request on change', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n+        it('should not open forms for other todos', () => {\n           todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123');\n \n-          cy.get('@renameCallback').should('not.be.called');\n+          todos.titleField(1).should('not.exist');\n+          todos.titleField(2).should('not.exist');\n+          todos.titleField(3).should('not.exist');\n+          todos.titleField(4).should('not.exist');\n         });\n-      });\n \n-      describe('on Escape', () => {\n-        it('should be closed', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should keep current title', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n-\n-          todos.assertTitle(0, 'HTML');\n-        });\n-\n-        it('should not send a request', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-      });\n-\n-      describe('on enter before recieved a response', () => {\n-        it('should send a request', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123{enter}');\n-\n-          cy.get('@renameCallback').should('have.callCount', 1);\n-        });\n-\n-        it('should show loader', () => {\n-          page.mockUpdate(257334);\n-\n-          todos.title(0).trigger('dblclick');\n-          page.pauseTimers();\n-          todos.titleField(0).type('123{enter}');\n-\n-          todos.assertLoading(0);\n-        });\n-\n-        // It depend on your implementation\n-        it.skip('should stay while waiting', () => {\n-          page.mockUpdate(257334);\n-\n-          todos.title(0).trigger('dblclick');\n-          page.pauseTimers();\n-          todos.titleField(0).type('123{enter}');\n-\n-          todos.titleField(0).should('exist');\n-        });\n-      });\n-\n-      describe('on success', () => {\n-        beforeEach(() => {\n-          page.mockUpdate(257334).as('renameRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear()\n-        });\n-\n-        it('should cancel loading', () => {\n-          todos.titleField(0).type('123{enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n-\n-          todos.assertNotLoading(0);\n-        });\n-\n-        it('should be closed', () => {\n-          todos.titleField(0).type('123{enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should show the updated title', () => {\n-          todos.titleField(0).type('Something{enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n-\n-          todos.assertTitle(0, 'Something');\n-        });\n-\n-        it('should show trim the new title', () => {\n-          todos.titleField(0).type('   Some new title      {enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n-\n-          todos.assertTitle(0, 'Some new title');\n-        });\n-      });\n-\n-      describe('on fail', () => {\n-        beforeEach(() => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123{enter}');\n-          cy.wait('@renameRequest');\n-        });\n-\n-        it('should cancel loading on fail', () => {\n-          page.flushJSTimers();\n-          todos.assertNotLoading(0);\n-        });\n-\n-        it('should stay open on fail', () => {\n-          todos.titleField(0).should('exist');\n-        });\n-\n-        it('should show error message', () => {\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to update a todo');\n-        });\n-\n-        it('should hide error message in 3s', () => {\n-          page.flushJSTimers(3000);\n-\n-          errorMessage.assertHidden();\n-        });\n-      });\n-\n-      describe('if title was not changed', () => {\n-        it('should not send a request on enter', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-\n-        it('should be close on enter', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should be closed on Escape', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{esc}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should preserve current title on save', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n-\n-          todos.assertTitle(0, 'HTML');\n-        });\n-      });\n-\n-      describe('if title became empty', () => {\n-        beforeEach(() => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear();\n-        });\n-\n-        it('should not send an update request on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-\n-        it('should send a delete request on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n-\n-          cy.wait('@deleteRequest');\n-        });\n-\n-        it('should show loading on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-\n-          page.pauseTimers();\n-          todos.titleField(0).type('{enter}');\n-\n-          todos.assertLoading(0);\n-        });\n-\n-        it('should delete a todo on success', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-\n-          todos.assertCount(4);\n-          todos.assertTitle(0, 'CSS');\n-        });\n-\n-        it('should show deleting error message on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to delete a todo')\n-        });\n-\n-        // this test may be unstable\n-        it.skip('should hide loader on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-          page.flushJSTimers();\n-\n-          todos.assertNotLoading(0);\n-        });\n-\n-        it('should stay open on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-\n-          todos.titleField(0).should('exist');\n-        });\n-\n-        it('should be closed on Escape', () => {\n-          todos.titleField(0).type('{esc}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should preserve current title on close', () => {\n-          todos.titleField(0).type('{esc}');\n-\n-          todos.title(0).should('have.text', 'HTML');\n-        });\n-      });\n-\n-      describe('on Blur', () => {\n-        it('should save', () => {\n-          page.mockUpdate(257334).as('renameRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear()\n-          todos.titleField(0).type('New title');\n-          todos.titleField(0).blur();\n-          cy.wait('@renameRequest');\n-\n-          // just in case\n-          page.flushJSTimers();\n-\n-          todos.assertTitle(0, 'New title');\n-        });\n-\n-        it('should cancel if title was not changed', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).blur();\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-          page.flushJSTimers();\n-          todos.titleField(0).should('not.exist');\n-          todos.assertTitle(0, 'HTML');\n-        });\n-\n-        it('should delete if title is empty', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear();\n-          todos.titleField(0).blur();\n-          cy.wait('@deleteRequest');\n-\n-          todos.assertCount(4);\n-          todos.assertTitle(0, 'CSS');\n-        })\n-      });\n-    });\n-  });\n-});\n-/// <reference types='cypress' />\n-/// <reference types='../support' />\n-\n-import mixedTodos from '../fixtures/todos.json';\n-\n-//#region Page Objects\n-const page = {\n-  toggleAllButton: () => cy.byDataCy('ToggleAllButton'),\n-  newTodoField: () => cy.byDataCy('NewTodoField'),\n-  todosCounter: () => cy.byDataCy('TodosCounter'),\n-  clearCompletedButton: () => cy.byDataCy('ClearCompletedButton'),\n-\n-  visit: (url = '/') => {\n-    cy.visit(url, {\n-      onBeforeLoad: win => win.localStorage.setItem('user', '{ \"id\": 1 }'),\n-    });\n-\n-    // to wait until React App is loaded\n-    cy.get('.todoapp__title').should('exist');\n-  },\n-  pauseTimers: () => cy.clock(),\n-\n-  flushJSTimers: (delay = 1000) => {\n-    cy.clock().then(clock => {\n-      clock.tick(delay);\n-      clock.restore();\n-    });\n-\n-    cy.wait(50);\n-  },\n-\n-  /**\n-   * @param {*} response - can be a valid response object or stub\n-   *\n-   * { body: [] }\n-   * { statusCode: 503: body: 'Service Unavailable' }\n-   * spy = cy.stub().callsFake(req => req.reply(response)).as('alias')\n-   */\n-  mockLoad: (response = { fixture: 'todos' }) => {\n-    return cy.intercept('**/todos?userId=*', response);\n-  },\n-  mockCreate: (response) => {\n-    const options = { method: 'POST', url: '**/todos' };\n-\n-    const spy = cy.stub()\n-      .callsFake(req => req.reply({\n-        statusCode: 201,\n-        body: { ...req.body, id: Math.random() },\n-      }))\n-      .as('createCallback');\n-\n-    return cy.intercept(options, response || spy);\n-  },\n-  mockDelete: (id, response) => {\n-    const options = { method: 'DELETE', url: `**/todos/${id}` };\n-\n-    return cy.intercept(options, response || { body: '1' });\n-  },\n-  mockUpdate: (id, response) => {\n-    const todo = mixedTodos.find(todo => todo.id === id) || {};\n-    const options = { method: 'PATCH', url: `**/todos/${id}` };\n-\n-    const spy = cy.stub()\n-      .callsFake(req => req.reply({ body: { ...todo, ...req.body, id } }))\n-      .as('updateCallback');\n-\n-    return cy.intercept(options, response || spy);\n-  },\n-};\n-\n-const todos = {\n-  el: index => cy.byDataCy('Todo').eq(index),\n-  deleteButton: index => todos.el(index).byDataCy('TodoDelete'),\n-  statusToggler: index => todos.el(index).byDataCy('TodoStatus'),\n-  title: index => todos.el(index).byDataCy('TodoTitle'),\n-  titleField: index => todos.el(index).byDataCy('TodoTitleField'),\n-\n-  assertCount: length => cy.byDataCy('Todo').should('have.length', length),\n-  assertTitle: (index, title) => todos.title(index).should('have.text', title),\n-  assertLoading: index => todos.el(index).byDataCy('TodoLoader').should('have.class', 'is-active'),\n-  assertNotLoading: index => todos.el(index).byDataCy('TodoLoader').should('not.have.class', 'is-active'),\n-  assertCompleted: index => todos.el(index).should('have.class', 'completed'),\n-  assertNotCompleted: index => todos.el(index).should('not.have.class', 'completed'),\n-};\n-\n-const errorMessage = {\n-  el: () => cy.byDataCy('ErrorNotification'),\n-  closeButton: () => errorMessage.el().byDataCy('HideErrorButton'),\n-  assertVisible: () => errorMessage.el().should('not.have.class', 'hidden'),\n-  assertHidden: () => errorMessage.el().should('have.class', 'hidden'),\n-  assertText: text => errorMessage.el().should('have.text', text),\n-};\n-\n-const FilterLinkKeys = {\n-  all: 'FilterLinkAll',\n-  active: 'FilterLinkActive',\n-  completed: 'FilterLinkCompleted',\n-};\n-\n-const filter = {\n-  el: () => cy.byDataCy('Filter'),\n-  link: type => cy.byDataCy(FilterLinkKeys[type]),\n-  assertVisible: () => filter.el().should('exist'),\n-  assertHidden: () => filter.el().should('not.exist'),\n-  assertSelected: type => filter.link(type).should('have.class', 'selected'),\n-  assertNotSelected: type => filter.link(type).should('not.have.class', 'selected'),\n-};\n-//#endregion\n-\n-let failed = false;\n-\n-Cypress.on('fail', (e) => {\n-  failed = true;\n-  throw e;\n-});\n-\n-describe('', () => {\n-  beforeEach(() => {\n-    if (failed) Cypress.runner.stop();\n-  });\n-\n-  describe('Page with no todos', () => {\n-    it('should send 1 todos request', () => {\n-      const spy = cy.stub()\n-        .callsFake(req => req.reply({ body: [] }))\n-        .as('loadCallback')\n-\n-      page.mockLoad(spy).as('loadRequest');\n-      page.visit();\n-\n-      cy.wait('@loadRequest');\n-      cy.wait(500);\n-\n-      cy.get('@loadCallback').should('have.callCount', 1);\n-    });\n-\n-    describe('', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should have NewTodoField', () => {\n-        page.newTodoField().should('exist');\n-      });\n-\n-      it('should not have Todos', () => {\n-        todos.assertCount(0);\n-      });\n-\n-      it('should not have Footer', () => {\n-        filter.assertHidden();\n-        page.clearCompletedButton().should('not.exist');\n-        page.todosCounter().should('not.exist');\n-      });\n-\n-      it('should not show error message', () => {\n-        errorMessage.assertHidden();\n-      });\n-    });\n-\n-    describe('on loading error', () => {\n-      beforeEach(() => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should show error', () => {\n-        errorMessage.assertVisible();\n-      });\n-\n-      it('should show correct message', () => {\n-        errorMessage.assertText('Unable to load todos');\n-      });\n-\n-      it('should hide error after 3 seconds', () => {\n-        // just in case\n-        cy.wait(50);\n-\n-        cy.clock();\n-        cy.tick(2500);\n-        errorMessage.assertVisible();\n-\n-        cy.tick(500);\n-        errorMessage.assertHidden();\n-      });\n-\n-      it('should hide error on close button click', () => {\n-        errorMessage.closeButton().click();\n-        errorMessage.assertHidden();\n-      });\n-    });\n-  });\n-\n-  describe('Page with mixed todos', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n-\n-    it('should have NewTodoField', () => {\n-      page.newTodoField().should('exist');\n-    });\n-\n-    it('should have all loaded todos', () => {\n-      todos.assertCount(5);\n-    });\n-\n-    it('should have delete buttons for every todo', () => {\n-      todos.deleteButton(0).should('exist');\n-    });\n-\n-    it('should not have loaders', () => {\n-      todos.assertNotLoading(0);\n-      todos.assertNotLoading(1);\n-      todos.assertNotLoading(2);\n-      todos.assertNotLoading(3);\n-      todos.assertNotLoading(4);\n-    })\n-\n-    it('should have correct todo titles', () => {\n-      todos.assertTitle(0, 'HTML');\n-      todos.assertTitle(1, 'CSS');\n-      todos.assertTitle(2, 'JS');\n-      todos.assertTitle(3, 'TypeScript');\n-      todos.assertTitle(4, 'React');\n-    });\n-\n-    it('should higlight all completed todos', () => {\n-      todos.assertCompleted(0);\n-      todos.assertCompleted(1);\n-      todos.assertCompleted(2);\n-    });\n-\n-    it('should not higlight not completed todos', () => {\n-      todos.assertNotCompleted(3);\n-      todos.assertNotCompleted(4);\n-    });\n-\n-    it('should have correct completed statuses', () => {\n-      todos.statusToggler(0).should('be.checked');\n-      todos.statusToggler(1).should('be.checked');\n-      todos.statusToggler(2).should('be.checked');\n-      todos.statusToggler(3).should('not.be.checked');\n-      todos.statusToggler(4).should('not.be.checked');\n-    });\n-\n-    it('should have Filter', () => {\n-      filter.assertVisible();\n-    });\n-\n-    it('should have todosCounter with a number of not completed todos', () => {\n-      page.todosCounter().should('have.text', '2 items left');\n-    });\n-\n-    it('should have clearCompletedButton', () => {\n-      page.clearCompletedButton().should('exist');\n-    });\n-\n-    it('should have Filter', () => {\n-      filter.assertVisible();\n-    });\n-\n-    it('should not show error message', () => {\n-      errorMessage.assertHidden();\n-    });\n-  });\n-\n-  describe('Filtering', () => {\n-    describe('with mixed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should have only filterLinkAll active', () => {\n-        filter.assertSelected('all');\n-        filter.assertNotSelected('active');\n-        filter.assertNotSelected('completed');\n-      });\n-\n-      it('should allow to select the active filter', () => {\n-        filter.link('active').click();\n-\n-        filter.assertNotSelected('all');\n-        filter.assertSelected('active');\n-        filter.assertNotSelected('completed');\n-      });\n-\n-      it('should show only active todos when active filter is selected', () => {\n-        filter.link('active').click();\n-\n-        todos.assertCount(2);\n-        todos.assertTitle(0, 'TypeScript');\n-        todos.assertTitle(1, 'React');\n-      });\n-\n-      it('should keep footer when active todos are shown', () => {\n-        filter.link('active').click();\n-\n-        page.todosCounter().should('have.text', '2 items left');\n-        filter.assertVisible();\n-        page.clearCompletedButton().should('exist');\n-      });\n-\n-      it('should allow to select the completed filter', () => {\n-        filter.link('completed').click();\n-\n-        filter.assertNotSelected('all');\n-        filter.assertNotSelected('active');\n-        filter.assertSelected('completed');\n-      });\n-\n-      it('should show only completed todos when completed filter is selected', () => {\n-        filter.link('completed').click();\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-        todos.assertTitle(1, 'CSS');\n-        todos.assertTitle(2, 'JS');\n-      });\n-\n-      it('should keep footer when completed todos are shown', () => {\n-        filter.link('completed').click();\n-\n-        page.todosCounter().should('have.text', '2 items left');\n-        filter.assertVisible();\n-        page.clearCompletedButton().should('exist');\n-      });\n-\n-      it('should allow to reset filter', () => {\n-        filter.link('completed').click();\n-        filter.link('all').click();\n-\n-        todos.assertCount(5);\n-        filter.assertSelected('all');\n-        filter.assertNotSelected('active');\n-        filter.assertNotSelected('completed');\n-      });\n-    });\n-\n-    describe('with active todos only', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should hide todos on completed selection', () => {\n-        filter.link('completed').click();\n-\n-        todos.assertCount(0);\n-      });\n-\n-      it('should keep footer on completed selection', () => {\n-        filter.link('completed').click();\n-        filter.assertVisible();\n-      });\n-\n-      it('should keep todos counter on completed selection', () => {\n-        filter.link('completed').click();\n-        page.todosCounter().should('have.text', '5 items left');\n-      });\n-    });\n-\n-    describe('with completed todos only', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-    });\n-  });\n-\n-  describe('Adding a todo', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n-\n-    it('should focus text field by default', () => {\n-      page.newTodoField().should('be.focused');\n-    });\n-\n-    describe('if title is empty', () => {\n-      beforeEach(() => {\n-        page.mockCreate();\n-        page.newTodoField().type('{enter}');\n-      });\n-\n-      it('should not send a request', () => {\n-        cy.get('@createCallback').should('not.be.called');\n-      });\n-\n-      it('should keep text field focused', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n-\n-      it('should display an error message', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Title should not be empty');\n-      });\n-\n-      it('should hide an error message after 3 seconds', () => {\n-        // just in case\n-        cy.wait(50);\n-\n-        cy.clock();\n-        cy.tick(3000);\n-        errorMessage.assertHidden();\n-      });\n-    });\n-\n-    describe('if title title has only whitespaces', () => {\n-      beforeEach(() => {\n-        page.mockCreate();\n-        page.newTodoField().type('     {enter}');\n-      });\n-\n-      it('should not send a request', () => {\n-        cy.get('@createCallback').should('not.be.called');\n-      });\n-\n-      it('should keep text field focused', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n-\n-      it('should display an error message', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Title should not be empty');\n-      });\n-\n-      it('should hide an error message after 3 seconds', () => {\n-        // just in case\n-        cy.wait(50);\n-\n-        cy.clock();\n-        cy.tick(3000);\n-        errorMessage.assertHidden();\n-      });\n-    });\n-\n-    describe('after form submition before response is received', () => {\n-      beforeEach(() => {\n-        page.mockCreate();\n-        page.pauseTimers();\n-        page.newTodoField().type('Test Todo{enter}');\n-      });\n-\n-      it('should send a create request', () => {\n-        cy.tick(1000);\n-        cy.get('@createCallback').should('have.callCount', 1);\n-      });\n-\n-      it('should disable the input', () => {\n-        page.newTodoField().should('be.disabled');\n-      });\n-\n-      it('should keep entered text', () => {\n-        page.newTodoField().should('have.value', 'Test Todo');\n-      });\n-\n-      it('should create and show a temp TodoItem with Loader', () => {\n-        todos.assertCount(6);\n-        todos.assertLoading(5);\n-      });\n-\n-      it('should show a temp TodoItem with correct title', () => {\n-        todos.assertTitle(5, 'Test Todo');\n-      });\n-\n-      it('should show a not completed temp TodoItem', () => {\n-        todos.assertNotCompleted(5);\n-      });\n-\n-      it('should not show loaders for existing todos', () => {\n-        todos.assertNotLoading(0);\n-        todos.assertNotLoading(1);\n-        todos.assertNotLoading(2);\n-        todos.assertNotLoading(3);\n-        todos.assertNotLoading(4);\n-      });\n-\n-      it('should not update active counter', () => {\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-    });\n-\n-    describe('on success response', () => {\n-      describe('', () => {\n-        beforeEach(() => {\n-          page.mockCreate().as('createRequest');\n-          page.newTodoField().type('Test Todo{enter}');\n-\n-          cy.wait('@createRequest');\n-        });\n-\n-        // this test may be flaky\n-        it.skip('should replace loader with a created todo', () => {\n-          page.flushJSTimers();\n-          todos.assertCount(6);\n-          todos.assertNotLoading(5);\n-        });\n-\n-        it('should add a todo with a correct title', () => {\n-          todos.assertTitle(5, 'Test Todo');\n-        });\n-\n-        it('should add a not completed todo', () => {\n-          todos.assertNotCompleted(5);\n-        });\n-\n-        it('should update active counter', () => {\n-          page.todosCounter().should('have.text', '3 items left');\n-        });\n-\n-        it('should enable the text field', () => {\n-          page.newTodoField().should('not.be.disabled');\n-        });\n-\n-        it('should not show error message', () => {\n-          errorMessage.assertHidden();\n-        });\n-\n-        it('should clear text field', () => {\n-          page.newTodoField().should('have.value', '');\n-        });\n-\n-        it('should focus text field', () => {\n-          page.newTodoField().should('be.focused');\n-        });\n-\n-        it('should allow to add one more todo', () => {\n-          page.mockCreate().as('createRequest2');\n-\n-          page.newTodoField().type('Hello world{enter}');\n-          cy.wait('@createRequest2');\n-          page.flushJSTimers();\n-\n-          todos.assertCount(7);\n-          // todos.assertNotLoading(6);\n-          todos.assertNotCompleted(6);\n-          todos.assertTitle(6, 'Hello world');\n-          page.todosCounter().should('have.text', '4 items left');\n-        });\n-      });\n-\n-      it('should add trimmed title', () => {\n-        page.mockCreate().as('createRequest');\n-\n-        page.newTodoField().type('  Other Title    {enter}');\n-        cy.wait('@createRequest');\n-\n-        // just in case\n-        page.flushJSTimers();\n-\n-        todos.assertTitle(5, 'Other Title');\n-      });\n-\n-      it('should keep current filter', () => {\n-        page.mockCreate().as('createRequest');\n-\n-        filter.link('active').click();\n-        page.newTodoField().type('Test Todo{enter}');\n-        cy.wait('@createRequest');\n-\n-        filter.assertSelected('active');\n-      });\n-    });\n-\n-    describe('on request fail', () => {\n-      beforeEach(() => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-          .as('createRequest');\n-\n-        page.newTodoField().type('Test Todo{enter}');\n-\n-        cy.wait('@createRequest');\n-      });\n-\n-      it('should show an error message', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Unable to add a todo');\n-      });\n-\n-      it('should hide an error message in 3 seconds', () => {\n-        cy.clock();\n-        cy.tick(2500);\n-\n-        errorMessage.assertVisible();\n-\n-        cy.tick(500);\n-        errorMessage.assertHidden();\n-      });\n-\n-      it('should remove a temp TodoItem on request fail', () => {\n-        todos.assertCount(5);\n-        todos.assertTitle(4, 'React');\n-      });\n-\n-      it('should enable the text field on request fail', () => {\n-        page.newTodoField().should('not.be.disabled');\n-      });\n-\n-      it('should keep the entered text on request fail', () => {\n-        page.newTodoField().should('have.value', 'Test Todo');\n-      });\n-\n-      it('should focus text field', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n-\n-      it('should not update active counter', () => {\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-\n-      it('should immediately hide an error message on new request', () => {\n-        page.newTodoField().type(`{enter}`);\n-        errorMessage.assertHidden();\n-      });\n-\n-      it('should show an error message again on a next fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-          .as('createRequest2');\n-\n-        page.newTodoField().type(`{enter}`);\n-        cy.wait('@createRequest2');\n-\n-        errorMessage.assertVisible();\n-      });\n-\n-      it('should keep an error message for 3s after the last fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-          .as('createRequest2');\n-\n-        cy.clock();\n-\n-        cy.tick(2000);\n-        page.newTodoField().type(`{enter}`);\n-        cy.tick(500);\n-        cy.wait('@createRequest2');\n-        cy.tick(2000);\n-\n-        errorMessage.assertVisible();\n-      });\n-\n-      it('should allow to add a todo', () => {\n-        page.mockCreate().as('createRequest2');\n-        page.newTodoField().type('{enter}');\n-\n-        cy.wait('@createRequest2');\n-        page.flushJSTimers();\n-\n-        todos.assertCount(6);\n-        // todos.assertNotLoading(5);\n-        todos.assertNotCompleted(5);\n-        todos.assertTitle(5, 'Test Todo');\n-\n-        page.todosCounter().should('have.text', '3 items left');\n-      });\n-    });\n-  });\n-\n-  describe('Adding a first todo', () => {\n-    beforeEach(() => {\n-      page.mockLoad({ body: [] }).as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-\n-      page.mockCreate().as('createRequest');\n-      page.newTodoField().type('First todo{enter}');\n-\n-      cy.wait('@createRequest');\n-    });\n-\n-    it('should show a new todos', () => {\n-      todos.assertCount(1);\n-      todos.assertTitle(0, 'First todo');\n-      todos.assertNotCompleted(0);\n-    });\n-\n-    it('should show Filter', () => {\n-      filter.assertVisible();\n-    });\n-\n-    it('should show todosCounter', () => {\n-      page.todosCounter().should('contain.text', '1 item');\n-    });\n-  });\n-\n-  describe('Individual Todo Deletion', () => {\n-    describe('Default behavior', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n-        page.mockDelete(257334);\n-        page.pauseTimers();\n-        todos.deleteButton(0).click();\n-\n-        todos.assertLoading(0);\n-      });\n-\n-      it('should not delete a todo before successful response', () => {\n-        page.mockDelete(257334);\n-        page.pauseTimers();\n-        todos.deleteButton(0).click();\n-\n-        todos.assertCount(5);\n-      });\n-\n-      it('should remove the todo from the list on a successful API response', () => {\n-        page.mockDelete(257334).as('deleteRequest');\n-\n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n-\n-        todos.assertCount(4);\n-        todos.assertTitle(0, 'CSS');\n-      });\n-\n-      it('should focus text field after todo deletion', () => {\n-        page.mockDelete(257334).as('deleteRequest');\n-\n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n-\n-        page.newTodoField().should('be.focused');\n-      });\n-\n-      it('should not remove the todo from the list on an API error', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n-\n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n-\n-        todos.assertCount(5);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-\n-      it('should show an error message on an API error', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n-\n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n-\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Unable to delete a todo');\n-      });\n-\n-      it('should adjust the active todo count correctly after successful deletion', () => {\n-        page.mockDelete(257338).as('deleteRequest');\n-        todos.deleteButton(4).click();\n-        cy.wait('@deleteRequest');\n-\n-        page.todosCounter().should('contain.text', '1 item');\n-      });\n-\n-      it('should not adjust the active todo count after failed deletion', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n-          .as('deleteRequest');\n-\n-        todos.deleteButton(4).click();\n-        cy.wait('@deleteRequest');\n-\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-    });\n-\n-    describe('Last todo deletion', () => {\n-      beforeEach(() => {\n-        const todo = {\n-          \"id\": 257334,\n-          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-          \"userId\": 1,\n-          \"title\": \"HTML\",\n-          \"completed\": false\n-        };\n-\n-        page.mockLoad({ body: [todo] }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-\n-        page.mockDelete(257334);\n-        todos.deleteButton(0).click();\n-      });\n-\n-      it('should hide todos', () => {\n-        todos.assertCount(0);\n-      });\n-\n-      it('should hide footer', () => {\n-        filter.assertHidden();\n-        page.clearCompletedButton().should('not.exist');\n-        page.todosCounter().should('not.exist');\n-      });\n-\n-      it('should focus text field after todo deletion', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n-    });\n-  });\n-\n-  describe('Group Todo Deletion', () => {\n-    describe('with no completed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should not have active ClearCompleted button', () => {\n-        page.clearCompletedButton().should('be.disabled');\n-      });\n-    });\n-\n-    describe('with some completed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should have ClearCompleted button enabled', () => {\n-        page.clearCompletedButton().should('not.be.disabled');\n-      });\n-\n-      it('should send individual deletion request for each completed todo', () => {\n-        page.mockDelete(257334).as('deleteRequest1');\n-        page.mockDelete(257335).as('deleteRequest2');\n-        page.mockDelete(257336).as('deleteRequest3');\n-\n-        page.clearCompletedButton().click();\n-\n-        cy.wait('@deleteRequest1');\n-        cy.wait('@deleteRequest2');\n-        cy.wait('@deleteRequest3');\n-      });\n-\n-      describe('on success', () => {\n-        beforeEach(() => {\n-          page.mockDelete(257334).as('deleteRequest1');\n-          page.mockDelete(257335).as('deleteRequest2');\n-          page.mockDelete(257336).as('deleteRequest3');\n-\n-          page.clearCompletedButton().click();\n-\n-          cy.wait('@deleteRequest1');\n-          cy.wait('@deleteRequest2');\n-          cy.wait('@deleteRequest3');\n-        });\n-\n-        it('should remove all completed todos from the list', () => {\n-          todos.assertCount(2);\n-          todos.assertTitle(0, 'TypeScript');\n-          todos.assertTitle(1, 'React');\n-        });\n-\n-        it('should disable ClearCompleted button', () => {\n-          page.clearCompletedButton().should('be.disabled');\n-        });\n-\n-        it('should focus the text field', () => {\n-          page.newTodoField().should('be.focused');\n-        });\n-      });\n-\n-      describe('on a single fail', () => {\n-        beforeEach(() => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334).as('deleteRequest1');\n-          page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n-          page.mockDelete(257336).as('deleteRequest3');\n-\n-          page.clearCompletedButton().click();\n-\n-          cy.wait('@deleteRequest1');\n-          cy.wait('@deleteRequest2');\n-          cy.wait('@deleteRequest3');\n-        });\n-\n-        it('should show an error message if any of the group deletions fails', () => {\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to delete a todo');\n-        });\n-\n-        it('should remove todos with success responses and keep todos with errors', () => {\n-          todos.assertCount(3);\n-          todos.assertTitle(0, 'CSS');\n-          todos.assertTitle(1, 'TypeScript');\n-        });\n-\n-        it('should not disable ClearCompleted button', () => {\n-          page.clearCompletedButton().should('not.be.disabled');\n-        });\n-      });\n-    });\n-\n-    describe('with all todos completed', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-\n-        page.mockDelete(257334).as('deleteRequest1');\n-        page.mockDelete(257335).as('deleteRequest2');\n-        page.mockDelete(257336).as('deleteRequest3');\n-        page.mockDelete(257337).as('deleteRequest4');\n-        page.mockDelete(257338).as('deleteRequest5');\n-\n-        page.clearCompletedButton().click();\n-\n-        cy.wait('@deleteRequest1');\n-        cy.wait('@deleteRequest2');\n-        cy.wait('@deleteRequest3');\n-        cy.wait('@deleteRequest4');\n-        cy.wait('@deleteRequest5');\n-      });\n-\n-      it('should hide todos after clearing all completed todos', () => {\n-        todos.assertCount(0);\n-      });\n-\n-      it('should hide footer after clearing all completed todos', () => {\n-        filter.assertHidden();\n-        page.clearCompletedButton().should('not.exist');\n-        page.todosCounter().should('not.exist');\n-      });\n-    });\n-  });\n-\n-  describe('Todo Toggling', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n-\n-    describe('before receving response', () => {\n-      beforeEach(() => {\n-        page.mockUpdate(257334).as('updateRequest');\n-      });\n-\n-      it('should send an update request', () => {\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-      });\n-\n-      it('should show loader after click', () => {\n-        page.pauseTimers();\n-        todos.statusToggler(0).click();\n-\n-        todos.assertLoading(0);\n-      });\n-\n-      it('should not show error message after click', () => {\n-        page.pauseTimers();\n-        todos.statusToggler(0).click();\n-\n-        errorMessage.assertHidden();\n-      });\n-\n-      it('should not hide a todo if filtered', () => {\n-        filter.link('completed').click();\n-        page.pauseTimers();\n-        cy.tick(1000); // flush JS animation\n-        todos.statusToggler(0).click();\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-    });\n-\n-    describe('on success', () => {\n-      beforeEach(() => {\n-        page.mockUpdate(257334).as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-      });\n-\n-      it('should toggle a todo', () => {\n-        todos.assertNotCompleted(0);\n-        todos.statusToggler(0).should('not.be.checked');\n-      });\n-\n-      it('should cancel loading', () => {\n-        page.flushJSTimers();\n-        todos.assertNotLoading(0);\n-      });\n-\n-      it('should update the counter', () => {\n-        page.todosCounter().should('have.text', '3 items left');\n-      });\n-\n-      it('should not show an error message', () => {\n-        errorMessage.assertHidden();\n-      });\n-    });\n-\n-    describe('on fail', () => {\n-      beforeEach(() => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-          .as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-      });\n-\n-      it('should show an error', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Unable to update a todo');\n-      });\n-\n-      it('should not toggle a todo', () => {\n-        todos.assertCompleted(0);\n-        todos.statusToggler(0).should('be.checked');\n-      });\n-\n-      it('should cancel loading', () => {\n-        page.flushJSTimers();\n-        todos.assertNotLoading(0);\n-      });\n-\n-      it('should not update the counter', () => {\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-\n-      it('should allow to toggle again', () => {\n-        page.mockUpdate(257334).as('updateRequest2');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest2');\n-\n-        todos.assertNotCompleted(0);\n-      });\n-    });\n-\n-    describe('if filtered', () => {\n-      beforeEach(() => {\n-        filter.link('completed').click();\n-      });\n-\n-      it('should hide a todo on success', () => {\n-        page.mockUpdate(257334).as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-\n-        todos.assertCount(2);\n-        todos.assertTitle(0, 'CSS');\n-      });\n-\n-      it('should show a todo on success when selected an oposite filter', () => {\n-        page.mockUpdate(257334).as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        filter.link('active').click();\n-        cy.wait('@updateRequest');\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-\n-      it('should not hide a todo on fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-          .as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-    });\n-  });\n-\n-\n-\n-\n-\n-\n-\n-  describe('Toggle All Button', () => {\n-    describe('if there are no todos', () => {\n-      it('should not be visible while loading todos', () => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n-\n-        page.pauseTimers();\n-        page.visit();\n-\n-        page.toggleAllButton().should('not.exist');\n-      });\n-\n-      it('should not be visible when loaded', () => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n-\n-        page.visit();\n-        cy.wait('@loadRequest');\n-\n-        page.toggleAllButton().should('not.exist');\n-      });\n-\n-      it('should appear after adding a todo', () => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n-        page.mockCreate().as('createRequest');\n-\n-        page.visit();\n-        cy.wait('@loadRequest');\n-\n-        page.newTodoField().type('First todo{enter}');\n-        cy.wait('@createRequest');\n-\n-        page.toggleAllButton().should('exist');\n-      });\n-\n-      it('should disappear after removing the last todo', () => {\n-        const todo = {\n-          \"id\": 257334,\n-          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-          \"userId\": 1,\n-          \"title\": \"HTML\",\n-          \"completed\": false\n-        };\n-\n-        page.mockLoad({ body: [todo] }).as('loadRequest');\n-        page.mockDelete(257334).as('deleteRequest');\n-\n-        page.visit();\n-        cy.wait('@loadRequest');\n-\n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n-\n-        page.toggleAllButton().should('not.exist');\n-      });\n-    });\n-\n-    describe('if all todos are completed', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should be visible', () => {\n-        page.toggleAllButton().should('exist');\n-      });\n-\n-      it('should stay visible after filtering out all the todos', () => {\n-        filter.link('active').click();\n-\n-        page.toggleAllButton().should('exist');\n-      });\n-\n-      it('should be active', () => {\n-        page.toggleAllButton().should('have.class', 'active');\n-      });\n-\n-      it('should become not active after toggling a todo', () => {\n-        page.mockUpdate(257335).as('updateRequest');\n-        todos.statusToggler(1).click();\n-        cy.wait('@updateRequest');\n-\n-        page.toggleAllButton().should('not.have.class', 'active');\n-      });\n-\n-      it('should stay active after a todo toggling fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n-        todos.statusToggler(1).click();\n-        cy.wait('@updateRequest');\n-\n-        page.toggleAllButton().should('have.class', 'active');\n-      });\n-\n-      describe('on click', () => {\n-        beforeEach(() => {\n-          page.mockUpdate(257334).as('updateRequest4');\n-          page.mockUpdate(257335).as('updateRequest5');\n-          page.mockUpdate(257336).as('updateRequest6');\n-          page.mockUpdate(257337).as('updateRequest7');\n-          page.mockUpdate(257338).as('updateRequest8');\n-\n-          page.toggleAllButton().click();\n-\n-          cy.wait('@updateRequest4');\n-          cy.wait('@updateRequest5');\n-          cy.wait('@updateRequest6');\n-          cy.wait('@updateRequest7');\n-          cy.wait('@updateRequest8');\n-        });\n-\n-        it('should send requests for all todos', () => {\n-          // if before each pass\n-        });\n-\n-        it('should make all todos active', () => {\n-          todos.assertNotCompleted(0);\n-          todos.assertNotCompleted(1);\n-          todos.assertNotCompleted(2);\n-          todos.assertNotCompleted(3);\n-          todos.assertNotCompleted(4);\n-        });\n-\n-        it('should become not active', () => {\n-          page.toggleAllButton().should('not.have.class', 'active');\n-        });\n-      });\n-    });\n-\n-    describe('if all todos are active', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should be visible', () => {\n-        page.toggleAllButton().should('exist');\n-      });\n-\n-      it('should not be active', () => {\n-        page.toggleAllButton().should('not.have.class', 'active');\n-      });\n-\n-      it('should not become active after toggling a todo', () => {\n-        page.mockUpdate(257335).as('updateRequest');\n-        todos.statusToggler(1).click();\n-        cy.wait('@updateRequest');\n-\n-        page.toggleAllButton().should('not.have.class', 'active');\n-      });\n-\n-      describe('on click', () => {\n-        beforeEach(() => {\n-          page.mockUpdate(257334).as('updateRequest4');\n-          page.mockUpdate(257335).as('updateRequest5');\n-          page.mockUpdate(257336).as('updateRequest6');\n-          page.mockUpdate(257337).as('updateRequest7');\n-          page.mockUpdate(257338).as('updateRequest8');\n-\n-          page.toggleAllButton().click();\n-\n-          cy.wait('@updateRequest4');\n-          cy.wait('@updateRequest5');\n-          cy.wait('@updateRequest6');\n-          cy.wait('@updateRequest7');\n-          cy.wait('@updateRequest8');\n-        });\n-\n-        it('should send requests for all todos', () => {\n-          // if before each pass\n-        });\n-\n-        it('should make all todos completed', () => {\n-          todos.assertCompleted(0);\n-          todos.assertCompleted(1);\n-          todos.assertCompleted(2);\n-          todos.assertCompleted(3);\n-          todos.assertCompleted(4);\n-        });\n-\n-        it('should become active', () => {\n-          page.toggleAllButton().should('have.class', 'active');\n-        });\n-      });\n-    });\n-\n-    describe('if there are some mixed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n-\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should be visible', () => {\n-        page.toggleAllButton().should('exist');\n-      });\n-\n-      it('should not be active', () => {\n-        page.toggleAllButton().should('not.have.class', 'active');\n-      });\n-\n-      it('should become active after completing all todos', () => {\n-        page.mockUpdate(257337).as('updateRequest1');\n-        page.mockUpdate(257338).as('updateRequest2');\n-\n-        todos.statusToggler(3).click();\n-        cy.wait('@updateRequest1');\n-        todos.statusToggler(4).click();\n-        cy.wait('@updateRequest2');\n-\n-        page.toggleAllButton().should('have.class', 'active');\n-      });\n-\n-      describe('on click', () => {\n-        beforeEach(() => {\n-          page.mockUpdate(257334, cy.stub().as('update4'));\n-          page.mockUpdate(257335, cy.stub().as('update5'));\n-          page.mockUpdate(257336, cy.stub().as('update6'));\n-          page.mockUpdate(257337).as('updateRequest7');\n-          page.mockUpdate(257338).as('updateRequest8');\n-\n-          page.toggleAllButton().click();\n-\n-          cy.wait('@updateRequest7');\n-          cy.wait('@updateRequest8');\n-        });\n-\n-        it('should send requests only for not completed todos', () => {\n-          cy.get('@update4').should('not.be.called');\n-          cy.get('@update5').should('not.be.called');\n-          cy.get('@update6').should('not.be.called');\n-        });\n-\n-        it('should make all todos completed', () => {\n-          todos.assertCompleted(0);\n-          todos.assertCompleted(1);\n-          todos.assertCompleted(2);\n-          todos.assertCompleted(3);\n-          todos.assertCompleted(4);\n-        });\n-\n-        it('should become active', () => {\n-          page.toggleAllButton().should('have.class', 'active');\n-        });\n-      });\n-    });\n-  });\n-\n-  describe('Renaming', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n-\n-    it('should not show forms by default', () => {\n-      todos.titleField(0).should('not.exist');\n-      todos.titleField(1).should('not.exist');\n-      todos.titleField(2).should('not.exist');\n-      todos.titleField(3).should('not.exist');\n-      todos.titleField(4).should('not.exist');\n-    });\n-\n-    describe('Edit Form', () => {\n-      describe('by default', () => {\n-        // it('should be opened on dblclick', () => {\n-        //   todos.title(0).trigger('dblclick');\n-\n-        //   todos.titleField(0).should('exist');\n-        // });\n-\n-        // it('should have current value', () => {\n-        //   todos.title(0).trigger('dblclick');\n-\n-        //   todos.titleField(0).should('have.value', 'HTML');\n-        // });\n-\n-        // it('should be focused', () => {\n-        //   todos.title(0).trigger('dblclick');\n-\n-        //   todos.titleField(0).should('be.focused');\n-        // });\n-\n-        it('should hide a title', () => {\n-          todos.title(0).trigger('dblclick');\n-\n-          todos.title(0).should('not.exist');\n-        });\n-\n-        // it('should hide DeleteButton', () => {\n-        //   todos.title(0).trigger('dblclick');\n-\n-        //   todos.deleteButton(0).should('not.exist');\n-        // });\n-\n-        it('should keep StatusToggler', () => {\n-          todos.title(0).trigger('dblclick');\n-\n-          todos.statusToggler(0).should('exist');\n-        });\n-\n-        // it('should not open forms for other todos', () => {\n-        //   todos.title(0).trigger('dblclick');\n-\n-        //   todos.titleField(1).should('not.exist');\n-        //   todos.titleField(2).should('not.exist');\n-        //   todos.titleField(3).should('not.exist');\n-        //   todos.titleField(4).should('not.exist');\n-        // });\n-\n         it('should not send a request on change', () => {\n           const spy = cy.stub()\n             .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n             .as('renameCallback');\n"
                },
                {
                    "date": 1715603038544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1118,261 +1118,261 @@\n \n \n \n \n-  describe('Toggle All Button', () => {\n-    describe('if there are no todos', () => {\n-      it('should not be visible while loading todos', () => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n+  // describe('Toggle All Button', () => {\n+  //   describe('if there are no todos', () => {\n+  //     it('should not be visible while loading todos', () => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n \n-        page.pauseTimers();\n-        page.visit();\n+  //       page.pauseTimers();\n+  //       page.visit();\n \n-        page.toggleAllButton().should('not.exist');\n-      });\n+  //       page.toggleAllButton().should('not.exist');\n+  //     });\n \n-      it('should not be visible when loaded', () => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n+  //     it('should not be visible when loaded', () => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n \n-        page.visit();\n-        cy.wait('@loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n \n-        page.toggleAllButton().should('not.exist');\n-      });\n+  //       page.toggleAllButton().should('not.exist');\n+  //     });\n \n-      it('should appear after adding a todo', () => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n-        page.mockCreate().as('createRequest');\n+  //     it('should appear after adding a todo', () => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n+  //       page.mockCreate().as('createRequest');\n \n-        page.visit();\n-        cy.wait('@loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n \n-        page.newTodoField().type('First todo{enter}');\n-        cy.wait('@createRequest');\n+  //       page.newTodoField().type('First todo{enter}');\n+  //       cy.wait('@createRequest');\n \n-        page.toggleAllButton().should('exist');\n-      });\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n \n-      it('should disappear after removing the last todo', () => {\n-        const todo = {\n-          \"id\": 257334,\n-          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-          \"userId\": 1,\n-          \"title\": \"HTML\",\n-          \"completed\": false\n-        };\n+  //     it('should disappear after removing the last todo', () => {\n+  //       const todo = {\n+  //         \"id\": 257334,\n+  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+  //         \"userId\": 1,\n+  //         \"title\": \"HTML\",\n+  //         \"completed\": false\n+  //       };\n \n-        page.mockLoad({ body: [todo] }).as('loadRequest');\n-        page.mockDelete(257334).as('deleteRequest');\n+  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n+  //       page.mockDelete(257334).as('deleteRequest');\n \n-        page.visit();\n-        cy.wait('@loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n \n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n \n-        page.toggleAllButton().should('not.exist');\n-      });\n-    });\n+  //       page.toggleAllButton().should('not.exist');\n+  //     });\n+  //   });\n \n-    describe('if all todos are completed', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+  //   describe('if all todos are completed', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n \n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n \n-      it('should be visible', () => {\n-        page.toggleAllButton().should('exist');\n-      });\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n \n-      it('should stay visible after filtering out all the todos', () => {\n-        filter.link('active').click();\n+  //     it('should stay visible after filtering out all the todos', () => {\n+  //       filter.link('active').click();\n \n-        page.toggleAllButton().should('exist');\n-      });\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n \n-      it('should be active', () => {\n-        page.toggleAllButton().should('have.class', 'active');\n-      });\n+  //     it('should be active', () => {\n+  //       page.toggleAllButton().should('have.class', 'active');\n+  //     });\n \n-      it('should become not active after toggling a todo', () => {\n-        page.mockUpdate(257335).as('updateRequest');\n-        todos.statusToggler(1).click();\n-        cy.wait('@updateRequest');\n+  //     it('should become not active after toggling a todo', () => {\n+  //       page.mockUpdate(257335).as('updateRequest');\n+  //       todos.statusToggler(1).click();\n+  //       cy.wait('@updateRequest');\n \n-        page.toggleAllButton().should('not.have.class', 'active');\n-      });\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n \n-      it('should stay active after a todo toggling fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n+  //     it('should stay active after a todo toggling fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n \n-        page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n-        todos.statusToggler(1).click();\n-        cy.wait('@updateRequest');\n+  //       page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n+  //       todos.statusToggler(1).click();\n+  //       cy.wait('@updateRequest');\n \n-        page.toggleAllButton().should('have.class', 'active');\n-      });\n+  //       page.toggleAllButton().should('have.class', 'active');\n+  //     });\n \n-      describe('on click', () => {\n-        beforeEach(() => {\n-          page.mockUpdate(257334).as('updateRequest4');\n-          page.mockUpdate(257335).as('updateRequest5');\n-          page.mockUpdate(257336).as('updateRequest6');\n-          page.mockUpdate(257337).as('updateRequest7');\n-          page.mockUpdate(257338).as('updateRequest8');\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334).as('updateRequest4');\n+  //         page.mockUpdate(257335).as('updateRequest5');\n+  //         page.mockUpdate(257336).as('updateRequest6');\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n \n-          page.toggleAllButton().click();\n+  //         page.toggleAllButton().click();\n \n-          cy.wait('@updateRequest4');\n-          cy.wait('@updateRequest5');\n-          cy.wait('@updateRequest6');\n-          cy.wait('@updateRequest7');\n-          cy.wait('@updateRequest8');\n-        });\n+  //         cy.wait('@updateRequest4');\n+  //         cy.wait('@updateRequest5');\n+  //         cy.wait('@updateRequest6');\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n \n-        it('should send requests for all todos', () => {\n-          // if before each pass\n-        });\n+  //       it('should send requests for all todos', () => {\n+  //         // if before each pass\n+  //       });\n \n-        it('should make all todos active', () => {\n-          todos.assertNotCompleted(0);\n-          todos.assertNotCompleted(1);\n-          todos.assertNotCompleted(2);\n-          todos.assertNotCompleted(3);\n-          todos.assertNotCompleted(4);\n-        });\n+  //       it('should make all todos active', () => {\n+  //         todos.assertNotCompleted(0);\n+  //         todos.assertNotCompleted(1);\n+  //         todos.assertNotCompleted(2);\n+  //         todos.assertNotCompleted(3);\n+  //         todos.assertNotCompleted(4);\n+  //       });\n \n-        it('should become not active', () => {\n-          page.toggleAllButton().should('not.have.class', 'active');\n-        });\n-      });\n-    });\n+  //       it('should become not active', () => {\n+  //         page.toggleAllButton().should('not.have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n \n-    describe('if all todos are active', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+  //   describe('if all todos are active', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n \n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n \n-      it('should be visible', () => {\n-        page.toggleAllButton().should('exist');\n-      });\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n \n-      it('should not be active', () => {\n-        page.toggleAllButton().should('not.have.class', 'active');\n-      });\n+  //     it('should not be active', () => {\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n \n-      it('should not become active after toggling a todo', () => {\n-        page.mockUpdate(257335).as('updateRequest');\n-        todos.statusToggler(1).click();\n-        cy.wait('@updateRequest');\n+  //     it('should not become active after toggling a todo', () => {\n+  //       page.mockUpdate(257335).as('updateRequest');\n+  //       todos.statusToggler(1).click();\n+  //       cy.wait('@updateRequest');\n \n-        page.toggleAllButton().should('not.have.class', 'active');\n-      });\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n \n-      describe('on click', () => {\n-        beforeEach(() => {\n-          page.mockUpdate(257334).as('updateRequest4');\n-          page.mockUpdate(257335).as('updateRequest5');\n-          page.mockUpdate(257336).as('updateRequest6');\n-          page.mockUpdate(257337).as('updateRequest7');\n-          page.mockUpdate(257338).as('updateRequest8');\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334).as('updateRequest4');\n+  //         page.mockUpdate(257335).as('updateRequest5');\n+  //         page.mockUpdate(257336).as('updateRequest6');\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n \n-          page.toggleAllButton().click();\n+  //         page.toggleAllButton().click();\n \n-          cy.wait('@updateRequest4');\n-          cy.wait('@updateRequest5');\n-          cy.wait('@updateRequest6');\n-          cy.wait('@updateRequest7');\n-          cy.wait('@updateRequest8');\n-        });\n+  //         cy.wait('@updateRequest4');\n+  //         cy.wait('@updateRequest5');\n+  //         cy.wait('@updateRequest6');\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n \n-        it('should send requests for all todos', () => {\n-          // if before each pass\n-        });\n+  //       it('should send requests for all todos', () => {\n+  //         // if before each pass\n+  //       });\n \n-        it('should make all todos completed', () => {\n-          todos.assertCompleted(0);\n-          todos.assertCompleted(1);\n-          todos.assertCompleted(2);\n-          todos.assertCompleted(3);\n-          todos.assertCompleted(4);\n-        });\n+  //       it('should make all todos completed', () => {\n+  //         todos.assertCompleted(0);\n+  //         todos.assertCompleted(1);\n+  //         todos.assertCompleted(2);\n+  //         todos.assertCompleted(3);\n+  //         todos.assertCompleted(4);\n+  //       });\n \n-        it('should become active', () => {\n-          page.toggleAllButton().should('have.class', 'active');\n-        });\n-      });\n-    });\n+  //       it('should become active', () => {\n+  //         page.toggleAllButton().should('have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n \n-    describe('if there are some mixed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n+  //   describe('if there are some mixed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n \n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n \n-      it('should be visible', () => {\n-        page.toggleAllButton().should('exist');\n-      });\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n \n-      it('should not be active', () => {\n-        page.toggleAllButton().should('not.have.class', 'active');\n-      });\n+  //     it('should not be active', () => {\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n \n-      it('should become active after completing all todos', () => {\n-        page.mockUpdate(257337).as('updateRequest1');\n-        page.mockUpdate(257338).as('updateRequest2');\n+  //     it('should become active after completing all todos', () => {\n+  //       page.mockUpdate(257337).as('updateRequest1');\n+  //       page.mockUpdate(257338).as('updateRequest2');\n \n-        todos.statusToggler(3).click();\n-        cy.wait('@updateRequest1');\n-        todos.statusToggler(4).click();\n-        cy.wait('@updateRequest2');\n+  //       todos.statusToggler(3).click();\n+  //       cy.wait('@updateRequest1');\n+  //       todos.statusToggler(4).click();\n+  //       cy.wait('@updateRequest2');\n \n-        page.toggleAllButton().should('have.class', 'active');\n-      });\n+  //       page.toggleAllButton().should('have.class', 'active');\n+  //     });\n \n-      describe('on click', () => {\n-        beforeEach(() => {\n-          page.mockUpdate(257334, cy.stub().as('update4'));\n-          page.mockUpdate(257335, cy.stub().as('update5'));\n-          page.mockUpdate(257336, cy.stub().as('update6'));\n-          page.mockUpdate(257337).as('updateRequest7');\n-          page.mockUpdate(257338).as('updateRequest8');\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334, cy.stub().as('update4'));\n+  //         page.mockUpdate(257335, cy.stub().as('update5'));\n+  //         page.mockUpdate(257336, cy.stub().as('update6'));\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n \n-          page.toggleAllButton().click();\n+  //         page.toggleAllButton().click();\n \n-          cy.wait('@updateRequest7');\n-          cy.wait('@updateRequest8');\n-        });\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n \n-        it('should send requests only for not completed todos', () => {\n-          cy.get('@update4').should('not.be.called');\n-          cy.get('@update5').should('not.be.called');\n-          cy.get('@update6').should('not.be.called');\n-        });\n+  //       it('should send requests only for not completed todos', () => {\n+  //         cy.get('@update4').should('not.be.called');\n+  //         cy.get('@update5').should('not.be.called');\n+  //         cy.get('@update6').should('not.be.called');\n+  //       });\n \n-        it('should make all todos completed', () => {\n-          todos.assertCompleted(0);\n-          todos.assertCompleted(1);\n-          todos.assertCompleted(2);\n-          todos.assertCompleted(3);\n-          todos.assertCompleted(4);\n-        });\n+  //       it('should make all todos completed', () => {\n+  //         todos.assertCompleted(0);\n+  //         todos.assertCompleted(1);\n+  //         todos.assertCompleted(2);\n+  //         todos.assertCompleted(3);\n+  //         todos.assertCompleted(4);\n+  //       });\n \n-        it('should become active', () => {\n-          page.toggleAllButton().should('have.class', 'active');\n-        });\n-      });\n-    });\n-  });\n+  //       it('should become active', () => {\n+  //         page.toggleAllButton().should('have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n+  // });\n \n   describe('Renaming', () => {\n     beforeEach(() => {\n       page.mockLoad().as('loadRequest');\n"
                },
                {
                    "date": 1715603058491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1388,67 +1388,67 @@\n       todos.titleField(4).should('not.exist');\n     });\n \n     describe('Edit Form', () => {\n-      describe('by default', () => {\n-        it('should be opened on dblclick', () => {\n-          todos.title(0).trigger('dblclick');\n+      // describe('by default', () => {\n+      //   it('should be opened on dblclick', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.titleField(0).should('exist');\n-        });\n+      //     todos.titleField(0).should('exist');\n+      //   });\n \n-        it('should have current value', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should have current value', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.titleField(0).should('have.value', 'HTML');\n-        });\n+      //     todos.titleField(0).should('have.value', 'HTML');\n+      //   });\n \n-        it('should be focused', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should be focused', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.titleField(0).should('be.focused');\n-        });\n+      //     todos.titleField(0).should('be.focused');\n+      //   });\n \n-        it('should hide a title', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should hide a title', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.title(0).should('not.exist');\n-        });\n+      //     todos.title(0).should('not.exist');\n+      //   });\n \n-        it('should hide DeleteButton', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should hide DeleteButton', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.deleteButton(0).should('not.exist');\n-        });\n+      //     todos.deleteButton(0).should('not.exist');\n+      //   });\n \n-        it('should keep StatusToggler', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should keep StatusToggler', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.statusToggler(0).should('exist');\n-        });\n+      //     todos.statusToggler(0).should('exist');\n+      //   });\n \n-        it('should not open forms for other todos', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should not open forms for other todos', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.titleField(1).should('not.exist');\n-          todos.titleField(2).should('not.exist');\n-          todos.titleField(3).should('not.exist');\n-          todos.titleField(4).should('not.exist');\n-        });\n+      //     todos.titleField(1).should('not.exist');\n+      //     todos.titleField(2).should('not.exist');\n+      //     todos.titleField(3).should('not.exist');\n+      //     todos.titleField(4).should('not.exist');\n+      //   });\n \n-        it('should not send a request on change', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n+      //   it('should not send a request on change', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n \n-          page.mockUpdate(257334, spy);\n+      //     page.mockUpdate(257334, spy);\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123');\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123');\n \n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-      });\n+      //     cy.get('@renameCallback').should('not.be.called');\n+      //   });\n+      // });\n \n       describe('on Escape', () => {\n         it('should be closed', () => {\n           todos.title(0).trigger('dblclick');\n"
                },
                {
                    "date": 1715603175963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,85 +118,85 @@\n   beforeEach(() => {\n     if (failed) Cypress.runner.stop();\n   });\n \n-  describe('Page with no todos', () => {\n-    it('should send 1 todos request', () => {\n-      const spy = cy.stub()\n-        .callsFake(req => req.reply({ body: [] }))\n-        .as('loadCallback')\n+  // describe('Page with no todos', () => {\n+  //   it('should send 1 todos request', () => {\n+  //     const spy = cy.stub()\n+  //       .callsFake(req => req.reply({ body: [] }))\n+  //       .as('loadCallback')\n \n-      page.mockLoad(spy).as('loadRequest');\n-      page.visit();\n+  //     page.mockLoad(spy).as('loadRequest');\n+  //     page.visit();\n \n-      cy.wait('@loadRequest');\n-      cy.wait(500);\n+  //     cy.wait('@loadRequest');\n+  //     cy.wait(500);\n \n-      cy.get('@loadCallback').should('have.callCount', 1);\n-    });\n+  //     cy.get('@loadCallback').should('have.callCount', 1);\n+  //   });\n \n-    describe('', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n+  //   describe('', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n \n-      it('should have NewTodoField', () => {\n-        page.newTodoField().should('exist');\n-      });\n+  //     it('should have NewTodoField', () => {\n+  //       page.newTodoField().should('exist');\n+  //     });\n \n-      it('should not have Todos', () => {\n-        todos.assertCount(0);\n-      });\n+  //     it('should not have Todos', () => {\n+  //       todos.assertCount(0);\n+  //     });\n \n-      it('should not have Footer', () => {\n-        filter.assertHidden();\n-        page.clearCompletedButton().should('not.exist');\n-        page.todosCounter().should('not.exist');\n-      });\n+  //     it('should not have Footer', () => {\n+  //       filter.assertHidden();\n+  //       page.clearCompletedButton().should('not.exist');\n+  //       page.todosCounter().should('not.exist');\n+  //     });\n \n-      it('should not show error message', () => {\n-        errorMessage.assertHidden();\n-      });\n-    });\n+  //     it('should not show error message', () => {\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n \n-    describe('on loading error', () => {\n-      beforeEach(() => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n+  //   describe('on loading error', () => {\n+  //     beforeEach(() => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n \n-        page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n+  //       page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n \n-      it('should show error', () => {\n-        errorMessage.assertVisible();\n-      });\n+  //     it('should show error', () => {\n+  //       errorMessage.assertVisible();\n+  //     });\n \n-      it('should show correct message', () => {\n-        errorMessage.assertText('Unable to load todos');\n-      });\n+  //     it('should show correct message', () => {\n+  //       errorMessage.assertText('Unable to load todos');\n+  //     });\n \n-      it('should hide error after 3 seconds', () => {\n-        // just in case\n-        cy.wait(50);\n+  //     it('should hide error after 3 seconds', () => {\n+  //       // just in case\n+  //       cy.wait(50);\n \n-        cy.clock();\n-        cy.tick(2500);\n-        errorMessage.assertVisible();\n+  //       cy.clock();\n+  //       cy.tick(2500);\n+  //       errorMessage.assertVisible();\n \n-        cy.tick(500);\n-        errorMessage.assertHidden();\n-      });\n+  //       cy.tick(500);\n+  //       errorMessage.assertHidden();\n+  //     });\n \n-      it('should hide error on close button click', () => {\n-        errorMessage.closeButton().click();\n-        errorMessage.assertHidden();\n-      });\n-    });\n-  });\n+  //     it('should hide error on close button click', () => {\n+  //       errorMessage.closeButton().click();\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+  // });\n \n   describe('Page with mixed todos', () => {\n     beforeEach(() => {\n       page.mockLoad().as('loadRequest');\n"
                },
                {
                    "date": 1715603183976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,82 +196,82 @@\n   //     });\n   //   });\n   // });\n \n-  describe('Page with mixed todos', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n+  // describe('Page with mixed todos', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad().as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n+  //   });\n \n-    it('should have NewTodoField', () => {\n-      page.newTodoField().should('exist');\n-    });\n+  //   it('should have NewTodoField', () => {\n+  //     page.newTodoField().should('exist');\n+  //   });\n \n-    it('should have all loaded todos', () => {\n-      todos.assertCount(5);\n-    });\n+  //   it('should have all loaded todos', () => {\n+  //     todos.assertCount(5);\n+  //   });\n \n-    it('should have delete buttons for every todo', () => {\n-      todos.deleteButton(0).should('exist');\n-    });\n+  //   it('should have delete buttons for every todo', () => {\n+  //     todos.deleteButton(0).should('exist');\n+  //   });\n \n-    it('should not have loaders', () => {\n-      todos.assertNotLoading(0);\n-      todos.assertNotLoading(1);\n-      todos.assertNotLoading(2);\n-      todos.assertNotLoading(3);\n-      todos.assertNotLoading(4);\n-    })\n+  //   it('should not have loaders', () => {\n+  //     todos.assertNotLoading(0);\n+  //     todos.assertNotLoading(1);\n+  //     todos.assertNotLoading(2);\n+  //     todos.assertNotLoading(3);\n+  //     todos.assertNotLoading(4);\n+  //   })\n \n-    it('should have correct todo titles', () => {\n-      todos.assertTitle(0, 'HTML');\n-      todos.assertTitle(1, 'CSS');\n-      todos.assertTitle(2, 'JS');\n-      todos.assertTitle(3, 'TypeScript');\n-      todos.assertTitle(4, 'React');\n-    });\n+  //   it('should have correct todo titles', () => {\n+  //     todos.assertTitle(0, 'HTML');\n+  //     todos.assertTitle(1, 'CSS');\n+  //     todos.assertTitle(2, 'JS');\n+  //     todos.assertTitle(3, 'TypeScript');\n+  //     todos.assertTitle(4, 'React');\n+  //   });\n \n-    it('should higlight all completed todos', () => {\n-      todos.assertCompleted(0);\n-      todos.assertCompleted(1);\n-      todos.assertCompleted(2);\n-    });\n+  //   it('should higlight all completed todos', () => {\n+  //     todos.assertCompleted(0);\n+  //     todos.assertCompleted(1);\n+  //     todos.assertCompleted(2);\n+  //   });\n \n-    it('should not higlight not completed todos', () => {\n-      todos.assertNotCompleted(3);\n-      todos.assertNotCompleted(4);\n-    });\n+  //   it('should not higlight not completed todos', () => {\n+  //     todos.assertNotCompleted(3);\n+  //     todos.assertNotCompleted(4);\n+  //   });\n \n-    it('should have correct completed statuses', () => {\n-      todos.statusToggler(0).should('be.checked');\n-      todos.statusToggler(1).should('be.checked');\n-      todos.statusToggler(2).should('be.checked');\n-      todos.statusToggler(3).should('not.be.checked');\n-      todos.statusToggler(4).should('not.be.checked');\n-    });\n+  //   it('should have correct completed statuses', () => {\n+  //     todos.statusToggler(0).should('be.checked');\n+  //     todos.statusToggler(1).should('be.checked');\n+  //     todos.statusToggler(2).should('be.checked');\n+  //     todos.statusToggler(3).should('not.be.checked');\n+  //     todos.statusToggler(4).should('not.be.checked');\n+  //   });\n \n-    it('should have Filter', () => {\n-      filter.assertVisible();\n-    });\n+  //   it('should have Filter', () => {\n+  //     filter.assertVisible();\n+  //   });\n \n-    it('should have todosCounter with a number of not completed todos', () => {\n-      page.todosCounter().should('have.text', '2 items left');\n-    });\n+  //   it('should have todosCounter with a number of not completed todos', () => {\n+  //     page.todosCounter().should('have.text', '2 items left');\n+  //   });\n \n-    it('should have clearCompletedButton', () => {\n-      page.clearCompletedButton().should('exist');\n-    });\n+  //   it('should have clearCompletedButton', () => {\n+  //     page.clearCompletedButton().should('exist');\n+  //   });\n \n-    it('should have Filter', () => {\n-      filter.assertVisible();\n-    });\n+  //   it('should have Filter', () => {\n+  //     filter.assertVisible();\n+  //   });\n \n-    it('should not show error message', () => {\n-      errorMessage.assertHidden();\n-    });\n-  });\n+  //   it('should not show error message', () => {\n+  //     errorMessage.assertHidden();\n+  //   });\n+  // });\n \n   describe('Filtering', () => {\n     describe('with mixed todos', () => {\n       beforeEach(() => {\n"
                },
                {
                    "date": 1715603194767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -271,114 +271,114 @@\n   //     errorMessage.assertHidden();\n   //   });\n   // });\n \n-  describe('Filtering', () => {\n-    describe('with mixed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n+  // describe('Filtering', () => {\n+  //   describe('with mixed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n \n-      it('should have only filterLinkAll active', () => {\n-        filter.assertSelected('all');\n-        filter.assertNotSelected('active');\n-        filter.assertNotSelected('completed');\n-      });\n+  //     it('should have only filterLinkAll active', () => {\n+  //       filter.assertSelected('all');\n+  //       filter.assertNotSelected('active');\n+  //       filter.assertNotSelected('completed');\n+  //     });\n \n-      it('should allow to select the active filter', () => {\n-        filter.link('active').click();\n+  //     it('should allow to select the active filter', () => {\n+  //       filter.link('active').click();\n \n-        filter.assertNotSelected('all');\n-        filter.assertSelected('active');\n-        filter.assertNotSelected('completed');\n-      });\n+  //       filter.assertNotSelected('all');\n+  //       filter.assertSelected('active');\n+  //       filter.assertNotSelected('completed');\n+  //     });\n \n-      it('should show only active todos when active filter is selected', () => {\n-        filter.link('active').click();\n+  //     it('should show only active todos when active filter is selected', () => {\n+  //       filter.link('active').click();\n \n-        todos.assertCount(2);\n-        todos.assertTitle(0, 'TypeScript');\n-        todos.assertTitle(1, 'React');\n-      });\n+  //       todos.assertCount(2);\n+  //       todos.assertTitle(0, 'TypeScript');\n+  //       todos.assertTitle(1, 'React');\n+  //     });\n \n-      it('should keep footer when active todos are shown', () => {\n-        filter.link('active').click();\n+  //     it('should keep footer when active todos are shown', () => {\n+  //       filter.link('active').click();\n \n-        page.todosCounter().should('have.text', '2 items left');\n-        filter.assertVisible();\n-        page.clearCompletedButton().should('exist');\n-      });\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //       filter.assertVisible();\n+  //       page.clearCompletedButton().should('exist');\n+  //     });\n \n-      it('should allow to select the completed filter', () => {\n-        filter.link('completed').click();\n+  //     it('should allow to select the completed filter', () => {\n+  //       filter.link('completed').click();\n \n-        filter.assertNotSelected('all');\n-        filter.assertNotSelected('active');\n-        filter.assertSelected('completed');\n-      });\n+  //       filter.assertNotSelected('all');\n+  //       filter.assertNotSelected('active');\n+  //       filter.assertSelected('completed');\n+  //     });\n \n-      it('should show only completed todos when completed filter is selected', () => {\n-        filter.link('completed').click();\n+  //     it('should show only completed todos when completed filter is selected', () => {\n+  //       filter.link('completed').click();\n \n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-        todos.assertTitle(1, 'CSS');\n-        todos.assertTitle(2, 'JS');\n-      });\n+  //       todos.assertCount(3);\n+  //       todos.assertTitle(0, 'HTML');\n+  //       todos.assertTitle(1, 'CSS');\n+  //       todos.assertTitle(2, 'JS');\n+  //     });\n \n-      it('should keep footer when completed todos are shown', () => {\n-        filter.link('completed').click();\n+  //     it('should keep footer when completed todos are shown', () => {\n+  //       filter.link('completed').click();\n \n-        page.todosCounter().should('have.text', '2 items left');\n-        filter.assertVisible();\n-        page.clearCompletedButton().should('exist');\n-      });\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //       filter.assertVisible();\n+  //       page.clearCompletedButton().should('exist');\n+  //     });\n \n-      it('should allow to reset filter', () => {\n-        filter.link('completed').click();\n-        filter.link('all').click();\n+  //     it('should allow to reset filter', () => {\n+  //       filter.link('completed').click();\n+  //       filter.link('all').click();\n \n-        todos.assertCount(5);\n-        filter.assertSelected('all');\n-        filter.assertNotSelected('active');\n-        filter.assertNotSelected('completed');\n-      });\n-    });\n+  //       todos.assertCount(5);\n+  //       filter.assertSelected('all');\n+  //       filter.assertNotSelected('active');\n+  //       filter.assertNotSelected('completed');\n+  //     });\n+  //   });\n \n-    describe('with active todos only', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n+  //   describe('with active todos only', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n \n-      it('should hide todos on completed selection', () => {\n-        filter.link('completed').click();\n+  //     it('should hide todos on completed selection', () => {\n+  //       filter.link('completed').click();\n \n-        todos.assertCount(0);\n-      });\n+  //       todos.assertCount(0);\n+  //     });\n \n-      it('should keep footer on completed selection', () => {\n-        filter.link('completed').click();\n-        filter.assertVisible();\n-      });\n+  //     it('should keep footer on completed selection', () => {\n+  //       filter.link('completed').click();\n+  //       filter.assertVisible();\n+  //     });\n \n-      it('should keep todos counter on completed selection', () => {\n-        filter.link('completed').click();\n-        page.todosCounter().should('have.text', '5 items left');\n-      });\n-    });\n+  //     it('should keep todos counter on completed selection', () => {\n+  //       filter.link('completed').click();\n+  //       page.todosCounter().should('have.text', '5 items left');\n+  //     });\n+  //   });\n \n-    describe('with completed todos only', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-    });\n-  });\n+  //   describe('with completed todos only', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+  //   });\n+  // });\n \n   describe('Adding a todo', () => {\n     beforeEach(() => {\n       page.mockLoad().as('loadRequest');\n"
                },
                {
                    "date": 1715603203291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,459 +378,459 @@\n   //     });\n   //   });\n   // });\n \n-  describe('Adding a todo', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n+  // describe('Adding a todo', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad().as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n+  //   });\n \n-    it('should focus text field by default', () => {\n-      page.newTodoField().should('be.focused');\n-    });\n+  //   it('should focus text field by default', () => {\n+  //     page.newTodoField().should('be.focused');\n+  //   });\n \n-    describe('if title is empty', () => {\n-      beforeEach(() => {\n-        page.mockCreate();\n-        page.newTodoField().type('{enter}');\n-      });\n+  //   describe('if title is empty', () => {\n+  //     beforeEach(() => {\n+  //       page.mockCreate();\n+  //       page.newTodoField().type('{enter}');\n+  //     });\n \n-      it('should not send a request', () => {\n-        cy.get('@createCallback').should('not.be.called');\n-      });\n+  //     it('should not send a request', () => {\n+  //       cy.get('@createCallback').should('not.be.called');\n+  //     });\n \n-      it('should keep text field focused', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n+  //     it('should keep text field focused', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n \n-      it('should display an error message', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Title should not be empty');\n-      });\n+  //     it('should display an error message', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Title should not be empty');\n+  //     });\n \n-      it('should hide an error message after 3 seconds', () => {\n-        // just in case\n-        cy.wait(50);\n+  //     it('should hide an error message after 3 seconds', () => {\n+  //       // just in case\n+  //       cy.wait(50);\n \n-        cy.clock();\n-        cy.tick(3000);\n-        errorMessage.assertHidden();\n-      });\n-    });\n+  //       cy.clock();\n+  //       cy.tick(3000);\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n \n-    describe('if title title has only whitespaces', () => {\n-      beforeEach(() => {\n-        page.mockCreate();\n-        page.newTodoField().type('     {enter}');\n-      });\n+  //   describe('if title title has only whitespaces', () => {\n+  //     beforeEach(() => {\n+  //       page.mockCreate();\n+  //       page.newTodoField().type('     {enter}');\n+  //     });\n \n-      it('should not send a request', () => {\n-        cy.get('@createCallback').should('not.be.called');\n-      });\n+  //     it('should not send a request', () => {\n+  //       cy.get('@createCallback').should('not.be.called');\n+  //     });\n \n-      it('should keep text field focused', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n+  //     it('should keep text field focused', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n \n-      it('should display an error message', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Title should not be empty');\n-      });\n+  //     it('should display an error message', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Title should not be empty');\n+  //     });\n \n-      it('should hide an error message after 3 seconds', () => {\n-        // just in case\n-        cy.wait(50);\n+  //     it('should hide an error message after 3 seconds', () => {\n+  //       // just in case\n+  //       cy.wait(50);\n \n-        cy.clock();\n-        cy.tick(3000);\n-        errorMessage.assertHidden();\n-      });\n-    });\n+  //       cy.clock();\n+  //       cy.tick(3000);\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n \n-    describe('after form submition before response is received', () => {\n-      beforeEach(() => {\n-        page.mockCreate();\n-        page.pauseTimers();\n-        page.newTodoField().type('Test Todo{enter}');\n-      });\n+  //   describe('after form submition before response is received', () => {\n+  //     beforeEach(() => {\n+  //       page.mockCreate();\n+  //       page.pauseTimers();\n+  //       page.newTodoField().type('Test Todo{enter}');\n+  //     });\n \n-      it('should send a create request', () => {\n-        cy.tick(1000);\n-        cy.get('@createCallback').should('have.callCount', 1);\n-      });\n+  //     it('should send a create request', () => {\n+  //       cy.tick(1000);\n+  //       cy.get('@createCallback').should('have.callCount', 1);\n+  //     });\n \n-      it('should disable the input', () => {\n-        page.newTodoField().should('be.disabled');\n-      });\n+  //     it('should disable the input', () => {\n+  //       page.newTodoField().should('be.disabled');\n+  //     });\n \n-      it('should keep entered text', () => {\n-        page.newTodoField().should('have.value', 'Test Todo');\n-      });\n+  //     it('should keep entered text', () => {\n+  //       page.newTodoField().should('have.value', 'Test Todo');\n+  //     });\n \n-      it('should create and show a temp TodoItem with Loader', () => {\n-        todos.assertCount(6);\n-        todos.assertLoading(5);\n-      });\n+  //     it('should create and show a temp TodoItem with Loader', () => {\n+  //       todos.assertCount(6);\n+  //       todos.assertLoading(5);\n+  //     });\n \n-      it('should show a temp TodoItem with correct title', () => {\n-        todos.assertTitle(5, 'Test Todo');\n-      });\n+  //     it('should show a temp TodoItem with correct title', () => {\n+  //       todos.assertTitle(5, 'Test Todo');\n+  //     });\n \n-      it('should show a not completed temp TodoItem', () => {\n-        todos.assertNotCompleted(5);\n-      });\n+  //     it('should show a not completed temp TodoItem', () => {\n+  //       todos.assertNotCompleted(5);\n+  //     });\n \n-      it('should not show loaders for existing todos', () => {\n-        todos.assertNotLoading(0);\n-        todos.assertNotLoading(1);\n-        todos.assertNotLoading(2);\n-        todos.assertNotLoading(3);\n-        todos.assertNotLoading(4);\n-      });\n+  //     it('should not show loaders for existing todos', () => {\n+  //       todos.assertNotLoading(0);\n+  //       todos.assertNotLoading(1);\n+  //       todos.assertNotLoading(2);\n+  //       todos.assertNotLoading(3);\n+  //       todos.assertNotLoading(4);\n+  //     });\n \n-      it('should not update active counter', () => {\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-    });\n+  //     it('should not update active counter', () => {\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n+  //   });\n \n-    describe('on success response', () => {\n-      describe('', () => {\n-        beforeEach(() => {\n-          page.mockCreate().as('createRequest');\n-          page.newTodoField().type('Test Todo{enter}');\n+  //   describe('on success response', () => {\n+  //     describe('', () => {\n+  //       beforeEach(() => {\n+  //         page.mockCreate().as('createRequest');\n+  //         page.newTodoField().type('Test Todo{enter}');\n \n-          cy.wait('@createRequest');\n-        });\n+  //         cy.wait('@createRequest');\n+  //       });\n \n-        // this test may be flaky\n-        it.skip('should replace loader with a created todo', () => {\n-          page.flushJSTimers();\n-          todos.assertCount(6);\n-          todos.assertNotLoading(5);\n-        });\n+  //       // this test may be flaky\n+  //       it.skip('should replace loader with a created todo', () => {\n+  //         page.flushJSTimers();\n+  //         todos.assertCount(6);\n+  //         todos.assertNotLoading(5);\n+  //       });\n \n-        it('should add a todo with a correct title', () => {\n-          todos.assertTitle(5, 'Test Todo');\n-        });\n+  //       it('should add a todo with a correct title', () => {\n+  //         todos.assertTitle(5, 'Test Todo');\n+  //       });\n \n-        it('should add a not completed todo', () => {\n-          todos.assertNotCompleted(5);\n-        });\n+  //       it('should add a not completed todo', () => {\n+  //         todos.assertNotCompleted(5);\n+  //       });\n \n-        it('should update active counter', () => {\n-          page.todosCounter().should('have.text', '3 items left');\n-        });\n+  //       it('should update active counter', () => {\n+  //         page.todosCounter().should('have.text', '3 items left');\n+  //       });\n \n-        it('should enable the text field', () => {\n-          page.newTodoField().should('not.be.disabled');\n-        });\n+  //       it('should enable the text field', () => {\n+  //         page.newTodoField().should('not.be.disabled');\n+  //       });\n \n-        it('should not show error message', () => {\n-          errorMessage.assertHidden();\n-        });\n+  //       it('should not show error message', () => {\n+  //         errorMessage.assertHidden();\n+  //       });\n \n-        it('should clear text field', () => {\n-          page.newTodoField().should('have.value', '');\n-        });\n+  //       it('should clear text field', () => {\n+  //         page.newTodoField().should('have.value', '');\n+  //       });\n \n-        it('should focus text field', () => {\n-          page.newTodoField().should('be.focused');\n-        });\n+  //       it('should focus text field', () => {\n+  //         page.newTodoField().should('be.focused');\n+  //       });\n \n-        it('should allow to add one more todo', () => {\n-          page.mockCreate().as('createRequest2');\n+  //       it('should allow to add one more todo', () => {\n+  //         page.mockCreate().as('createRequest2');\n \n-          page.newTodoField().type('Hello world{enter}');\n-          cy.wait('@createRequest2');\n-          page.flushJSTimers();\n+  //         page.newTodoField().type('Hello world{enter}');\n+  //         cy.wait('@createRequest2');\n+  //         page.flushJSTimers();\n \n-          todos.assertCount(7);\n-          // todos.assertNotLoading(6);\n-          todos.assertNotCompleted(6);\n-          todos.assertTitle(6, 'Hello world');\n-          page.todosCounter().should('have.text', '4 items left');\n-        });\n-      });\n+  //         todos.assertCount(7);\n+  //         // todos.assertNotLoading(6);\n+  //         todos.assertNotCompleted(6);\n+  //         todos.assertTitle(6, 'Hello world');\n+  //         page.todosCounter().should('have.text', '4 items left');\n+  //       });\n+  //     });\n \n-      it('should add trimmed title', () => {\n-        page.mockCreate().as('createRequest');\n+  //     it('should add trimmed title', () => {\n+  //       page.mockCreate().as('createRequest');\n \n-        page.newTodoField().type('  Other Title    {enter}');\n-        cy.wait('@createRequest');\n+  //       page.newTodoField().type('  Other Title    {enter}');\n+  //       cy.wait('@createRequest');\n \n-        // just in case\n-        page.flushJSTimers();\n+  //       // just in case\n+  //       page.flushJSTimers();\n \n-        todos.assertTitle(5, 'Other Title');\n-      });\n+  //       todos.assertTitle(5, 'Other Title');\n+  //     });\n \n-      it('should keep current filter', () => {\n-        page.mockCreate().as('createRequest');\n+  //     it('should keep current filter', () => {\n+  //       page.mockCreate().as('createRequest');\n \n-        filter.link('active').click();\n-        page.newTodoField().type('Test Todo{enter}');\n-        cy.wait('@createRequest');\n+  //       filter.link('active').click();\n+  //       page.newTodoField().type('Test Todo{enter}');\n+  //       cy.wait('@createRequest');\n \n-        filter.assertSelected('active');\n-      });\n-    });\n+  //       filter.assertSelected('active');\n+  //     });\n+  //   });\n \n-    describe('on request fail', () => {\n-      beforeEach(() => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n+  //   describe('on request fail', () => {\n+  //     beforeEach(() => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n \n-        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-          .as('createRequest');\n+  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('createRequest');\n \n-        page.newTodoField().type('Test Todo{enter}');\n+  //       page.newTodoField().type('Test Todo{enter}');\n \n-        cy.wait('@createRequest');\n-      });\n+  //       cy.wait('@createRequest');\n+  //     });\n \n-      it('should show an error message', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Unable to add a todo');\n-      });\n+  //     it('should show an error message', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Unable to add a todo');\n+  //     });\n \n-      it('should hide an error message in 3 seconds', () => {\n-        cy.clock();\n-        cy.tick(2500);\n+  //     it('should hide an error message in 3 seconds', () => {\n+  //       cy.clock();\n+  //       cy.tick(2500);\n \n-        errorMessage.assertVisible();\n+  //       errorMessage.assertVisible();\n \n-        cy.tick(500);\n-        errorMessage.assertHidden();\n-      });\n+  //       cy.tick(500);\n+  //       errorMessage.assertHidden();\n+  //     });\n \n-      it('should remove a temp TodoItem on request fail', () => {\n-        todos.assertCount(5);\n-        todos.assertTitle(4, 'React');\n-      });\n+  //     it('should remove a temp TodoItem on request fail', () => {\n+  //       todos.assertCount(5);\n+  //       todos.assertTitle(4, 'React');\n+  //     });\n \n-      it('should enable the text field on request fail', () => {\n-        page.newTodoField().should('not.be.disabled');\n-      });\n+  //     it('should enable the text field on request fail', () => {\n+  //       page.newTodoField().should('not.be.disabled');\n+  //     });\n \n-      it('should keep the entered text on request fail', () => {\n-        page.newTodoField().should('have.value', 'Test Todo');\n-      });\n+  //     it('should keep the entered text on request fail', () => {\n+  //       page.newTodoField().should('have.value', 'Test Todo');\n+  //     });\n \n-      it('should focus text field', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n+  //     it('should focus text field', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n \n-      it('should not update active counter', () => {\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n+  //     it('should not update active counter', () => {\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n \n-      it('should immediately hide an error message on new request', () => {\n-        page.newTodoField().type(`{enter}`);\n-        errorMessage.assertHidden();\n-      });\n+  //     it('should immediately hide an error message on new request', () => {\n+  //       page.newTodoField().type(`{enter}`);\n+  //       errorMessage.assertHidden();\n+  //     });\n \n-      it('should show an error message again on a next fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n+  //     it('should show an error message again on a next fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n \n-        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-          .as('createRequest2');\n+  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('createRequest2');\n \n-        page.newTodoField().type(`{enter}`);\n-        cy.wait('@createRequest2');\n+  //       page.newTodoField().type(`{enter}`);\n+  //       cy.wait('@createRequest2');\n \n-        errorMessage.assertVisible();\n-      });\n+  //       errorMessage.assertVisible();\n+  //     });\n \n-      it('should keep an error message for 3s after the last fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n+  //     it('should keep an error message for 3s after the last fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n \n-        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-          .as('createRequest2');\n+  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('createRequest2');\n \n-        cy.clock();\n+  //       cy.clock();\n \n-        cy.tick(2000);\n-        page.newTodoField().type(`{enter}`);\n-        cy.tick(500);\n-        cy.wait('@createRequest2');\n-        cy.tick(2000);\n+  //       cy.tick(2000);\n+  //       page.newTodoField().type(`{enter}`);\n+  //       cy.tick(500);\n+  //       cy.wait('@createRequest2');\n+  //       cy.tick(2000);\n \n-        errorMessage.assertVisible();\n-      });\n+  //       errorMessage.assertVisible();\n+  //     });\n \n-      it('should allow to add a todo', () => {\n-        page.mockCreate().as('createRequest2');\n-        page.newTodoField().type('{enter}');\n+  //     it('should allow to add a todo', () => {\n+  //       page.mockCreate().as('createRequest2');\n+  //       page.newTodoField().type('{enter}');\n \n-        cy.wait('@createRequest2');\n-        page.flushJSTimers();\n+  //       cy.wait('@createRequest2');\n+  //       page.flushJSTimers();\n \n-        todos.assertCount(6);\n-        // todos.assertNotLoading(5);\n-        todos.assertNotCompleted(5);\n-        todos.assertTitle(5, 'Test Todo');\n+  //       todos.assertCount(6);\n+  //       // todos.assertNotLoading(5);\n+  //       todos.assertNotCompleted(5);\n+  //       todos.assertTitle(5, 'Test Todo');\n \n-        page.todosCounter().should('have.text', '3 items left');\n-      });\n-    });\n-  });\n+  //       page.todosCounter().should('have.text', '3 items left');\n+  //     });\n+  //   });\n+  // });\n \n-  describe('Adding a first todo', () => {\n-    beforeEach(() => {\n-      page.mockLoad({ body: [] }).as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n+  // describe('Adding a first todo', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad({ body: [] }).as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n \n-      page.mockCreate().as('createRequest');\n-      page.newTodoField().type('First todo{enter}');\n+  //     page.mockCreate().as('createRequest');\n+  //     page.newTodoField().type('First todo{enter}');\n \n-      cy.wait('@createRequest');\n-    });\n+  //     cy.wait('@createRequest');\n+  //   });\n \n-    it('should show a new todos', () => {\n-      todos.assertCount(1);\n-      todos.assertTitle(0, 'First todo');\n-      todos.assertNotCompleted(0);\n-    });\n+  //   it('should show a new todos', () => {\n+  //     todos.assertCount(1);\n+  //     todos.assertTitle(0, 'First todo');\n+  //     todos.assertNotCompleted(0);\n+  //   });\n \n-    it('should show Filter', () => {\n-      filter.assertVisible();\n-    });\n+  //   it('should show Filter', () => {\n+  //     filter.assertVisible();\n+  //   });\n \n-    it('should show todosCounter', () => {\n-      page.todosCounter().should('contain.text', '1 item');\n-    });\n-  });\n+  //   it('should show todosCounter', () => {\n+  //     page.todosCounter().should('contain.text', '1 item');\n+  //   });\n+  // });\n \n-  describe('Individual Todo Deletion', () => {\n-    describe('Default behavior', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n+  // describe('Individual Todo Deletion', () => {\n+  //   describe('Default behavior', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n \n-      it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n-        page.mockDelete(257334);\n-        page.pauseTimers();\n-        todos.deleteButton(0).click();\n+  //     it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n+  //       page.mockDelete(257334);\n+  //       page.pauseTimers();\n+  //       todos.deleteButton(0).click();\n \n-        todos.assertLoading(0);\n-      });\n+  //       todos.assertLoading(0);\n+  //     });\n \n-      it('should not delete a todo before successful response', () => {\n-        page.mockDelete(257334);\n-        page.pauseTimers();\n-        todos.deleteButton(0).click();\n+  //     it('should not delete a todo before successful response', () => {\n+  //       page.mockDelete(257334);\n+  //       page.pauseTimers();\n+  //       todos.deleteButton(0).click();\n \n-        todos.assertCount(5);\n-      });\n+  //       todos.assertCount(5);\n+  //     });\n \n-      it('should remove the todo from the list on a successful API response', () => {\n-        page.mockDelete(257334).as('deleteRequest');\n+  //     it('should remove the todo from the list on a successful API response', () => {\n+  //       page.mockDelete(257334).as('deleteRequest');\n \n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n \n-        todos.assertCount(4);\n-        todos.assertTitle(0, 'CSS');\n-      });\n+  //       todos.assertCount(4);\n+  //       todos.assertTitle(0, 'CSS');\n+  //     });\n \n-      it('should focus text field after todo deletion', () => {\n-        page.mockDelete(257334).as('deleteRequest');\n+  //     it('should focus text field after todo deletion', () => {\n+  //       page.mockDelete(257334).as('deleteRequest');\n \n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n \n-        page.newTodoField().should('be.focused');\n-      });\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n \n-      it('should not remove the todo from the list on an API error', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n+  //     it('should not remove the todo from the list on an API error', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n \n-        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n \n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n \n-        todos.assertCount(5);\n-        todos.assertTitle(0, 'HTML');\n-      });\n+  //       todos.assertCount(5);\n+  //       todos.assertTitle(0, 'HTML');\n+  //     });\n \n-      it('should show an error message on an API error', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n+  //     it('should show an error message on an API error', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n \n-        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n \n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n \n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Unable to delete a todo');\n-      });\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Unable to delete a todo');\n+  //     });\n \n-      it('should adjust the active todo count correctly after successful deletion', () => {\n-        page.mockDelete(257338).as('deleteRequest');\n-        todos.deleteButton(4).click();\n-        cy.wait('@deleteRequest');\n+  //     it('should adjust the active todo count correctly after successful deletion', () => {\n+  //       page.mockDelete(257338).as('deleteRequest');\n+  //       todos.deleteButton(4).click();\n+  //       cy.wait('@deleteRequest');\n \n-        page.todosCounter().should('contain.text', '1 item');\n-      });\n+  //       page.todosCounter().should('contain.text', '1 item');\n+  //     });\n \n-      it('should not adjust the active todo count after failed deletion', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n+  //     it('should not adjust the active todo count after failed deletion', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n \n-        page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n-          .as('deleteRequest');\n+  //       page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n+  //         .as('deleteRequest');\n \n-        todos.deleteButton(4).click();\n-        cy.wait('@deleteRequest');\n+  //       todos.deleteButton(4).click();\n+  //       cy.wait('@deleteRequest');\n \n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-    });\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n+  //   });\n \n-    describe('Last todo deletion', () => {\n-      beforeEach(() => {\n-        const todo = {\n-          \"id\": 257334,\n-          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-          \"userId\": 1,\n-          \"title\": \"HTML\",\n-          \"completed\": false\n-        };\n+  //   describe('Last todo deletion', () => {\n+  //     beforeEach(() => {\n+  //       const todo = {\n+  //         \"id\": 257334,\n+  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+  //         \"userId\": 1,\n+  //         \"title\": \"HTML\",\n+  //         \"completed\": false\n+  //       };\n \n-        page.mockLoad({ body: [todo] }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n+  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n \n-        page.mockDelete(257334);\n-        todos.deleteButton(0).click();\n-      });\n+  //       page.mockDelete(257334);\n+  //       todos.deleteButton(0).click();\n+  //     });\n \n-      it('should hide todos', () => {\n-        todos.assertCount(0);\n-      });\n+  //     it('should hide todos', () => {\n+  //       todos.assertCount(0);\n+  //     });\n \n-      it('should hide footer', () => {\n-        filter.assertHidden();\n-        page.clearCompletedButton().should('not.exist');\n-        page.todosCounter().should('not.exist');\n-      });\n+  //     it('should hide footer', () => {\n+  //       filter.assertHidden();\n+  //       page.clearCompletedButton().should('not.exist');\n+  //       page.todosCounter().should('not.exist');\n+  //     });\n \n-      it('should focus text field after todo deletion', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n-    });\n-  });\n+  //     it('should focus text field after todo deletion', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+  //   });\n+  // });\n \n   describe('Group Todo Deletion', () => {\n     describe('with no completed todos', () => {\n       beforeEach(() => {\n"
                },
                {
                    "date": 1715603211079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -960,8 +960,9 @@\n       });\n     });\n   });\n \n+  });\n   describe('Todo Toggling', () => {\n     beforeEach(() => {\n       page.mockLoad().as('loadRequest');\n       page.visit();\n@@ -1110,9 +1111,8 @@\n         todos.assertCount(3);\n         todos.assertTitle(0, 'HTML');\n       });\n     });\n-  });\n \n \n \n \n"
                },
                {
                    "date": 1715603221479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1769 @@\n+/// <reference types='cypress' />\n+/// <reference types='../support' />\n+\n+import mixedTodos from '../fixtures/todos.json';\n+\n+//#region Page Objects\n+const page = {\n+  toggleAllButton: () => cy.byDataCy('ToggleAllButton'),\n+  newTodoField: () => cy.byDataCy('NewTodoField'),\n+  todosCounter: () => cy.byDataCy('TodosCounter'),\n+  clearCompletedButton: () => cy.byDataCy('ClearCompletedButton'),\n+\n+  visit: (url = '/') => {\n+    cy.visit(url, {\n+      onBeforeLoad: win => win.localStorage.setItem('user', '{ \"id\": 1 }'),\n+    });\n+\n+    // to wait until React App is loaded\n+    cy.get('.todoapp__title').should('exist');\n+  },\n+  pauseTimers: () => cy.clock(),\n+\n+  flushJSTimers: (delay = 1000) => {\n+    cy.clock().then(clock => {\n+      clock.tick(delay);\n+      clock.restore();\n+    });\n+\n+    cy.wait(50);\n+  },\n+\n+  /**\n+   * @param {*} response - can be a valid response object or stub\n+   *\n+   * { body: [] }\n+   * { statusCode: 503: body: 'Service Unavailable' }\n+   * spy = cy.stub().callsFake(req => req.reply(response)).as('alias')\n+   */\n+  mockLoad: (response = { fixture: 'todos' }) => {\n+    return cy.intercept('**/todos?userId=*', response);\n+  },\n+  mockCreate: (response) => {\n+    const options = { method: 'POST', url: '**/todos' };\n+\n+    const spy = cy.stub()\n+      .callsFake(req => req.reply({\n+        statusCode: 201,\n+        body: { ...req.body, id: Math.random() },\n+      }))\n+      .as('createCallback');\n+\n+    return cy.intercept(options, response || spy);\n+  },\n+  mockDelete: (id, response) => {\n+    const options = { method: 'DELETE', url: `**/todos/${id}` };\n+\n+    return cy.intercept(options, response || { body: '1' });\n+  },\n+  mockUpdate: (id, response) => {\n+    const todo = mixedTodos.find(todo => todo.id === id) || {};\n+    const options = { method: 'PATCH', url: `**/todos/${id}` };\n+\n+    const spy = cy.stub()\n+      .callsFake(req => req.reply({ body: { ...todo, ...req.body, id } }))\n+      .as('updateCallback');\n+\n+    return cy.intercept(options, response || spy);\n+  },\n+};\n+\n+const todos = {\n+  el: index => cy.byDataCy('Todo').eq(index),\n+  deleteButton: index => todos.el(index).byDataCy('TodoDelete'),\n+  statusToggler: index => todos.el(index).byDataCy('TodoStatus'),\n+  title: index => todos.el(index).byDataCy('TodoTitle'),\n+  titleField: index => todos.el(index).byDataCy('TodoTitleField'),\n+\n+  assertCount: length => cy.byDataCy('Todo').should('have.length', length),\n+  assertTitle: (index, title) => todos.title(index).should('have.text', title),\n+  assertLoading: index => todos.el(index).byDataCy('TodoLoader').should('have.class', 'is-active'),\n+  assertNotLoading: index => todos.el(index).byDataCy('TodoLoader').should('not.have.class', 'is-active'),\n+  assertCompleted: index => todos.el(index).should('have.class', 'completed'),\n+  assertNotCompleted: index => todos.el(index).should('not.have.class', 'completed'),\n+};\n+\n+const errorMessage = {\n+  el: () => cy.byDataCy('ErrorNotification'),\n+  closeButton: () => errorMessage.el().byDataCy('HideErrorButton'),\n+  assertVisible: () => errorMessage.el().should('not.have.class', 'hidden'),\n+  assertHidden: () => errorMessage.el().should('have.class', 'hidden'),\n+  assertText: text => errorMessage.el().should('have.text', text),\n+};\n+\n+const FilterLinkKeys = {\n+  all: 'FilterLinkAll',\n+  active: 'FilterLinkActive',\n+  completed: 'FilterLinkCompleted',\n+};\n+\n+const filter = {\n+  el: () => cy.byDataCy('Filter'),\n+  link: type => cy.byDataCy(FilterLinkKeys[type]),\n+  assertVisible: () => filter.el().should('exist'),\n+  assertHidden: () => filter.el().should('not.exist'),\n+  assertSelected: type => filter.link(type).should('have.class', 'selected'),\n+  assertNotSelected: type => filter.link(type).should('not.have.class', 'selected'),\n+};\n+//#endregion\n+\n+let failed = false;\n+\n+Cypress.on('fail', (e) => {\n+  failed = true;\n+  throw e;\n+});\n+\n+describe('', () => {\n+  beforeEach(() => {\n+    if (failed) Cypress.runner.stop();\n+  });\n+\n+  // describe('Page with no todos', () => {\n+  //   it('should send 1 todos request', () => {\n+  //     const spy = cy.stub()\n+  //       .callsFake(req => req.reply({ body: [] }))\n+  //       .as('loadCallback')\n+\n+  //     page.mockLoad(spy).as('loadRequest');\n+  //     page.visit();\n+\n+  //     cy.wait('@loadRequest');\n+  //     cy.wait(500);\n+\n+  //     cy.get('@loadCallback').should('have.callCount', 1);\n+  //   });\n+\n+  //   describe('', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should have NewTodoField', () => {\n+  //       page.newTodoField().should('exist');\n+  //     });\n+\n+  //     it('should not have Todos', () => {\n+  //       todos.assertCount(0);\n+  //     });\n+\n+  //     it('should not have Footer', () => {\n+  //       filter.assertHidden();\n+  //       page.clearCompletedButton().should('not.exist');\n+  //       page.todosCounter().should('not.exist');\n+  //     });\n+\n+  //     it('should not show error message', () => {\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+\n+  //   describe('on loading error', () => {\n+  //     beforeEach(() => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should show error', () => {\n+  //       errorMessage.assertVisible();\n+  //     });\n+\n+  //     it('should show correct message', () => {\n+  //       errorMessage.assertText('Unable to load todos');\n+  //     });\n+\n+  //     it('should hide error after 3 seconds', () => {\n+  //       // just in case\n+  //       cy.wait(50);\n+\n+  //       cy.clock();\n+  //       cy.tick(2500);\n+  //       errorMessage.assertVisible();\n+\n+  //       cy.tick(500);\n+  //       errorMessage.assertHidden();\n+  //     });\n+\n+  //     it('should hide error on close button click', () => {\n+  //       errorMessage.closeButton().click();\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+  // });\n+\n+  // describe('Page with mixed todos', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad().as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n+  //   });\n+\n+  //   it('should have NewTodoField', () => {\n+  //     page.newTodoField().should('exist');\n+  //   });\n+\n+  //   it('should have all loaded todos', () => {\n+  //     todos.assertCount(5);\n+  //   });\n+\n+  //   it('should have delete buttons for every todo', () => {\n+  //     todos.deleteButton(0).should('exist');\n+  //   });\n+\n+  //   it('should not have loaders', () => {\n+  //     todos.assertNotLoading(0);\n+  //     todos.assertNotLoading(1);\n+  //     todos.assertNotLoading(2);\n+  //     todos.assertNotLoading(3);\n+  //     todos.assertNotLoading(4);\n+  //   })\n+\n+  //   it('should have correct todo titles', () => {\n+  //     todos.assertTitle(0, 'HTML');\n+  //     todos.assertTitle(1, 'CSS');\n+  //     todos.assertTitle(2, 'JS');\n+  //     todos.assertTitle(3, 'TypeScript');\n+  //     todos.assertTitle(4, 'React');\n+  //   });\n+\n+  //   it('should higlight all completed todos', () => {\n+  //     todos.assertCompleted(0);\n+  //     todos.assertCompleted(1);\n+  //     todos.assertCompleted(2);\n+  //   });\n+\n+  //   it('should not higlight not completed todos', () => {\n+  //     todos.assertNotCompleted(3);\n+  //     todos.assertNotCompleted(4);\n+  //   });\n+\n+  //   it('should have correct completed statuses', () => {\n+  //     todos.statusToggler(0).should('be.checked');\n+  //     todos.statusToggler(1).should('be.checked');\n+  //     todos.statusToggler(2).should('be.checked');\n+  //     todos.statusToggler(3).should('not.be.checked');\n+  //     todos.statusToggler(4).should('not.be.checked');\n+  //   });\n+\n+  //   it('should have Filter', () => {\n+  //     filter.assertVisible();\n+  //   });\n+\n+  //   it('should have todosCounter with a number of not completed todos', () => {\n+  //     page.todosCounter().should('have.text', '2 items left');\n+  //   });\n+\n+  //   it('should have clearCompletedButton', () => {\n+  //     page.clearCompletedButton().should('exist');\n+  //   });\n+\n+  //   it('should have Filter', () => {\n+  //     filter.assertVisible();\n+  //   });\n+\n+  //   it('should not show error message', () => {\n+  //     errorMessage.assertHidden();\n+  //   });\n+  // });\n+\n+  // describe('Filtering', () => {\n+  //   describe('with mixed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should have only filterLinkAll active', () => {\n+  //       filter.assertSelected('all');\n+  //       filter.assertNotSelected('active');\n+  //       filter.assertNotSelected('completed');\n+  //     });\n+\n+  //     it('should allow to select the active filter', () => {\n+  //       filter.link('active').click();\n+\n+  //       filter.assertNotSelected('all');\n+  //       filter.assertSelected('active');\n+  //       filter.assertNotSelected('completed');\n+  //     });\n+\n+  //     it('should show only active todos when active filter is selected', () => {\n+  //       filter.link('active').click();\n+\n+  //       todos.assertCount(2);\n+  //       todos.assertTitle(0, 'TypeScript');\n+  //       todos.assertTitle(1, 'React');\n+  //     });\n+\n+  //     it('should keep footer when active todos are shown', () => {\n+  //       filter.link('active').click();\n+\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //       filter.assertVisible();\n+  //       page.clearCompletedButton().should('exist');\n+  //     });\n+\n+  //     it('should allow to select the completed filter', () => {\n+  //       filter.link('completed').click();\n+\n+  //       filter.assertNotSelected('all');\n+  //       filter.assertNotSelected('active');\n+  //       filter.assertSelected('completed');\n+  //     });\n+\n+  //     it('should show only completed todos when completed filter is selected', () => {\n+  //       filter.link('completed').click();\n+\n+  //       todos.assertCount(3);\n+  //       todos.assertTitle(0, 'HTML');\n+  //       todos.assertTitle(1, 'CSS');\n+  //       todos.assertTitle(2, 'JS');\n+  //     });\n+\n+  //     it('should keep footer when completed todos are shown', () => {\n+  //       filter.link('completed').click();\n+\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //       filter.assertVisible();\n+  //       page.clearCompletedButton().should('exist');\n+  //     });\n+\n+  //     it('should allow to reset filter', () => {\n+  //       filter.link('completed').click();\n+  //       filter.link('all').click();\n+\n+  //       todos.assertCount(5);\n+  //       filter.assertSelected('all');\n+  //       filter.assertNotSelected('active');\n+  //       filter.assertNotSelected('completed');\n+  //     });\n+  //   });\n+\n+  //   describe('with active todos only', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should hide todos on completed selection', () => {\n+  //       filter.link('completed').click();\n+\n+  //       todos.assertCount(0);\n+  //     });\n+\n+  //     it('should keep footer on completed selection', () => {\n+  //       filter.link('completed').click();\n+  //       filter.assertVisible();\n+  //     });\n+\n+  //     it('should keep todos counter on completed selection', () => {\n+  //       filter.link('completed').click();\n+  //       page.todosCounter().should('have.text', '5 items left');\n+  //     });\n+  //   });\n+\n+  //   describe('with completed todos only', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+  //   });\n+  // });\n+\n+  // describe('Adding a todo', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad().as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n+  //   });\n+\n+  //   it('should focus text field by default', () => {\n+  //     page.newTodoField().should('be.focused');\n+  //   });\n+\n+  //   describe('if title is empty', () => {\n+  //     beforeEach(() => {\n+  //       page.mockCreate();\n+  //       page.newTodoField().type('{enter}');\n+  //     });\n+\n+  //     it('should not send a request', () => {\n+  //       cy.get('@createCallback').should('not.be.called');\n+  //     });\n+\n+  //     it('should keep text field focused', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+\n+  //     it('should display an error message', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Title should not be empty');\n+  //     });\n+\n+  //     it('should hide an error message after 3 seconds', () => {\n+  //       // just in case\n+  //       cy.wait(50);\n+\n+  //       cy.clock();\n+  //       cy.tick(3000);\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+\n+  //   describe('if title title has only whitespaces', () => {\n+  //     beforeEach(() => {\n+  //       page.mockCreate();\n+  //       page.newTodoField().type('     {enter}');\n+  //     });\n+\n+  //     it('should not send a request', () => {\n+  //       cy.get('@createCallback').should('not.be.called');\n+  //     });\n+\n+  //     it('should keep text field focused', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+\n+  //     it('should display an error message', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Title should not be empty');\n+  //     });\n+\n+  //     it('should hide an error message after 3 seconds', () => {\n+  //       // just in case\n+  //       cy.wait(50);\n+\n+  //       cy.clock();\n+  //       cy.tick(3000);\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+\n+  //   describe('after form submition before response is received', () => {\n+  //     beforeEach(() => {\n+  //       page.mockCreate();\n+  //       page.pauseTimers();\n+  //       page.newTodoField().type('Test Todo{enter}');\n+  //     });\n+\n+  //     it('should send a create request', () => {\n+  //       cy.tick(1000);\n+  //       cy.get('@createCallback').should('have.callCount', 1);\n+  //     });\n+\n+  //     it('should disable the input', () => {\n+  //       page.newTodoField().should('be.disabled');\n+  //     });\n+\n+  //     it('should keep entered text', () => {\n+  //       page.newTodoField().should('have.value', 'Test Todo');\n+  //     });\n+\n+  //     it('should create and show a temp TodoItem with Loader', () => {\n+  //       todos.assertCount(6);\n+  //       todos.assertLoading(5);\n+  //     });\n+\n+  //     it('should show a temp TodoItem with correct title', () => {\n+  //       todos.assertTitle(5, 'Test Todo');\n+  //     });\n+\n+  //     it('should show a not completed temp TodoItem', () => {\n+  //       todos.assertNotCompleted(5);\n+  //     });\n+\n+  //     it('should not show loaders for existing todos', () => {\n+  //       todos.assertNotLoading(0);\n+  //       todos.assertNotLoading(1);\n+  //       todos.assertNotLoading(2);\n+  //       todos.assertNotLoading(3);\n+  //       todos.assertNotLoading(4);\n+  //     });\n+\n+  //     it('should not update active counter', () => {\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n+  //   });\n+\n+  //   describe('on success response', () => {\n+  //     describe('', () => {\n+  //       beforeEach(() => {\n+  //         page.mockCreate().as('createRequest');\n+  //         page.newTodoField().type('Test Todo{enter}');\n+\n+  //         cy.wait('@createRequest');\n+  //       });\n+\n+  //       // this test may be flaky\n+  //       it.skip('should replace loader with a created todo', () => {\n+  //         page.flushJSTimers();\n+  //         todos.assertCount(6);\n+  //         todos.assertNotLoading(5);\n+  //       });\n+\n+  //       it('should add a todo with a correct title', () => {\n+  //         todos.assertTitle(5, 'Test Todo');\n+  //       });\n+\n+  //       it('should add a not completed todo', () => {\n+  //         todos.assertNotCompleted(5);\n+  //       });\n+\n+  //       it('should update active counter', () => {\n+  //         page.todosCounter().should('have.text', '3 items left');\n+  //       });\n+\n+  //       it('should enable the text field', () => {\n+  //         page.newTodoField().should('not.be.disabled');\n+  //       });\n+\n+  //       it('should not show error message', () => {\n+  //         errorMessage.assertHidden();\n+  //       });\n+\n+  //       it('should clear text field', () => {\n+  //         page.newTodoField().should('have.value', '');\n+  //       });\n+\n+  //       it('should focus text field', () => {\n+  //         page.newTodoField().should('be.focused');\n+  //       });\n+\n+  //       it('should allow to add one more todo', () => {\n+  //         page.mockCreate().as('createRequest2');\n+\n+  //         page.newTodoField().type('Hello world{enter}');\n+  //         cy.wait('@createRequest2');\n+  //         page.flushJSTimers();\n+\n+  //         todos.assertCount(7);\n+  //         // todos.assertNotLoading(6);\n+  //         todos.assertNotCompleted(6);\n+  //         todos.assertTitle(6, 'Hello world');\n+  //         page.todosCounter().should('have.text', '4 items left');\n+  //       });\n+  //     });\n+\n+  //     it('should add trimmed title', () => {\n+  //       page.mockCreate().as('createRequest');\n+\n+  //       page.newTodoField().type('  Other Title    {enter}');\n+  //       cy.wait('@createRequest');\n+\n+  //       // just in case\n+  //       page.flushJSTimers();\n+\n+  //       todos.assertTitle(5, 'Other Title');\n+  //     });\n+\n+  //     it('should keep current filter', () => {\n+  //       page.mockCreate().as('createRequest');\n+\n+  //       filter.link('active').click();\n+  //       page.newTodoField().type('Test Todo{enter}');\n+  //       cy.wait('@createRequest');\n+\n+  //       filter.assertSelected('active');\n+  //     });\n+  //   });\n+\n+  //   describe('on request fail', () => {\n+  //     beforeEach(() => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('createRequest');\n+\n+  //       page.newTodoField().type('Test Todo{enter}');\n+\n+  //       cy.wait('@createRequest');\n+  //     });\n+\n+  //     it('should show an error message', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Unable to add a todo');\n+  //     });\n+\n+  //     it('should hide an error message in 3 seconds', () => {\n+  //       cy.clock();\n+  //       cy.tick(2500);\n+\n+  //       errorMessage.assertVisible();\n+\n+  //       cy.tick(500);\n+  //       errorMessage.assertHidden();\n+  //     });\n+\n+  //     it('should remove a temp TodoItem on request fail', () => {\n+  //       todos.assertCount(5);\n+  //       todos.assertTitle(4, 'React');\n+  //     });\n+\n+  //     it('should enable the text field on request fail', () => {\n+  //       page.newTodoField().should('not.be.disabled');\n+  //     });\n+\n+  //     it('should keep the entered text on request fail', () => {\n+  //       page.newTodoField().should('have.value', 'Test Todo');\n+  //     });\n+\n+  //     it('should focus text field', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+\n+  //     it('should not update active counter', () => {\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n+\n+  //     it('should immediately hide an error message on new request', () => {\n+  //       page.newTodoField().type(`{enter}`);\n+  //       errorMessage.assertHidden();\n+  //     });\n+\n+  //     it('should show an error message again on a next fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('createRequest2');\n+\n+  //       page.newTodoField().type(`{enter}`);\n+  //       cy.wait('@createRequest2');\n+\n+  //       errorMessage.assertVisible();\n+  //     });\n+\n+  //     it('should keep an error message for 3s after the last fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('createRequest2');\n+\n+  //       cy.clock();\n+\n+  //       cy.tick(2000);\n+  //       page.newTodoField().type(`{enter}`);\n+  //       cy.tick(500);\n+  //       cy.wait('@createRequest2');\n+  //       cy.tick(2000);\n+\n+  //       errorMessage.assertVisible();\n+  //     });\n+\n+  //     it('should allow to add a todo', () => {\n+  //       page.mockCreate().as('createRequest2');\n+  //       page.newTodoField().type('{enter}');\n+\n+  //       cy.wait('@createRequest2');\n+  //       page.flushJSTimers();\n+\n+  //       todos.assertCount(6);\n+  //       // todos.assertNotLoading(5);\n+  //       todos.assertNotCompleted(5);\n+  //       todos.assertTitle(5, 'Test Todo');\n+\n+  //       page.todosCounter().should('have.text', '3 items left');\n+  //     });\n+  //   });\n+  // });\n+\n+  // describe('Adding a first todo', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad({ body: [] }).as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n+\n+  //     page.mockCreate().as('createRequest');\n+  //     page.newTodoField().type('First todo{enter}');\n+\n+  //     cy.wait('@createRequest');\n+  //   });\n+\n+  //   it('should show a new todos', () => {\n+  //     todos.assertCount(1);\n+  //     todos.assertTitle(0, 'First todo');\n+  //     todos.assertNotCompleted(0);\n+  //   });\n+\n+  //   it('should show Filter', () => {\n+  //     filter.assertVisible();\n+  //   });\n+\n+  //   it('should show todosCounter', () => {\n+  //     page.todosCounter().should('contain.text', '1 item');\n+  //   });\n+  // });\n+\n+  // describe('Individual Todo Deletion', () => {\n+  //   describe('Default behavior', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n+  //       page.mockDelete(257334);\n+  //       page.pauseTimers();\n+  //       todos.deleteButton(0).click();\n+\n+  //       todos.assertLoading(0);\n+  //     });\n+\n+  //     it('should not delete a todo before successful response', () => {\n+  //       page.mockDelete(257334);\n+  //       page.pauseTimers();\n+  //       todos.deleteButton(0).click();\n+\n+  //       todos.assertCount(5);\n+  //     });\n+\n+  //     it('should remove the todo from the list on a successful API response', () => {\n+  //       page.mockDelete(257334).as('deleteRequest');\n+\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       todos.assertCount(4);\n+  //       todos.assertTitle(0, 'CSS');\n+  //     });\n+\n+  //     it('should focus text field after todo deletion', () => {\n+  //       page.mockDelete(257334).as('deleteRequest');\n+\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+\n+  //     it('should not remove the todo from the list on an API error', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       todos.assertCount(5);\n+  //       todos.assertTitle(0, 'HTML');\n+  //     });\n+\n+  //     it('should show an error message on an API error', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Unable to delete a todo');\n+  //     });\n+\n+  //     it('should adjust the active todo count correctly after successful deletion', () => {\n+  //       page.mockDelete(257338).as('deleteRequest');\n+  //       todos.deleteButton(4).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       page.todosCounter().should('contain.text', '1 item');\n+  //     });\n+\n+  //     it('should not adjust the active todo count after failed deletion', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n+  //         .as('deleteRequest');\n+\n+  //       todos.deleteButton(4).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n+  //   });\n+\n+  //   describe('Last todo deletion', () => {\n+  //     beforeEach(() => {\n+  //       const todo = {\n+  //         \"id\": 257334,\n+  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+  //         \"userId\": 1,\n+  //         \"title\": \"HTML\",\n+  //         \"completed\": false\n+  //       };\n+\n+  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+\n+  //       page.mockDelete(257334);\n+  //       todos.deleteButton(0).click();\n+  //     });\n+\n+  //     it('should hide todos', () => {\n+  //       todos.assertCount(0);\n+  //     });\n+\n+  //     it('should hide footer', () => {\n+  //       filter.assertHidden();\n+  //       page.clearCompletedButton().should('not.exist');\n+  //       page.todosCounter().should('not.exist');\n+  //     });\n+\n+  //     it('should focus text field after todo deletion', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+  //   });\n+  // });\n+\n+  describe('Group Todo Deletion', () => {\n+    describe('with no completed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should not have active ClearCompleted button', () => {\n+        page.clearCompletedButton().should('be.disabled');\n+      });\n+    });\n+\n+    describe('with some completed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have ClearCompleted button enabled', () => {\n+        page.clearCompletedButton().should('not.be.disabled');\n+      });\n+\n+      it('should send individual deletion request for each completed todo', () => {\n+        page.mockDelete(257334).as('deleteRequest1');\n+        page.mockDelete(257335).as('deleteRequest2');\n+        page.mockDelete(257336).as('deleteRequest3');\n+\n+        page.clearCompletedButton().click();\n+\n+        cy.wait('@deleteRequest1');\n+        cy.wait('@deleteRequest2');\n+        cy.wait('@deleteRequest3');\n+      });\n+\n+      describe('on success', () => {\n+        beforeEach(() => {\n+          page.mockDelete(257334).as('deleteRequest1');\n+          page.mockDelete(257335).as('deleteRequest2');\n+          page.mockDelete(257336).as('deleteRequest3');\n+\n+          page.clearCompletedButton().click();\n+\n+          cy.wait('@deleteRequest1');\n+          cy.wait('@deleteRequest2');\n+          cy.wait('@deleteRequest3');\n+        });\n+\n+        it('should remove all completed todos from the list', () => {\n+          todos.assertCount(2);\n+          todos.assertTitle(0, 'TypeScript');\n+          todos.assertTitle(1, 'React');\n+        });\n+\n+        it('should disable ClearCompleted button', () => {\n+          page.clearCompletedButton().should('be.disabled');\n+        });\n+\n+        it('should focus the text field', () => {\n+          page.newTodoField().should('be.focused');\n+        });\n+      });\n+\n+      describe('on a single fail', () => {\n+        beforeEach(() => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334).as('deleteRequest1');\n+          page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n+          page.mockDelete(257336).as('deleteRequest3');\n+\n+          page.clearCompletedButton().click();\n+\n+          cy.wait('@deleteRequest1');\n+          cy.wait('@deleteRequest2');\n+          cy.wait('@deleteRequest3');\n+        });\n+\n+        it('should show an error message if any of the group deletions fails', () => {\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to delete a todo');\n+        });\n+\n+        it('should remove todos with success responses and keep todos with errors', () => {\n+          todos.assertCount(3);\n+          todos.assertTitle(0, 'CSS');\n+          todos.assertTitle(1, 'TypeScript');\n+        });\n+\n+        it('should not disable ClearCompleted button', () => {\n+          page.clearCompletedButton().should('not.be.disabled');\n+        });\n+      });\n+    });\n+\n+    describe('with all todos completed', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.mockDelete(257334).as('deleteRequest1');\n+        page.mockDelete(257335).as('deleteRequest2');\n+        page.mockDelete(257336).as('deleteRequest3');\n+        page.mockDelete(257337).as('deleteRequest4');\n+        page.mockDelete(257338).as('deleteRequest5');\n+\n+        page.clearCompletedButton().click();\n+\n+        cy.wait('@deleteRequest1');\n+        cy.wait('@deleteRequest2');\n+        cy.wait('@deleteRequest3');\n+        cy.wait('@deleteRequest4');\n+        cy.wait('@deleteRequest5');\n+      });\n+\n+      it('should hide todos after clearing all completed todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+      it('should hide footer after clearing all completed todos', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+    });\n+  });\n+\n+  // describe('Todo Toggling', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad().as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n+  //   });\n+\n+  //   describe('before receving response', () => {\n+  //     beforeEach(() => {\n+  //       page.mockUpdate(257334).as('updateRequest');\n+  //     });\n+\n+  //     it('should send an update request', () => {\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest');\n+  //     });\n+\n+  //     it('should show loader after click', () => {\n+  //       page.pauseTimers();\n+  //       todos.statusToggler(0).click();\n+\n+  //       todos.assertLoading(0);\n+  //     });\n+\n+  //     it('should not show error message after click', () => {\n+  //       page.pauseTimers();\n+  //       todos.statusToggler(0).click();\n+\n+  //       errorMessage.assertHidden();\n+  //     });\n+\n+  //     it('should not hide a todo if filtered', () => {\n+  //       filter.link('completed').click();\n+  //       page.pauseTimers();\n+  //       cy.tick(1000); // flush JS animation\n+  //       todos.statusToggler(0).click();\n+\n+  //       todos.assertCount(3);\n+  //       todos.assertTitle(0, 'HTML');\n+  //     });\n+  //   });\n+\n+  //   describe('on success', () => {\n+  //     beforeEach(() => {\n+  //       page.mockUpdate(257334).as('updateRequest');\n+\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest');\n+  //     });\n+\n+  //     it('should toggle a todo', () => {\n+  //       todos.assertNotCompleted(0);\n+  //       todos.statusToggler(0).should('not.be.checked');\n+  //     });\n+\n+  //     it('should cancel loading', () => {\n+  //       page.flushJSTimers();\n+  //       todos.assertNotLoading(0);\n+  //     });\n+\n+  //     it('should update the counter', () => {\n+  //       page.todosCounter().should('have.text', '3 items left');\n+  //     });\n+\n+  //     it('should not show an error message', () => {\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+\n+  //   describe('on fail', () => {\n+  //     beforeEach(() => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('updateRequest');\n+\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest');\n+  //     });\n+\n+  //     it('should show an error', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Unable to update a todo');\n+  //     });\n+\n+  //     it('should not toggle a todo', () => {\n+  //       todos.assertCompleted(0);\n+  //       todos.statusToggler(0).should('be.checked');\n+  //     });\n+\n+  //     it('should cancel loading', () => {\n+  //       page.flushJSTimers();\n+  //       todos.assertNotLoading(0);\n+  //     });\n+\n+  //     it('should not update the counter', () => {\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n+\n+  //     it('should allow to toggle again', () => {\n+  //       page.mockUpdate(257334).as('updateRequest2');\n+\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest2');\n+\n+  //       todos.assertNotCompleted(0);\n+  //     });\n+  //   });\n+\n+  //   describe('if filtered', () => {\n+  //     beforeEach(() => {\n+  //       filter.link('completed').click();\n+  //     });\n+\n+  //     it('should hide a todo on success', () => {\n+  //       page.mockUpdate(257334).as('updateRequest');\n+\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       todos.assertCount(2);\n+  //       todos.assertTitle(0, 'CSS');\n+  //     });\n+\n+  //     it('should show a todo on success when selected an oposite filter', () => {\n+  //       page.mockUpdate(257334).as('updateRequest');\n+\n+  //       todos.statusToggler(0).click();\n+  //       filter.link('active').click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       todos.assertCount(3);\n+  //       todos.assertTitle(0, 'HTML');\n+  //     });\n+\n+  //     it('should not hide a todo on fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('updateRequest');\n+\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       todos.assertCount(3);\n+  //       todos.assertTitle(0, 'HTML');\n+  //     });\n+  //   });\n+  // });\n+\n+\n+\n+\n+\n+\n+\n+  // describe('Toggle All Button', () => {\n+  //   describe('if there are no todos', () => {\n+  //     it('should not be visible while loading todos', () => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n+\n+  //       page.pauseTimers();\n+  //       page.visit();\n+\n+  //       page.toggleAllButton().should('not.exist');\n+  //     });\n+\n+  //     it('should not be visible when loaded', () => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+\n+  //       page.toggleAllButton().should('not.exist');\n+  //     });\n+\n+  //     it('should appear after adding a todo', () => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n+  //       page.mockCreate().as('createRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+\n+  //       page.newTodoField().type('First todo{enter}');\n+  //       cy.wait('@createRequest');\n+\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should disappear after removing the last todo', () => {\n+  //       const todo = {\n+  //         \"id\": 257334,\n+  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+  //         \"userId\": 1,\n+  //         \"title\": \"HTML\",\n+  //         \"completed\": false\n+  //       };\n+\n+  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n+  //       page.mockDelete(257334).as('deleteRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       page.toggleAllButton().should('not.exist');\n+  //     });\n+  //   });\n+\n+  //   describe('if all todos are completed', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should stay visible after filtering out all the todos', () => {\n+  //       filter.link('active').click();\n+\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should be active', () => {\n+  //       page.toggleAllButton().should('have.class', 'active');\n+  //     });\n+\n+  //     it('should become not active after toggling a todo', () => {\n+  //       page.mockUpdate(257335).as('updateRequest');\n+  //       todos.statusToggler(1).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     it('should stay active after a todo toggling fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n+  //       todos.statusToggler(1).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       page.toggleAllButton().should('have.class', 'active');\n+  //     });\n+\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334).as('updateRequest4');\n+  //         page.mockUpdate(257335).as('updateRequest5');\n+  //         page.mockUpdate(257336).as('updateRequest6');\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n+\n+  //         page.toggleAllButton().click();\n+\n+  //         cy.wait('@updateRequest4');\n+  //         cy.wait('@updateRequest5');\n+  //         cy.wait('@updateRequest6');\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n+\n+  //       it('should send requests for all todos', () => {\n+  //         // if before each pass\n+  //       });\n+\n+  //       it('should make all todos active', () => {\n+  //         todos.assertNotCompleted(0);\n+  //         todos.assertNotCompleted(1);\n+  //         todos.assertNotCompleted(2);\n+  //         todos.assertNotCompleted(3);\n+  //         todos.assertNotCompleted(4);\n+  //       });\n+\n+  //       it('should become not active', () => {\n+  //         page.toggleAllButton().should('not.have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n+\n+  //   describe('if all todos are active', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should not be active', () => {\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     it('should not become active after toggling a todo', () => {\n+  //       page.mockUpdate(257335).as('updateRequest');\n+  //       todos.statusToggler(1).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334).as('updateRequest4');\n+  //         page.mockUpdate(257335).as('updateRequest5');\n+  //         page.mockUpdate(257336).as('updateRequest6');\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n+\n+  //         page.toggleAllButton().click();\n+\n+  //         cy.wait('@updateRequest4');\n+  //         cy.wait('@updateRequest5');\n+  //         cy.wait('@updateRequest6');\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n+\n+  //       it('should send requests for all todos', () => {\n+  //         // if before each pass\n+  //       });\n+\n+  //       it('should make all todos completed', () => {\n+  //         todos.assertCompleted(0);\n+  //         todos.assertCompleted(1);\n+  //         todos.assertCompleted(2);\n+  //         todos.assertCompleted(3);\n+  //         todos.assertCompleted(4);\n+  //       });\n+\n+  //       it('should become active', () => {\n+  //         page.toggleAllButton().should('have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n+\n+  //   describe('if there are some mixed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should not be active', () => {\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     it('should become active after completing all todos', () => {\n+  //       page.mockUpdate(257337).as('updateRequest1');\n+  //       page.mockUpdate(257338).as('updateRequest2');\n+\n+  //       todos.statusToggler(3).click();\n+  //       cy.wait('@updateRequest1');\n+  //       todos.statusToggler(4).click();\n+  //       cy.wait('@updateRequest2');\n+\n+  //       page.toggleAllButton().should('have.class', 'active');\n+  //     });\n+\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334, cy.stub().as('update4'));\n+  //         page.mockUpdate(257335, cy.stub().as('update5'));\n+  //         page.mockUpdate(257336, cy.stub().as('update6'));\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n+\n+  //         page.toggleAllButton().click();\n+\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n+\n+  //       it('should send requests only for not completed todos', () => {\n+  //         cy.get('@update4').should('not.be.called');\n+  //         cy.get('@update5').should('not.be.called');\n+  //         cy.get('@update6').should('not.be.called');\n+  //       });\n+\n+  //       it('should make all todos completed', () => {\n+  //         todos.assertCompleted(0);\n+  //         todos.assertCompleted(1);\n+  //         todos.assertCompleted(2);\n+  //         todos.assertCompleted(3);\n+  //         todos.assertCompleted(4);\n+  //       });\n+\n+  //       it('should become active', () => {\n+  //         page.toggleAllButton().should('have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n+  // });\n+\n+  describe('Renaming', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should not show forms by default', () => {\n+      todos.titleField(0).should('not.exist');\n+      todos.titleField(1).should('not.exist');\n+      todos.titleField(2).should('not.exist');\n+      todos.titleField(3).should('not.exist');\n+      todos.titleField(4).should('not.exist');\n+    });\n+\n+    describe('Edit Form', () => {\n+      // describe('by default', () => {\n+      //   it('should be opened on dblclick', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(0).should('exist');\n+      //   });\n+\n+      //   it('should have current value', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(0).should('have.value', 'HTML');\n+      //   });\n+\n+      //   it('should be focused', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(0).should('be.focused');\n+      //   });\n+\n+      //   it('should hide a title', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.title(0).should('not.exist');\n+      //   });\n+\n+      //   it('should hide DeleteButton', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.deleteButton(0).should('not.exist');\n+      //   });\n+\n+      //   it('should keep StatusToggler', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.statusToggler(0).should('exist');\n+      //   });\n+\n+      //   it('should not open forms for other todos', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(1).should('not.exist');\n+      //     todos.titleField(2).should('not.exist');\n+      //     todos.titleField(3).should('not.exist');\n+      //     todos.titleField(4).should('not.exist');\n+      //   });\n+\n+      //   it('should not send a request on change', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n+\n+      //     page.mockUpdate(257334, spy);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123');\n+\n+      //     cy.get('@renameCallback').should('not.be.called');\n+      //   });\n+      // });\n+\n+      describe('on Escape', () => {\n+        it('should be closed', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should keep current title', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n+\n+          todos.assertTitle(0, 'HTML');\n+        });\n+\n+        it('should not send a request', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+      });\n+\n+      describe('on enter before recieved a response', () => {\n+        it('should send a request', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123{enter}');\n+\n+          cy.get('@renameCallback').should('have.callCount', 1);\n+        });\n+\n+        it('should show loader', () => {\n+          page.mockUpdate(257334);\n+\n+          todos.title(0).trigger('dblclick');\n+          page.pauseTimers();\n+          todos.titleField(0).type('123{enter}');\n+\n+          todos.assertLoading(0);\n+        });\n+\n+        // It depend on your implementation\n+        it.skip('should stay while waiting', () => {\n+          page.mockUpdate(257334);\n+\n+          todos.title(0).trigger('dblclick');\n+          page.pauseTimers();\n+          todos.titleField(0).type('123{enter}');\n+\n+          todos.titleField(0).should('exist');\n+        });\n+      });\n+\n+      describe('on success', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334).as('renameRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear()\n+        });\n+\n+        it('should cancel loading', () => {\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should be closed', () => {\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should show the updated title', () => {\n+          todos.titleField(0).type('Something{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertTitle(0, 'Something');\n+        });\n+\n+        it('should show trim the new title', () => {\n+          todos.titleField(0).type('   Some new title      {enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertTitle(0, 'Some new title');\n+        });\n+      });\n+\n+      describe('on fail', () => {\n+        beforeEach(() => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+        });\n+\n+        it('should cancel loading on fail', () => {\n+          page.flushJSTimers();\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should stay open on fail', () => {\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should show error message', () => {\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to update a todo');\n+        });\n+\n+        it('should hide error message in 3s', () => {\n+          page.flushJSTimers(3000);\n+\n+          errorMessage.assertHidden();\n+        });\n+      });\n+\n+      describe('if title was not changed', () => {\n+        it('should not send a request on enter', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+\n+        it('should be close on enter', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should be closed on Escape', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should preserve current title on save', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.assertTitle(0, 'HTML');\n+        });\n+      });\n+\n+      describe('if title became empty', () => {\n+        beforeEach(() => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+        });\n+\n+        it('should not send an update request on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+\n+        it('should send a delete request on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.wait('@deleteRequest');\n+        });\n+\n+        it('should show loading on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+\n+          page.pauseTimers();\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.assertLoading(0);\n+        });\n+\n+        it('should delete a todo on success', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          todos.assertCount(4);\n+          todos.assertTitle(0, 'CSS');\n+        });\n+\n+        it('should show deleting error message on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to delete a todo')\n+        });\n+\n+        // this test may be unstable\n+        it.skip('should hide loader on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should stay open on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should be closed on Escape', () => {\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should preserve current title on close', () => {\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.title(0).should('have.text', 'HTML');\n+        });\n+      });\n+\n+      describe('on Blur', () => {\n+        it('should save', () => {\n+          page.mockUpdate(257334).as('renameRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear()\n+          todos.titleField(0).type('New title');\n+          todos.titleField(0).blur();\n+          cy.wait('@renameRequest');\n+\n+          // just in case\n+          page.flushJSTimers();\n+\n+          todos.assertTitle(0, 'New title');\n+        });\n+\n+        it('should cancel if title was not changed', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).blur();\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+          page.flushJSTimers();\n+          todos.titleField(0).should('not.exist');\n+          todos.assertTitle(0, 'HTML');\n+        });\n+\n+        it('should delete if title is empty', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+          todos.titleField(0).blur();\n+          cy.wait('@deleteRequest');\n+\n+          todos.assertCount(4);\n+          todos.assertTitle(0, 'CSS');\n+        })\n+      });\n+    });\n+  });\n+});\n"
                },
                {
                    "date": 1715603265066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -830,137 +830,137 @@\n   //     });\n   //   });\n   // });\n \n-  describe('Group Todo Deletion', () => {\n-    describe('with no completed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n+  // describe('Group Todo Deletion', () => {\n+  //   describe('with no completed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n \n-      it('should not have active ClearCompleted button', () => {\n-        page.clearCompletedButton().should('be.disabled');\n-      });\n-    });\n+  //     it('should not have active ClearCompleted button', () => {\n+  //       page.clearCompletedButton().should('be.disabled');\n+  //     });\n+  //   });\n \n-    describe('with some completed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n+  //   describe('with some completed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n \n-      it('should have ClearCompleted button enabled', () => {\n-        page.clearCompletedButton().should('not.be.disabled');\n-      });\n+  //     it('should have ClearCompleted button enabled', () => {\n+  //       page.clearCompletedButton().should('not.be.disabled');\n+  //     });\n \n-      it('should send individual deletion request for each completed todo', () => {\n-        page.mockDelete(257334).as('deleteRequest1');\n-        page.mockDelete(257335).as('deleteRequest2');\n-        page.mockDelete(257336).as('deleteRequest3');\n+  //     it('should send individual deletion request for each completed todo', () => {\n+  //       page.mockDelete(257334).as('deleteRequest1');\n+  //       page.mockDelete(257335).as('deleteRequest2');\n+  //       page.mockDelete(257336).as('deleteRequest3');\n \n-        page.clearCompletedButton().click();\n+  //       page.clearCompletedButton().click();\n \n-        cy.wait('@deleteRequest1');\n-        cy.wait('@deleteRequest2');\n-        cy.wait('@deleteRequest3');\n-      });\n+  //       cy.wait('@deleteRequest1');\n+  //       cy.wait('@deleteRequest2');\n+  //       cy.wait('@deleteRequest3');\n+  //     });\n \n-      describe('on success', () => {\n-        beforeEach(() => {\n-          page.mockDelete(257334).as('deleteRequest1');\n-          page.mockDelete(257335).as('deleteRequest2');\n-          page.mockDelete(257336).as('deleteRequest3');\n+  //     describe('on success', () => {\n+  //       beforeEach(() => {\n+  //         page.mockDelete(257334).as('deleteRequest1');\n+  //         page.mockDelete(257335).as('deleteRequest2');\n+  //         page.mockDelete(257336).as('deleteRequest3');\n \n-          page.clearCompletedButton().click();\n+  //         page.clearCompletedButton().click();\n \n-          cy.wait('@deleteRequest1');\n-          cy.wait('@deleteRequest2');\n-          cy.wait('@deleteRequest3');\n-        });\n+  //         cy.wait('@deleteRequest1');\n+  //         cy.wait('@deleteRequest2');\n+  //         cy.wait('@deleteRequest3');\n+  //       });\n \n-        it('should remove all completed todos from the list', () => {\n-          todos.assertCount(2);\n-          todos.assertTitle(0, 'TypeScript');\n-          todos.assertTitle(1, 'React');\n-        });\n+  //       it('should remove all completed todos from the list', () => {\n+  //         todos.assertCount(2);\n+  //         todos.assertTitle(0, 'TypeScript');\n+  //         todos.assertTitle(1, 'React');\n+  //       });\n \n-        it('should disable ClearCompleted button', () => {\n-          page.clearCompletedButton().should('be.disabled');\n-        });\n+  //       it('should disable ClearCompleted button', () => {\n+  //         page.clearCompletedButton().should('be.disabled');\n+  //       });\n \n-        it('should focus the text field', () => {\n-          page.newTodoField().should('be.focused');\n-        });\n-      });\n+  //       it('should focus the text field', () => {\n+  //         page.newTodoField().should('be.focused');\n+  //       });\n+  //     });\n \n-      describe('on a single fail', () => {\n-        beforeEach(() => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n+  //     describe('on a single fail', () => {\n+  //       beforeEach(() => {\n+  //         // to prevent Cypress from failing the test on uncaught exception\n+  //         cy.once('uncaught:exception', () => false);\n \n-          page.mockDelete(257334).as('deleteRequest1');\n-          page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n-          page.mockDelete(257336).as('deleteRequest3');\n+  //         page.mockDelete(257334).as('deleteRequest1');\n+  //         page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n+  //         page.mockDelete(257336).as('deleteRequest3');\n \n-          page.clearCompletedButton().click();\n+  //         page.clearCompletedButton().click();\n \n-          cy.wait('@deleteRequest1');\n-          cy.wait('@deleteRequest2');\n-          cy.wait('@deleteRequest3');\n-        });\n+  //         cy.wait('@deleteRequest1');\n+  //         cy.wait('@deleteRequest2');\n+  //         cy.wait('@deleteRequest3');\n+  //       });\n \n-        it('should show an error message if any of the group deletions fails', () => {\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to delete a todo');\n-        });\n+  //       it('should show an error message if any of the group deletions fails', () => {\n+  //         errorMessage.assertVisible();\n+  //         errorMessage.assertText('Unable to delete a todo');\n+  //       });\n \n-        it('should remove todos with success responses and keep todos with errors', () => {\n-          todos.assertCount(3);\n-          todos.assertTitle(0, 'CSS');\n-          todos.assertTitle(1, 'TypeScript');\n-        });\n+  //       it('should remove todos with success responses and keep todos with errors', () => {\n+  //         todos.assertCount(3);\n+  //         todos.assertTitle(0, 'CSS');\n+  //         todos.assertTitle(1, 'TypeScript');\n+  //       });\n \n-        it('should not disable ClearCompleted button', () => {\n-          page.clearCompletedButton().should('not.be.disabled');\n-        });\n-      });\n-    });\n+  //       it('should not disable ClearCompleted button', () => {\n+  //         page.clearCompletedButton().should('not.be.disabled');\n+  //       });\n+  //     });\n+  //   });\n \n-    describe('with all todos completed', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n+  //   describe('with all todos completed', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n \n-        page.mockDelete(257334).as('deleteRequest1');\n-        page.mockDelete(257335).as('deleteRequest2');\n-        page.mockDelete(257336).as('deleteRequest3');\n-        page.mockDelete(257337).as('deleteRequest4');\n-        page.mockDelete(257338).as('deleteRequest5');\n+  //       page.mockDelete(257334).as('deleteRequest1');\n+  //       page.mockDelete(257335).as('deleteRequest2');\n+  //       page.mockDelete(257336).as('deleteRequest3');\n+  //       page.mockDelete(257337).as('deleteRequest4');\n+  //       page.mockDelete(257338).as('deleteRequest5');\n \n-        page.clearCompletedButton().click();\n+  //       page.clearCompletedButton().click();\n \n-        cy.wait('@deleteRequest1');\n-        cy.wait('@deleteRequest2');\n-        cy.wait('@deleteRequest3');\n-        cy.wait('@deleteRequest4');\n-        cy.wait('@deleteRequest5');\n-      });\n+  //       cy.wait('@deleteRequest1');\n+  //       cy.wait('@deleteRequest2');\n+  //       cy.wait('@deleteRequest3');\n+  //       cy.wait('@deleteRequest4');\n+  //       cy.wait('@deleteRequest5');\n+  //     });\n \n-      it('should hide todos after clearing all completed todos', () => {\n-        todos.assertCount(0);\n-      });\n+  //     it('should hide todos after clearing all completed todos', () => {\n+  //       todos.assertCount(0);\n+  //     });\n \n-      it('should hide footer after clearing all completed todos', () => {\n-        filter.assertHidden();\n-        page.clearCompletedButton().should('not.exist');\n-        page.todosCounter().should('not.exist');\n-      });\n-    });\n-  });\n+  //     it('should hide footer after clearing all completed todos', () => {\n+  //       filter.assertHidden();\n+  //       page.clearCompletedButton().should('not.exist');\n+  //       page.todosCounter().should('not.exist');\n+  //     });\n+  //   });\n+  // });\n \n   // describe('Todo Toggling', () => {\n   //   beforeEach(() => {\n   //     page.mockLoad().as('loadRequest');\n@@ -1448,1806 +1448,37 @@\n       //     cy.get('@renameCallback').should('not.be.called');\n       //   });\n       // });\n \n-      describe('on Escape', () => {\n-        it('should be closed', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should keep current title', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n-\n-          todos.assertTitle(0, 'HTML');\n-        });\n-\n-        it('should not send a request', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-      });\n-\n-      describe('on enter before recieved a response', () => {\n-        it('should send a request', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123{enter}');\n-\n-          cy.get('@renameCallback').should('have.callCount', 1);\n-        });\n-\n-        it('should show loader', () => {\n-          page.mockUpdate(257334);\n-\n-          todos.title(0).trigger('dblclick');\n-          page.pauseTimers();\n-          todos.titleField(0).type('123{enter}');\n-\n-          todos.assertLoading(0);\n-        });\n-\n-        // It depend on your implementation\n-        it.skip('should stay while waiting', () => {\n-          page.mockUpdate(257334);\n-\n-          todos.title(0).trigger('dblclick');\n-          page.pauseTimers();\n-          todos.titleField(0).type('123{enter}');\n-\n-          todos.titleField(0).should('exist');\n-        });\n-      });\n-\n-      describe('on success', () => {\n-        beforeEach(() => {\n-          page.mockUpdate(257334).as('renameRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear()\n-        });\n-\n-        it('should cancel loading', () => {\n-          todos.titleField(0).type('123{enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n-\n-          todos.assertNotLoading(0);\n-        });\n-\n-        it('should be closed', () => {\n-          todos.titleField(0).type('123{enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should show the updated title', () => {\n-          todos.titleField(0).type('Something{enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n-\n-          todos.assertTitle(0, 'Something');\n-        });\n-\n-        it('should show trim the new title', () => {\n-          todos.titleField(0).type('   Some new title      {enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n-\n-          todos.assertTitle(0, 'Some new title');\n-        });\n-      });\n-\n-      describe('on fail', () => {\n-        beforeEach(() => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123{enter}');\n-          cy.wait('@renameRequest');\n-        });\n-\n-        it('should cancel loading on fail', () => {\n-          page.flushJSTimers();\n-          todos.assertNotLoading(0);\n-        });\n-\n-        it('should stay open on fail', () => {\n-          todos.titleField(0).should('exist');\n-        });\n-\n-        it('should show error message', () => {\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to update a todo');\n-        });\n-\n-        it('should hide error message in 3s', () => {\n-          page.flushJSTimers(3000);\n-\n-          errorMessage.assertHidden();\n-        });\n-      });\n-\n-      describe('if title was not changed', () => {\n-        it('should not send a request on enter', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-\n-        it('should be close on enter', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should be closed on Escape', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{esc}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should preserve current title on save', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n-\n-          todos.assertTitle(0, 'HTML');\n-        });\n-      });\n-\n-      describe('if title became empty', () => {\n-        beforeEach(() => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear();\n-        });\n-\n-        it('should not send an update request on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-\n-        it('should send a delete request on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n-\n-          cy.wait('@deleteRequest');\n-        });\n-\n-        it('should show loading on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-\n-          page.pauseTimers();\n-          todos.titleField(0).type('{enter}');\n-\n-          todos.assertLoading(0);\n-        });\n-\n-        it('should delete a todo on success', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-\n-          todos.assertCount(4);\n-          todos.assertTitle(0, 'CSS');\n-        });\n-\n-        it('should show deleting error message on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to delete a todo')\n-        });\n-\n-        // this test may be unstable\n-        it.skip('should hide loader on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-          page.flushJSTimers();\n-\n-          todos.assertNotLoading(0);\n-        });\n-\n-        it('should stay open on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-\n-          todos.titleField(0).should('exist');\n-        });\n-\n-        it('should be closed on Escape', () => {\n-          todos.titleField(0).type('{esc}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should preserve current title on close', () => {\n-          todos.titleField(0).type('{esc}');\n-\n-          todos.title(0).should('have.text', 'HTML');\n-        });\n-      });\n-\n-      describe('on Blur', () => {\n-        it('should save', () => {\n-          page.mockUpdate(257334).as('renameRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear()\n-          todos.titleField(0).type('New title');\n-          todos.titleField(0).blur();\n-          cy.wait('@renameRequest');\n-\n-          // just in case\n-          page.flushJSTimers();\n-\n-          todos.assertTitle(0, 'New title');\n-        });\n-\n-        it('should cancel if title was not changed', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).blur();\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-          page.flushJSTimers();\n-          todos.titleField(0).should('not.exist');\n-          todos.assertTitle(0, 'HTML');\n-        });\n-\n-        it('should delete if title is empty', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear();\n-          todos.titleField(0).blur();\n-          cy.wait('@deleteRequest');\n-\n-          todos.assertCount(4);\n-          todos.assertTitle(0, 'CSS');\n-        })\n-      });\n-    });\n-  });\n-});\n-/// <reference types='cypress' />\n-/// <reference types='../support' />\n-\n-import mixedTodos from '../fixtures/todos.json';\n-\n-//#region Page Objects\n-const page = {\n-  toggleAllButton: () => cy.byDataCy('ToggleAllButton'),\n-  newTodoField: () => cy.byDataCy('NewTodoField'),\n-  todosCounter: () => cy.byDataCy('TodosCounter'),\n-  clearCompletedButton: () => cy.byDataCy('ClearCompletedButton'),\n-\n-  visit: (url = '/') => {\n-    cy.visit(url, {\n-      onBeforeLoad: win => win.localStorage.setItem('user', '{ \"id\": 1 }'),\n-    });\n-\n-    // to wait until React App is loaded\n-    cy.get('.todoapp__title').should('exist');\n-  },\n-  pauseTimers: () => cy.clock(),\n-\n-  flushJSTimers: (delay = 1000) => {\n-    cy.clock().then(clock => {\n-      clock.tick(delay);\n-      clock.restore();\n-    });\n-\n-    cy.wait(50);\n-  },\n-\n-  /**\n-   * @param {*} response - can be a valid response object or stub\n-   *\n-   * { body: [] }\n-   * { statusCode: 503: body: 'Service Unavailable' }\n-   * spy = cy.stub().callsFake(req => req.reply(response)).as('alias')\n-   */\n-  mockLoad: (response = { fixture: 'todos' }) => {\n-    return cy.intercept('**/todos?userId=*', response);\n-  },\n-  mockCreate: (response) => {\n-    const options = { method: 'POST', url: '**/todos' };\n-\n-    const spy = cy.stub()\n-      .callsFake(req => req.reply({\n-        statusCode: 201,\n-        body: { ...req.body, id: Math.random() },\n-      }))\n-      .as('createCallback');\n-\n-    return cy.intercept(options, response || spy);\n-  },\n-  mockDelete: (id, response) => {\n-    const options = { method: 'DELETE', url: `**/todos/${id}` };\n-\n-    return cy.intercept(options, response || { body: '1' });\n-  },\n-  mockUpdate: (id, response) => {\n-    const todo = mixedTodos.find(todo => todo.id === id) || {};\n-    const options = { method: 'PATCH', url: `**/todos/${id}` };\n-\n-    const spy = cy.stub()\n-      .callsFake(req => req.reply({ body: { ...todo, ...req.body, id } }))\n-      .as('updateCallback');\n-\n-    return cy.intercept(options, response || spy);\n-  },\n-};\n-\n-const todos = {\n-  el: index => cy.byDataCy('Todo').eq(index),\n-  deleteButton: index => todos.el(index).byDataCy('TodoDelete'),\n-  statusToggler: index => todos.el(index).byDataCy('TodoStatus'),\n-  title: index => todos.el(index).byDataCy('TodoTitle'),\n-  titleField: index => todos.el(index).byDataCy('TodoTitleField'),\n-\n-  assertCount: length => cy.byDataCy('Todo').should('have.length', length),\n-  assertTitle: (index, title) => todos.title(index).should('have.text', title),\n-  assertLoading: index => todos.el(index).byDataCy('TodoLoader').should('have.class', 'is-active'),\n-  assertNotLoading: index => todos.el(index).byDataCy('TodoLoader').should('not.have.class', 'is-active'),\n-  assertCompleted: index => todos.el(index).should('have.class', 'completed'),\n-  assertNotCompleted: index => todos.el(index).should('not.have.class', 'completed'),\n-};\n-\n-const errorMessage = {\n-  el: () => cy.byDataCy('ErrorNotification'),\n-  closeButton: () => errorMessage.el().byDataCy('HideErrorButton'),\n-  assertVisible: () => errorMessage.el().should('not.have.class', 'hidden'),\n-  assertHidden: () => errorMessage.el().should('have.class', 'hidden'),\n-  assertText: text => errorMessage.el().should('have.text', text),\n-};\n-\n-const FilterLinkKeys = {\n-  all: 'FilterLinkAll',\n-  active: 'FilterLinkActive',\n-  completed: 'FilterLinkCompleted',\n-};\n-\n-const filter = {\n-  el: () => cy.byDataCy('Filter'),\n-  link: type => cy.byDataCy(FilterLinkKeys[type]),\n-  assertVisible: () => filter.el().should('exist'),\n-  assertHidden: () => filter.el().should('not.exist'),\n-  assertSelected: type => filter.link(type).should('have.class', 'selected'),\n-  assertNotSelected: type => filter.link(type).should('not.have.class', 'selected'),\n-};\n-//#endregion\n-\n-let failed = false;\n-\n-Cypress.on('fail', (e) => {\n-  failed = true;\n-  throw e;\n-});\n-\n-describe('', () => {\n-  beforeEach(() => {\n-    if (failed) Cypress.runner.stop();\n-  });\n-\n-  // describe('Page with no todos', () => {\n-  //   it('should send 1 todos request', () => {\n-  //     const spy = cy.stub()\n-  //       .callsFake(req => req.reply({ body: [] }))\n-  //       .as('loadCallback')\n-\n-  //     page.mockLoad(spy).as('loadRequest');\n-  //     page.visit();\n-\n-  //     cy.wait('@loadRequest');\n-  //     cy.wait(500);\n-\n-  //     cy.get('@loadCallback').should('have.callCount', 1);\n-  //   });\n-\n-  //   describe('', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should have NewTodoField', () => {\n-  //       page.newTodoField().should('exist');\n-  //     });\n-\n-  //     it('should not have Todos', () => {\n-  //       todos.assertCount(0);\n-  //     });\n-\n-  //     it('should not have Footer', () => {\n-  //       filter.assertHidden();\n-  //       page.clearCompletedButton().should('not.exist');\n-  //       page.todosCounter().should('not.exist');\n-  //     });\n-\n-  //     it('should not show error message', () => {\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n-\n-  //   describe('on loading error', () => {\n-  //     beforeEach(() => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n-\n-  //       page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should show error', () => {\n-  //       errorMessage.assertVisible();\n-  //     });\n-\n-  //     it('should show correct message', () => {\n-  //       errorMessage.assertText('Unable to load todos');\n-  //     });\n-\n-  //     it('should hide error after 3 seconds', () => {\n-  //       // just in case\n-  //       cy.wait(50);\n-\n-  //       cy.clock();\n-  //       cy.tick(2500);\n-  //       errorMessage.assertVisible();\n-\n-  //       cy.tick(500);\n-  //       errorMessage.assertHidden();\n-  //     });\n-\n-  //     it('should hide error on close button click', () => {\n-  //       errorMessage.closeButton().click();\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n-  // });\n-\n-  // describe('Page with mixed todos', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad().as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n-  //   });\n-\n-  //   it('should have NewTodoField', () => {\n-  //     page.newTodoField().should('exist');\n-  //   });\n-\n-  //   it('should have all loaded todos', () => {\n-  //     todos.assertCount(5);\n-  //   });\n-\n-  //   it('should have delete buttons for every todo', () => {\n-  //     todos.deleteButton(0).should('exist');\n-  //   });\n-\n-  //   it('should not have loaders', () => {\n-  //     todos.assertNotLoading(0);\n-  //     todos.assertNotLoading(1);\n-  //     todos.assertNotLoading(2);\n-  //     todos.assertNotLoading(3);\n-  //     todos.assertNotLoading(4);\n-  //   })\n-\n-  //   it('should have correct todo titles', () => {\n-  //     todos.assertTitle(0, 'HTML');\n-  //     todos.assertTitle(1, 'CSS');\n-  //     todos.assertTitle(2, 'JS');\n-  //     todos.assertTitle(3, 'TypeScript');\n-  //     todos.assertTitle(4, 'React');\n-  //   });\n-\n-  //   it('should higlight all completed todos', () => {\n-  //     todos.assertCompleted(0);\n-  //     todos.assertCompleted(1);\n-  //     todos.assertCompleted(2);\n-  //   });\n-\n-  //   it('should not higlight not completed todos', () => {\n-  //     todos.assertNotCompleted(3);\n-  //     todos.assertNotCompleted(4);\n-  //   });\n-\n-  //   it('should have correct completed statuses', () => {\n-  //     todos.statusToggler(0).should('be.checked');\n-  //     todos.statusToggler(1).should('be.checked');\n-  //     todos.statusToggler(2).should('be.checked');\n-  //     todos.statusToggler(3).should('not.be.checked');\n-  //     todos.statusToggler(4).should('not.be.checked');\n-  //   });\n-\n-  //   it('should have Filter', () => {\n-  //     filter.assertVisible();\n-  //   });\n-\n-  //   it('should have todosCounter with a number of not completed todos', () => {\n-  //     page.todosCounter().should('have.text', '2 items left');\n-  //   });\n-\n-  //   it('should have clearCompletedButton', () => {\n-  //     page.clearCompletedButton().should('exist');\n-  //   });\n-\n-  //   it('should have Filter', () => {\n-  //     filter.assertVisible();\n-  //   });\n-\n-  //   it('should not show error message', () => {\n-  //     errorMessage.assertHidden();\n-  //   });\n-  // });\n-\n-  // describe('Filtering', () => {\n-  //   describe('with mixed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should have only filterLinkAll active', () => {\n-  //       filter.assertSelected('all');\n-  //       filter.assertNotSelected('active');\n-  //       filter.assertNotSelected('completed');\n-  //     });\n-\n-  //     it('should allow to select the active filter', () => {\n-  //       filter.link('active').click();\n-\n-  //       filter.assertNotSelected('all');\n-  //       filter.assertSelected('active');\n-  //       filter.assertNotSelected('completed');\n-  //     });\n-\n-  //     it('should show only active todos when active filter is selected', () => {\n-  //       filter.link('active').click();\n-\n-  //       todos.assertCount(2);\n-  //       todos.assertTitle(0, 'TypeScript');\n-  //       todos.assertTitle(1, 'React');\n-  //     });\n-\n-  //     it('should keep footer when active todos are shown', () => {\n-  //       filter.link('active').click();\n-\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //       filter.assertVisible();\n-  //       page.clearCompletedButton().should('exist');\n-  //     });\n-\n-  //     it('should allow to select the completed filter', () => {\n-  //       filter.link('completed').click();\n-\n-  //       filter.assertNotSelected('all');\n-  //       filter.assertNotSelected('active');\n-  //       filter.assertSelected('completed');\n-  //     });\n-\n-  //     it('should show only completed todos when completed filter is selected', () => {\n-  //       filter.link('completed').click();\n-\n-  //       todos.assertCount(3);\n-  //       todos.assertTitle(0, 'HTML');\n-  //       todos.assertTitle(1, 'CSS');\n-  //       todos.assertTitle(2, 'JS');\n-  //     });\n-\n-  //     it('should keep footer when completed todos are shown', () => {\n-  //       filter.link('completed').click();\n-\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //       filter.assertVisible();\n-  //       page.clearCompletedButton().should('exist');\n-  //     });\n-\n-  //     it('should allow to reset filter', () => {\n-  //       filter.link('completed').click();\n-  //       filter.link('all').click();\n-\n-  //       todos.assertCount(5);\n-  //       filter.assertSelected('all');\n-  //       filter.assertNotSelected('active');\n-  //       filter.assertNotSelected('completed');\n-  //     });\n-  //   });\n-\n-  //   describe('with active todos only', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should hide todos on completed selection', () => {\n-  //       filter.link('completed').click();\n-\n-  //       todos.assertCount(0);\n-  //     });\n-\n-  //     it('should keep footer on completed selection', () => {\n-  //       filter.link('completed').click();\n-  //       filter.assertVisible();\n-  //     });\n-\n-  //     it('should keep todos counter on completed selection', () => {\n-  //       filter.link('completed').click();\n-  //       page.todosCounter().should('have.text', '5 items left');\n-  //     });\n-  //   });\n-\n-  //   describe('with completed todos only', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-  //   });\n-  // });\n-\n-  // describe('Adding a todo', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad().as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n-  //   });\n-\n-  //   it('should focus text field by default', () => {\n-  //     page.newTodoField().should('be.focused');\n-  //   });\n-\n-  //   describe('if title is empty', () => {\n-  //     beforeEach(() => {\n-  //       page.mockCreate();\n-  //       page.newTodoField().type('{enter}');\n-  //     });\n-\n-  //     it('should not send a request', () => {\n-  //       cy.get('@createCallback').should('not.be.called');\n-  //     });\n-\n-  //     it('should keep text field focused', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n-\n-  //     it('should display an error message', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Title should not be empty');\n-  //     });\n-\n-  //     it('should hide an error message after 3 seconds', () => {\n-  //       // just in case\n-  //       cy.wait(50);\n-\n-  //       cy.clock();\n-  //       cy.tick(3000);\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n-\n-  //   describe('if title title has only whitespaces', () => {\n-  //     beforeEach(() => {\n-  //       page.mockCreate();\n-  //       page.newTodoField().type('     {enter}');\n-  //     });\n-\n-  //     it('should not send a request', () => {\n-  //       cy.get('@createCallback').should('not.be.called');\n-  //     });\n-\n-  //     it('should keep text field focused', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n-\n-  //     it('should display an error message', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Title should not be empty');\n-  //     });\n-\n-  //     it('should hide an error message after 3 seconds', () => {\n-  //       // just in case\n-  //       cy.wait(50);\n-\n-  //       cy.clock();\n-  //       cy.tick(3000);\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n-\n-  //   describe('after form submition before response is received', () => {\n-  //     beforeEach(() => {\n-  //       page.mockCreate();\n-  //       page.pauseTimers();\n-  //       page.newTodoField().type('Test Todo{enter}');\n-  //     });\n-\n-  //     it('should send a create request', () => {\n-  //       cy.tick(1000);\n-  //       cy.get('@createCallback').should('have.callCount', 1);\n-  //     });\n-\n-  //     it('should disable the input', () => {\n-  //       page.newTodoField().should('be.disabled');\n-  //     });\n-\n-  //     it('should keep entered text', () => {\n-  //       page.newTodoField().should('have.value', 'Test Todo');\n-  //     });\n-\n-  //     it('should create and show a temp TodoItem with Loader', () => {\n-  //       todos.assertCount(6);\n-  //       todos.assertLoading(5);\n-  //     });\n-\n-  //     it('should show a temp TodoItem with correct title', () => {\n-  //       todos.assertTitle(5, 'Test Todo');\n-  //     });\n-\n-  //     it('should show a not completed temp TodoItem', () => {\n-  //       todos.assertNotCompleted(5);\n-  //     });\n-\n-  //     it('should not show loaders for existing todos', () => {\n-  //       todos.assertNotLoading(0);\n-  //       todos.assertNotLoading(1);\n-  //       todos.assertNotLoading(2);\n-  //       todos.assertNotLoading(3);\n-  //       todos.assertNotLoading(4);\n-  //     });\n-\n-  //     it('should not update active counter', () => {\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n-  //   });\n-\n-  //   describe('on success response', () => {\n-  //     describe('', () => {\n-  //       beforeEach(() => {\n-  //         page.mockCreate().as('createRequest');\n-  //         page.newTodoField().type('Test Todo{enter}');\n-\n-  //         cy.wait('@createRequest');\n-  //       });\n-\n-  //       // this test may be flaky\n-  //       it.skip('should replace loader with a created todo', () => {\n-  //         page.flushJSTimers();\n-  //         todos.assertCount(6);\n-  //         todos.assertNotLoading(5);\n-  //       });\n-\n-  //       it('should add a todo with a correct title', () => {\n-  //         todos.assertTitle(5, 'Test Todo');\n-  //       });\n-\n-  //       it('should add a not completed todo', () => {\n-  //         todos.assertNotCompleted(5);\n-  //       });\n-\n-  //       it('should update active counter', () => {\n-  //         page.todosCounter().should('have.text', '3 items left');\n-  //       });\n-\n-  //       it('should enable the text field', () => {\n-  //         page.newTodoField().should('not.be.disabled');\n-  //       });\n-\n-  //       it('should not show error message', () => {\n-  //         errorMessage.assertHidden();\n-  //       });\n-\n-  //       it('should clear text field', () => {\n-  //         page.newTodoField().should('have.value', '');\n-  //       });\n-\n-  //       it('should focus text field', () => {\n-  //         page.newTodoField().should('be.focused');\n-  //       });\n-\n-  //       it('should allow to add one more todo', () => {\n-  //         page.mockCreate().as('createRequest2');\n-\n-  //         page.newTodoField().type('Hello world{enter}');\n-  //         cy.wait('@createRequest2');\n-  //         page.flushJSTimers();\n-\n-  //         todos.assertCount(7);\n-  //         // todos.assertNotLoading(6);\n-  //         todos.assertNotCompleted(6);\n-  //         todos.assertTitle(6, 'Hello world');\n-  //         page.todosCounter().should('have.text', '4 items left');\n-  //       });\n-  //     });\n-\n-  //     it('should add trimmed title', () => {\n-  //       page.mockCreate().as('createRequest');\n-\n-  //       page.newTodoField().type('  Other Title    {enter}');\n-  //       cy.wait('@createRequest');\n-\n-  //       // just in case\n-  //       page.flushJSTimers();\n-\n-  //       todos.assertTitle(5, 'Other Title');\n-  //     });\n-\n-  //     it('should keep current filter', () => {\n-  //       page.mockCreate().as('createRequest');\n-\n-  //       filter.link('active').click();\n-  //       page.newTodoField().type('Test Todo{enter}');\n-  //       cy.wait('@createRequest');\n-\n-  //       filter.assertSelected('active');\n-  //     });\n-  //   });\n-\n-  //   describe('on request fail', () => {\n-  //     beforeEach(() => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n-\n-  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('createRequest');\n-\n-  //       page.newTodoField().type('Test Todo{enter}');\n-\n-  //       cy.wait('@createRequest');\n-  //     });\n-\n-  //     it('should show an error message', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Unable to add a todo');\n-  //     });\n-\n-  //     it('should hide an error message in 3 seconds', () => {\n-  //       cy.clock();\n-  //       cy.tick(2500);\n-\n-  //       errorMessage.assertVisible();\n-\n-  //       cy.tick(500);\n-  //       errorMessage.assertHidden();\n-  //     });\n-\n-  //     it('should remove a temp TodoItem on request fail', () => {\n-  //       todos.assertCount(5);\n-  //       todos.assertTitle(4, 'React');\n-  //     });\n-\n-  //     it('should enable the text field on request fail', () => {\n-  //       page.newTodoField().should('not.be.disabled');\n-  //     });\n-\n-  //     it('should keep the entered text on request fail', () => {\n-  //       page.newTodoField().should('have.value', 'Test Todo');\n-  //     });\n-\n-  //     it('should focus text field', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n-\n-  //     it('should not update active counter', () => {\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n-\n-  //     it('should immediately hide an error message on new request', () => {\n-  //       page.newTodoField().type(`{enter}`);\n-  //       errorMessage.assertHidden();\n-  //     });\n-\n-  //     it('should show an error message again on a next fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n-\n-  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('createRequest2');\n-\n-  //       page.newTodoField().type(`{enter}`);\n-  //       cy.wait('@createRequest2');\n-\n-  //       errorMessage.assertVisible();\n-  //     });\n-\n-  //     it('should keep an error message for 3s after the last fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n-\n-  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('createRequest2');\n-\n-  //       cy.clock();\n-\n-  //       cy.tick(2000);\n-  //       page.newTodoField().type(`{enter}`);\n-  //       cy.tick(500);\n-  //       cy.wait('@createRequest2');\n-  //       cy.tick(2000);\n-\n-  //       errorMessage.assertVisible();\n-  //     });\n-\n-  //     it('should allow to add a todo', () => {\n-  //       page.mockCreate().as('createRequest2');\n-  //       page.newTodoField().type('{enter}');\n-\n-  //       cy.wait('@createRequest2');\n-  //       page.flushJSTimers();\n-\n-  //       todos.assertCount(6);\n-  //       // todos.assertNotLoading(5);\n-  //       todos.assertNotCompleted(5);\n-  //       todos.assertTitle(5, 'Test Todo');\n-\n-  //       page.todosCounter().should('have.text', '3 items left');\n-  //     });\n-  //   });\n-  // });\n-\n-  // describe('Adding a first todo', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad({ body: [] }).as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n-\n-  //     page.mockCreate().as('createRequest');\n-  //     page.newTodoField().type('First todo{enter}');\n-\n-  //     cy.wait('@createRequest');\n-  //   });\n-\n-  //   it('should show a new todos', () => {\n-  //     todos.assertCount(1);\n-  //     todos.assertTitle(0, 'First todo');\n-  //     todos.assertNotCompleted(0);\n-  //   });\n-\n-  //   it('should show Filter', () => {\n-  //     filter.assertVisible();\n-  //   });\n-\n-  //   it('should show todosCounter', () => {\n-  //     page.todosCounter().should('contain.text', '1 item');\n-  //   });\n-  // });\n-\n-  // describe('Individual Todo Deletion', () => {\n-  //   describe('Default behavior', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n-  //       page.mockDelete(257334);\n-  //       page.pauseTimers();\n-  //       todos.deleteButton(0).click();\n-\n-  //       todos.assertLoading(0);\n-  //     });\n-\n-  //     it('should not delete a todo before successful response', () => {\n-  //       page.mockDelete(257334);\n-  //       page.pauseTimers();\n-  //       todos.deleteButton(0).click();\n-\n-  //       todos.assertCount(5);\n-  //     });\n-\n-  //     it('should remove the todo from the list on a successful API response', () => {\n-  //       page.mockDelete(257334).as('deleteRequest');\n-\n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n-\n-  //       todos.assertCount(4);\n-  //       todos.assertTitle(0, 'CSS');\n-  //     });\n-\n-  //     it('should focus text field after todo deletion', () => {\n-  //       page.mockDelete(257334).as('deleteRequest');\n-\n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n-\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n-\n-  //     it('should not remove the todo from the list on an API error', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n-\n-  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n-\n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n-\n-  //       todos.assertCount(5);\n-  //       todos.assertTitle(0, 'HTML');\n-  //     });\n-\n-  //     it('should show an error message on an API error', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n-\n-  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n-\n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n-\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Unable to delete a todo');\n-  //     });\n-\n-  //     it('should adjust the active todo count correctly after successful deletion', () => {\n-  //       page.mockDelete(257338).as('deleteRequest');\n-  //       todos.deleteButton(4).click();\n-  //       cy.wait('@deleteRequest');\n-\n-  //       page.todosCounter().should('contain.text', '1 item');\n-  //     });\n-\n-  //     it('should not adjust the active todo count after failed deletion', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n-\n-  //       page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n-  //         .as('deleteRequest');\n-\n-  //       todos.deleteButton(4).click();\n-  //       cy.wait('@deleteRequest');\n-\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n-  //   });\n-\n-  //   describe('Last todo deletion', () => {\n-  //     beforeEach(() => {\n-  //       const todo = {\n-  //         \"id\": 257334,\n-  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-  //         \"userId\": 1,\n-  //         \"title\": \"HTML\",\n-  //         \"completed\": false\n-  //       };\n-\n-  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-\n-  //       page.mockDelete(257334);\n-  //       todos.deleteButton(0).click();\n-  //     });\n-\n-  //     it('should hide todos', () => {\n-  //       todos.assertCount(0);\n-  //     });\n-\n-  //     it('should hide footer', () => {\n-  //       filter.assertHidden();\n-  //       page.clearCompletedButton().should('not.exist');\n-  //       page.todosCounter().should('not.exist');\n-  //     });\n-\n-  //     it('should focus text field after todo deletion', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n-  //   });\n-  // });\n-\n-  describe('Group Todo Deletion', () => {\n-    describe('with no completed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should not have active ClearCompleted button', () => {\n-        page.clearCompletedButton().should('be.disabled');\n-      });\n-    });\n-\n-    describe('with some completed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should have ClearCompleted button enabled', () => {\n-        page.clearCompletedButton().should('not.be.disabled');\n-      });\n-\n-      it('should send individual deletion request for each completed todo', () => {\n-        page.mockDelete(257334).as('deleteRequest1');\n-        page.mockDelete(257335).as('deleteRequest2');\n-        page.mockDelete(257336).as('deleteRequest3');\n-\n-        page.clearCompletedButton().click();\n-\n-        cy.wait('@deleteRequest1');\n-        cy.wait('@deleteRequest2');\n-        cy.wait('@deleteRequest3');\n-      });\n-\n-      describe('on success', () => {\n-        beforeEach(() => {\n-          page.mockDelete(257334).as('deleteRequest1');\n-          page.mockDelete(257335).as('deleteRequest2');\n-          page.mockDelete(257336).as('deleteRequest3');\n-\n-          page.clearCompletedButton().click();\n-\n-          cy.wait('@deleteRequest1');\n-          cy.wait('@deleteRequest2');\n-          cy.wait('@deleteRequest3');\n-        });\n-\n-        it('should remove all completed todos from the list', () => {\n-          todos.assertCount(2);\n-          todos.assertTitle(0, 'TypeScript');\n-          todos.assertTitle(1, 'React');\n-        });\n-\n-        it('should disable ClearCompleted button', () => {\n-          page.clearCompletedButton().should('be.disabled');\n-        });\n-\n-        it('should focus the text field', () => {\n-          page.newTodoField().should('be.focused');\n-        });\n-      });\n-\n-      describe('on a single fail', () => {\n-        beforeEach(() => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334).as('deleteRequest1');\n-          page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n-          page.mockDelete(257336).as('deleteRequest3');\n-\n-          page.clearCompletedButton().click();\n-\n-          cy.wait('@deleteRequest1');\n-          cy.wait('@deleteRequest2');\n-          cy.wait('@deleteRequest3');\n-        });\n-\n-        it('should show an error message if any of the group deletions fails', () => {\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to delete a todo');\n-        });\n-\n-        it('should remove todos with success responses and keep todos with errors', () => {\n-          todos.assertCount(3);\n-          todos.assertTitle(0, 'CSS');\n-          todos.assertTitle(1, 'TypeScript');\n-        });\n-\n-        it('should not disable ClearCompleted button', () => {\n-          page.clearCompletedButton().should('not.be.disabled');\n-        });\n-      });\n-    });\n-\n-    describe('with all todos completed', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-\n-        page.mockDelete(257334).as('deleteRequest1');\n-        page.mockDelete(257335).as('deleteRequest2');\n-        page.mockDelete(257336).as('deleteRequest3');\n-        page.mockDelete(257337).as('deleteRequest4');\n-        page.mockDelete(257338).as('deleteRequest5');\n-\n-        page.clearCompletedButton().click();\n-\n-        cy.wait('@deleteRequest1');\n-        cy.wait('@deleteRequest2');\n-        cy.wait('@deleteRequest3');\n-        cy.wait('@deleteRequest4');\n-        cy.wait('@deleteRequest5');\n-      });\n-\n-      it('should hide todos after clearing all completed todos', () => {\n-        todos.assertCount(0);\n-      });\n-\n-      it('should hide footer after clearing all completed todos', () => {\n-        filter.assertHidden();\n-        page.clearCompletedButton().should('not.exist');\n-        page.todosCounter().should('not.exist');\n-      });\n-    });\n-  });\n-\n-  });\n-  describe('Todo Toggling', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n-\n-    describe('before receving response', () => {\n-      beforeEach(() => {\n-        page.mockUpdate(257334).as('updateRequest');\n-      });\n-\n-      it('should send an update request', () => {\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-      });\n-\n-      it('should show loader after click', () => {\n-        page.pauseTimers();\n-        todos.statusToggler(0).click();\n-\n-        todos.assertLoading(0);\n-      });\n-\n-      it('should not show error message after click', () => {\n-        page.pauseTimers();\n-        todos.statusToggler(0).click();\n-\n-        errorMessage.assertHidden();\n-      });\n-\n-      it('should not hide a todo if filtered', () => {\n-        filter.link('completed').click();\n-        page.pauseTimers();\n-        cy.tick(1000); // flush JS animation\n-        todos.statusToggler(0).click();\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-    });\n-\n-    describe('on success', () => {\n-      beforeEach(() => {\n-        page.mockUpdate(257334).as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-      });\n-\n-      it('should toggle a todo', () => {\n-        todos.assertNotCompleted(0);\n-        todos.statusToggler(0).should('not.be.checked');\n-      });\n-\n-      it('should cancel loading', () => {\n-        page.flushJSTimers();\n-        todos.assertNotLoading(0);\n-      });\n-\n-      it('should update the counter', () => {\n-        page.todosCounter().should('have.text', '3 items left');\n-      });\n-\n-      it('should not show an error message', () => {\n-        errorMessage.assertHidden();\n-      });\n-    });\n-\n-    describe('on fail', () => {\n-      beforeEach(() => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-          .as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-      });\n-\n-      it('should show an error', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Unable to update a todo');\n-      });\n-\n-      it('should not toggle a todo', () => {\n-        todos.assertCompleted(0);\n-        todos.statusToggler(0).should('be.checked');\n-      });\n-\n-      it('should cancel loading', () => {\n-        page.flushJSTimers();\n-        todos.assertNotLoading(0);\n-      });\n-\n-      it('should not update the counter', () => {\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-\n-      it('should allow to toggle again', () => {\n-        page.mockUpdate(257334).as('updateRequest2');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest2');\n-\n-        todos.assertNotCompleted(0);\n-      });\n-    });\n-\n-    describe('if filtered', () => {\n-      beforeEach(() => {\n-        filter.link('completed').click();\n-      });\n-\n-      it('should hide a todo on success', () => {\n-        page.mockUpdate(257334).as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-\n-        todos.assertCount(2);\n-        todos.assertTitle(0, 'CSS');\n-      });\n-\n-      it('should show a todo on success when selected an oposite filter', () => {\n-        page.mockUpdate(257334).as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        filter.link('active').click();\n-        cy.wait('@updateRequest');\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-\n-      it('should not hide a todo on fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-          .as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-    });\n-\n-\n-\n-\n-\n-\n-\n-  // describe('Toggle All Button', () => {\n-  //   describe('if there are no todos', () => {\n-  //     it('should not be visible while loading todos', () => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n-\n-  //       page.pauseTimers();\n-  //       page.visit();\n-\n-  //       page.toggleAllButton().should('not.exist');\n-  //     });\n-\n-  //     it('should not be visible when loaded', () => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-\n-  //       page.toggleAllButton().should('not.exist');\n-  //     });\n-\n-  //     it('should appear after adding a todo', () => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n-  //       page.mockCreate().as('createRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-\n-  //       page.newTodoField().type('First todo{enter}');\n-  //       cy.wait('@createRequest');\n-\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n-  //     it('should disappear after removing the last todo', () => {\n-  //       const todo = {\n-  //         \"id\": 257334,\n-  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-  //         \"userId\": 1,\n-  //         \"title\": \"HTML\",\n-  //         \"completed\": false\n-  //       };\n-\n-  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n-  //       page.mockDelete(257334).as('deleteRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-\n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n-\n-  //       page.toggleAllButton().should('not.exist');\n-  //     });\n-  //   });\n-\n-  //   describe('if all todos are completed', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n-  //     it('should stay visible after filtering out all the todos', () => {\n-  //       filter.link('active').click();\n-\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n-  //     it('should be active', () => {\n-  //       page.toggleAllButton().should('have.class', 'active');\n-  //     });\n-\n-  //     it('should become not active after toggling a todo', () => {\n-  //       page.mockUpdate(257335).as('updateRequest');\n-  //       todos.statusToggler(1).click();\n-  //       cy.wait('@updateRequest');\n-\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n-\n-  //     it('should stay active after a todo toggling fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n-\n-  //       page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n-  //       todos.statusToggler(1).click();\n-  //       cy.wait('@updateRequest');\n-\n-  //       page.toggleAllButton().should('have.class', 'active');\n-  //     });\n-\n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334).as('updateRequest4');\n-  //         page.mockUpdate(257335).as('updateRequest5');\n-  //         page.mockUpdate(257336).as('updateRequest6');\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n-\n-  //         page.toggleAllButton().click();\n-\n-  //         cy.wait('@updateRequest4');\n-  //         cy.wait('@updateRequest5');\n-  //         cy.wait('@updateRequest6');\n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n-\n-  //       it('should send requests for all todos', () => {\n-  //         // if before each pass\n-  //       });\n-\n-  //       it('should make all todos active', () => {\n-  //         todos.assertNotCompleted(0);\n-  //         todos.assertNotCompleted(1);\n-  //         todos.assertNotCompleted(2);\n-  //         todos.assertNotCompleted(3);\n-  //         todos.assertNotCompleted(4);\n-  //       });\n-\n-  //       it('should become not active', () => {\n-  //         page.toggleAllButton().should('not.have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n-\n-  //   describe('if all todos are active', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n-  //     it('should not be active', () => {\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n-\n-  //     it('should not become active after toggling a todo', () => {\n-  //       page.mockUpdate(257335).as('updateRequest');\n-  //       todos.statusToggler(1).click();\n-  //       cy.wait('@updateRequest');\n-\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n-\n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334).as('updateRequest4');\n-  //         page.mockUpdate(257335).as('updateRequest5');\n-  //         page.mockUpdate(257336).as('updateRequest6');\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n-\n-  //         page.toggleAllButton().click();\n-\n-  //         cy.wait('@updateRequest4');\n-  //         cy.wait('@updateRequest5');\n-  //         cy.wait('@updateRequest6');\n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n-\n-  //       it('should send requests for all todos', () => {\n-  //         // if before each pass\n-  //       });\n-\n-  //       it('should make all todos completed', () => {\n-  //         todos.assertCompleted(0);\n-  //         todos.assertCompleted(1);\n-  //         todos.assertCompleted(2);\n-  //         todos.assertCompleted(3);\n-  //         todos.assertCompleted(4);\n-  //       });\n-\n-  //       it('should become active', () => {\n-  //         page.toggleAllButton().should('have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n-\n-  //   describe('if there are some mixed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n-  //     it('should not be active', () => {\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n-\n-  //     it('should become active after completing all todos', () => {\n-  //       page.mockUpdate(257337).as('updateRequest1');\n-  //       page.mockUpdate(257338).as('updateRequest2');\n-\n-  //       todos.statusToggler(3).click();\n-  //       cy.wait('@updateRequest1');\n-  //       todos.statusToggler(4).click();\n-  //       cy.wait('@updateRequest2');\n-\n-  //       page.toggleAllButton().should('have.class', 'active');\n-  //     });\n-\n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334, cy.stub().as('update4'));\n-  //         page.mockUpdate(257335, cy.stub().as('update5'));\n-  //         page.mockUpdate(257336, cy.stub().as('update6'));\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n-\n-  //         page.toggleAllButton().click();\n-\n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n-\n-  //       it('should send requests only for not completed todos', () => {\n-  //         cy.get('@update4').should('not.be.called');\n-  //         cy.get('@update5').should('not.be.called');\n-  //         cy.get('@update6').should('not.be.called');\n-  //       });\n-\n-  //       it('should make all todos completed', () => {\n-  //         todos.assertCompleted(0);\n-  //         todos.assertCompleted(1);\n-  //         todos.assertCompleted(2);\n-  //         todos.assertCompleted(3);\n-  //         todos.assertCompleted(4);\n-  //       });\n-\n-  //       it('should become active', () => {\n-  //         page.toggleAllButton().should('have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n-  // });\n-\n-  describe('Renaming', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n-\n-    it('should not show forms by default', () => {\n-      todos.titleField(0).should('not.exist');\n-      todos.titleField(1).should('not.exist');\n-      todos.titleField(2).should('not.exist');\n-      todos.titleField(3).should('not.exist');\n-      todos.titleField(4).should('not.exist');\n-    });\n-\n-    describe('Edit Form', () => {\n-      // describe('by default', () => {\n-      //   it('should be opened on dblclick', () => {\n+      // describe('on Escape', () => {\n+      //   it('should be closed', () => {\n       //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n \n-      //     todos.titleField(0).should('exist');\n+      //     todos.titleField(0).should('not.exist');\n       //   });\n \n-      //   it('should have current value', () => {\n+      //   it('should keep current title', () => {\n       //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n \n-      //     todos.titleField(0).should('have.value', 'HTML');\n+      //     todos.assertTitle(0, 'HTML');\n       //   });\n \n-      //   it('should be focused', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.titleField(0).should('be.focused');\n-      //   });\n-\n-      //   it('should hide a title', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.title(0).should('not.exist');\n-      //   });\n-\n-      //   it('should hide DeleteButton', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.deleteButton(0).should('not.exist');\n-      //   });\n-\n-      //   it('should keep StatusToggler', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.statusToggler(0).should('exist');\n-      //   });\n-\n-      //   it('should not open forms for other todos', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.titleField(1).should('not.exist');\n-      //     todos.titleField(2).should('not.exist');\n-      //     todos.titleField(3).should('not.exist');\n-      //     todos.titleField(4).should('not.exist');\n-      //   });\n-\n-      //   it('should not send a request on change', () => {\n+      //   it('should not send a request', () => {\n       //     const spy = cy.stub()\n       //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n       //       .as('renameCallback');\n \n       //     page.mockUpdate(257334, spy);\n \n       //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123');\n+      //     todos.titleField(0).type('123123{esc}');\n \n       //     cy.get('@renameCallback').should('not.be.called');\n       //   });\n       // });\n \n-      describe('on Escape', () => {\n-        it('should be closed', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should keep current title', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n-\n-          todos.assertTitle(0, 'HTML');\n-        });\n-\n-        it('should not send a request', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-      });\n-\n       describe('on enter before recieved a response', () => {\n         it('should send a request', () => {\n           const spy = cy.stub()\n             .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n"
                },
                {
                    "date": 1715603313259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1388,96 +1388,96 @@\n       todos.titleField(4).should('not.exist');\n     });\n \n     describe('Edit Form', () => {\n-      // describe('by default', () => {\n-      //   it('should be opened on dblclick', () => {\n-      //     todos.title(0).trigger('dblclick');\n+      describe('by default', () => {\n+        it('should be opened on dblclick', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.titleField(0).should('exist');\n-      //   });\n+          todos.titleField(0).should('exist');\n+        });\n \n-      //   it('should have current value', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should have current value', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.titleField(0).should('have.value', 'HTML');\n-      //   });\n+          todos.titleField(0).should('have.value', 'HTML');\n+        });\n \n-      //   it('should be focused', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should be focused', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.titleField(0).should('be.focused');\n-      //   });\n+          todos.titleField(0).should('be.focused');\n+        });\n \n-      //   it('should hide a title', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should hide a title', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.title(0).should('not.exist');\n-      //   });\n+          todos.title(0).should('not.exist');\n+        });\n \n-      //   it('should hide DeleteButton', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should hide DeleteButton', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.deleteButton(0).should('not.exist');\n-      //   });\n+          todos.deleteButton(0).should('not.exist');\n+        });\n \n-      //   it('should keep StatusToggler', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should keep StatusToggler', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.statusToggler(0).should('exist');\n-      //   });\n+          todos.statusToggler(0).should('exist');\n+        });\n \n-      //   it('should not open forms for other todos', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should not open forms for other todos', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.titleField(1).should('not.exist');\n-      //     todos.titleField(2).should('not.exist');\n-      //     todos.titleField(3).should('not.exist');\n-      //     todos.titleField(4).should('not.exist');\n-      //   });\n+          todos.titleField(1).should('not.exist');\n+          todos.titleField(2).should('not.exist');\n+          todos.titleField(3).should('not.exist');\n+          todos.titleField(4).should('not.exist');\n+        });\n \n-      //   it('should not send a request on change', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n+        it('should not send a request on change', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n \n-      //     page.mockUpdate(257334, spy);\n+          page.mockUpdate(257334, spy);\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123');\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123');\n \n-      //     cy.get('@renameCallback').should('not.be.called');\n-      //   });\n-      // });\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+      });\n \n-      // describe('on Escape', () => {\n-      //   it('should be closed', () => {\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n+      describe('on Escape', () => {\n+        it('should be closed', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n \n-      //     todos.titleField(0).should('not.exist');\n-      //   });\n+          todos.titleField(0).should('not.exist');\n+        });\n \n-      //   it('should keep current title', () => {\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n+        it('should keep current title', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n \n-      //     todos.assertTitle(0, 'HTML');\n-      //   });\n+          todos.assertTitle(0, 'HTML');\n+        });\n \n-      //   it('should not send a request', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n+        it('should not send a request', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n \n-      //     page.mockUpdate(257334, spy);\n+          page.mockUpdate(257334, spy);\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n \n-      //     cy.get('@renameCallback').should('not.be.called');\n-      //   });\n-      // });\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+      });\n \n       describe('on enter before recieved a response', () => {\n         it('should send a request', () => {\n           const spy = cy.stub()\n"
                },
                {
                    "date": 1715603393419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1513,48 +1513,48 @@\n           todos.titleField(0).should('exist');\n         });\n       });\n \n-      describe('on success', () => {\n-        beforeEach(() => {\n-          page.mockUpdate(257334).as('renameRequest');\n+      // describe('on success', () => {\n+      //   beforeEach(() => {\n+      //     page.mockUpdate(257334).as('renameRequest');\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear()\n-        });\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).clear()\n+      //   });\n \n-        it('should cancel loading', () => {\n-          todos.titleField(0).type('123{enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n+      //   it('should cancel loading', () => {\n+      //     todos.titleField(0).type('123{enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n \n-          todos.assertNotLoading(0);\n-        });\n+      //     todos.assertNotLoading(0);\n+      //   });\n \n-        it('should be closed', () => {\n-          todos.titleField(0).type('123{enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n+      //   it('should be closed', () => {\n+      //     todos.titleField(0).type('123{enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n \n-          todos.titleField(0).should('not.exist');\n-        });\n+      //     todos.titleField(0).should('not.exist');\n+      //   });\n \n-        it('should show the updated title', () => {\n-          todos.titleField(0).type('Something{enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n+      //   it('should show the updated title', () => {\n+      //     todos.titleField(0).type('Something{enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n \n-          todos.assertTitle(0, 'Something');\n-        });\n+      //     todos.assertTitle(0, 'Something');\n+      //   });\n \n-        it('should show trim the new title', () => {\n-          todos.titleField(0).type('   Some new title      {enter}');\n-          cy.wait('@renameRequest');\n-          page.flushJSTimers();\n+      //   it('should show trim the new title', () => {\n+      //     todos.titleField(0).type('   Some new title      {enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n \n-          todos.assertTitle(0, 'Some new title');\n-        });\n-      });\n+      //     todos.assertTitle(0, 'Some new title');\n+      //   });\n+      // });\n \n       describe('on fail', () => {\n         beforeEach(() => {\n           // to prevent Cypress from failing the test on uncaught exception\n"
                },
                {
                    "date": 1715604145580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1571,11 +1571,11 @@\n           page.flushJSTimers();\n           todos.assertNotLoading(0);\n         });\n \n-        it('should stay open on fail', () => {\n-          todos.titleField(0).should('exist');\n-        });\n+        // it('should stay open on fail', () => {\n+        //   todos.titleField(0).should('exist');\n+        // });\n \n         it('should show error message', () => {\n           errorMessage.assertVisible();\n           errorMessage.assertText('Unable to update a todo');\n"
                },
                {
                    "date": 1715604566593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1571,11 +1571,11 @@\n           page.flushJSTimers();\n           todos.assertNotLoading(0);\n         });\n \n-        // it('should stay open on fail', () => {\n-        //   todos.titleField(0).should('exist');\n-        // });\n+        it('should stay open on fail', () => {\n+          todos.titleField(0).should('exist');\n+        });\n \n         it('should show error message', () => {\n           errorMessage.assertVisible();\n           errorMessage.assertText('Unable to update a todo');\n"
                },
                {
                    "date": 1715604977628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1388,132 +1388,132 @@\n       todos.titleField(4).should('not.exist');\n     });\n \n     describe('Edit Form', () => {\n-      describe('by default', () => {\n-        it('should be opened on dblclick', () => {\n-          todos.title(0).trigger('dblclick');\n+      // describe('by default', () => {\n+      //   it('should be opened on dblclick', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.titleField(0).should('exist');\n-        });\n+      //     todos.titleField(0).should('exist');\n+      //   });\n \n-        it('should have current value', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should have current value', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.titleField(0).should('have.value', 'HTML');\n-        });\n+      //     todos.titleField(0).should('have.value', 'HTML');\n+      //   });\n \n-        it('should be focused', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should be focused', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.titleField(0).should('be.focused');\n-        });\n+      //     todos.titleField(0).should('be.focused');\n+      //   });\n \n-        it('should hide a title', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should hide a title', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.title(0).should('not.exist');\n-        });\n+      //     todos.title(0).should('not.exist');\n+      //   });\n \n-        it('should hide DeleteButton', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should hide DeleteButton', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.deleteButton(0).should('not.exist');\n-        });\n+      //     todos.deleteButton(0).should('not.exist');\n+      //   });\n \n-        it('should keep StatusToggler', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should keep StatusToggler', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.statusToggler(0).should('exist');\n-        });\n+      //     todos.statusToggler(0).should('exist');\n+      //   });\n \n-        it('should not open forms for other todos', () => {\n-          todos.title(0).trigger('dblclick');\n+      //   it('should not open forms for other todos', () => {\n+      //     todos.title(0).trigger('dblclick');\n \n-          todos.titleField(1).should('not.exist');\n-          todos.titleField(2).should('not.exist');\n-          todos.titleField(3).should('not.exist');\n-          todos.titleField(4).should('not.exist');\n-        });\n+      //     todos.titleField(1).should('not.exist');\n+      //     todos.titleField(2).should('not.exist');\n+      //     todos.titleField(3).should('not.exist');\n+      //     todos.titleField(4).should('not.exist');\n+      //   });\n \n-        it('should not send a request on change', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n+      //   it('should not send a request on change', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n \n-          page.mockUpdate(257334, spy);\n+      //     page.mockUpdate(257334, spy);\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123');\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123');\n \n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-      });\n+      //     cy.get('@renameCallback').should('not.be.called');\n+      //   });\n+      // });\n \n-      describe('on Escape', () => {\n-        it('should be closed', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n+      // describe('on Escape', () => {\n+      //   it('should be closed', () => {\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n \n-          todos.titleField(0).should('not.exist');\n-        });\n+      //     todos.titleField(0).should('not.exist');\n+      //   });\n \n-        it('should keep current title', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n+      //   it('should keep current title', () => {\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n \n-          todos.assertTitle(0, 'HTML');\n-        });\n+      //     todos.assertTitle(0, 'HTML');\n+      //   });\n \n-        it('should not send a request', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n+      //   it('should not send a request', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n \n-          page.mockUpdate(257334, spy);\n+      //     page.mockUpdate(257334, spy);\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123123{esc}');\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n \n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-      });\n+      //     cy.get('@renameCallback').should('not.be.called');\n+      //   });\n+      // });\n \n-      describe('on enter before recieved a response', () => {\n-        it('should send a request', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n+      // describe('on enter before recieved a response', () => {\n+      //   it('should send a request', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n \n-          page.mockUpdate(257334, spy);\n+      //     page.mockUpdate(257334, spy);\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123{enter}');\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123{enter}');\n \n-          cy.get('@renameCallback').should('have.callCount', 1);\n-        });\n+      //     cy.get('@renameCallback').should('have.callCount', 1);\n+      //   });\n \n-        it('should show loader', () => {\n-          page.mockUpdate(257334);\n+      //   it('should show loader', () => {\n+      //     page.mockUpdate(257334);\n \n-          todos.title(0).trigger('dblclick');\n-          page.pauseTimers();\n-          todos.titleField(0).type('123{enter}');\n+      //     todos.title(0).trigger('dblclick');\n+      //     page.pauseTimers();\n+      //     todos.titleField(0).type('123{enter}');\n \n-          todos.assertLoading(0);\n-        });\n+      //     todos.assertLoading(0);\n+      //   });\n \n-        // It depend on your implementation\n-        it.skip('should stay while waiting', () => {\n-          page.mockUpdate(257334);\n+      //   // It depend on your implementation\n+      //   it.skip('should stay while waiting', () => {\n+      //     page.mockUpdate(257334);\n \n-          todos.title(0).trigger('dblclick');\n-          page.pauseTimers();\n-          todos.titleField(0).type('123{enter}');\n+      //     todos.title(0).trigger('dblclick');\n+      //     page.pauseTimers();\n+      //     todos.titleField(0).type('123{enter}');\n \n-          todos.titleField(0).should('exist');\n-        });\n-      });\n+      //     todos.titleField(0).should('exist');\n+      //   });\n+      // });\n \n       // describe('on success', () => {\n       //   beforeEach(() => {\n       //     page.mockUpdate(257334).as('renameRequest');\n"
                },
                {
                    "date": 1715618656946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1720,38 +1720,38 @@\n         });\n       });\n \n       describe('on Blur', () => {\n-        it('should save', () => {\n-          page.mockUpdate(257334).as('renameRequest');\n+        // it('should save', () => {\n+        //   page.mockUpdate(257334).as('renameRequest');\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear()\n-          todos.titleField(0).type('New title');\n-          todos.titleField(0).blur();\n-          cy.wait('@renameRequest');\n+        //   todos.title(0).trigger('dblclick');\n+        //   todos.titleField(0).clear()\n+        //   todos.titleField(0).type('New title');\n+        //   todos.titleField(0).blur();\n+        //   cy.wait('@renameRequest');\n \n-          // just in case\n-          page.flushJSTimers();\n+        //   // just in case\n+        //   page.flushJSTimers();\n \n-          todos.assertTitle(0, 'New title');\n-        });\n+        //   todos.assertTitle(0, 'New title');\n+        // });\n \n-        it('should cancel if title was not changed', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n+        // it('should cancel if title was not changed', () => {\n+        //   const spy = cy.stub()\n+        //     .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+        //     .as('renameCallback');\n \n-          page.mockUpdate(257334, spy);\n+        //   page.mockUpdate(257334, spy);\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).blur();\n+        //   todos.title(0).trigger('dblclick');\n+        //   todos.titleField(0).blur();\n \n-          cy.get('@renameCallback').should('not.be.called');\n-          page.flushJSTimers();\n-          todos.titleField(0).should('not.exist');\n-          todos.assertTitle(0, 'HTML');\n-        });\n+        //   cy.get('@renameCallback').should('not.be.called');\n+        //   page.flushJSTimers();\n+        //   todos.titleField(0).should('not.exist');\n+        //   todos.assertTitle(0, 'HTML');\n+        // });\n \n         it('should delete if title is empty', () => {\n           page.mockDelete(257334).as('deleteRequest');\n \n"
                },
                {
                    "date": 1715618869091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,1641 +118,1641 @@\n   beforeEach(() => {\n     if (failed) Cypress.runner.stop();\n   });\n \n-  // describe('Page with no todos', () => {\n-  //   it('should send 1 todos request', () => {\n-  //     const spy = cy.stub()\n-  //       .callsFake(req => req.reply({ body: [] }))\n-  //       .as('loadCallback')\n+  // // describe('Page with no todos', () => {\n+  // //   it('should send 1 todos request', () => {\n+  // //     const spy = cy.stub()\n+  // //       .callsFake(req => req.reply({ body: [] }))\n+  // //       .as('loadCallback')\n \n-  //     page.mockLoad(spy).as('loadRequest');\n-  //     page.visit();\n+  // //     page.mockLoad(spy).as('loadRequest');\n+  // //     page.visit();\n \n-  //     cy.wait('@loadRequest');\n-  //     cy.wait(500);\n+  // //     cy.wait('@loadRequest');\n+  // //     cy.wait(500);\n \n-  //     cy.get('@loadCallback').should('have.callCount', 1);\n-  //   });\n+  // //     cy.get('@loadCallback').should('have.callCount', 1);\n+  // //   });\n \n-  //   describe('', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  // //   describe('', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad({ body: [] }).as('loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n \n-  //     it('should have NewTodoField', () => {\n-  //       page.newTodoField().should('exist');\n-  //     });\n+  // //     it('should have NewTodoField', () => {\n+  // //       page.newTodoField().should('exist');\n+  // //     });\n \n-  //     it('should not have Todos', () => {\n-  //       todos.assertCount(0);\n-  //     });\n+  // //     it('should not have Todos', () => {\n+  // //       todos.assertCount(0);\n+  // //     });\n \n-  //     it('should not have Footer', () => {\n-  //       filter.assertHidden();\n-  //       page.clearCompletedButton().should('not.exist');\n-  //       page.todosCounter().should('not.exist');\n-  //     });\n+  // //     it('should not have Footer', () => {\n+  // //       filter.assertHidden();\n+  // //       page.clearCompletedButton().should('not.exist');\n+  // //       page.todosCounter().should('not.exist');\n+  // //     });\n \n-  //     it('should not show error message', () => {\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n+  // //     it('should not show error message', () => {\n+  // //       errorMessage.assertHidden();\n+  // //     });\n+  // //   });\n \n-  //   describe('on loading error', () => {\n-  //     beforeEach(() => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+  // //   describe('on loading error', () => {\n+  // //     beforeEach(() => {\n+  // //       // to prevent Cypress from failing the test on uncaught exception\n+  // //       cy.once('uncaught:exception', () => false);\n \n-  //       page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  // //       page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n \n-  //     it('should show error', () => {\n-  //       errorMessage.assertVisible();\n-  //     });\n+  // //     it('should show error', () => {\n+  // //       errorMessage.assertVisible();\n+  // //     });\n \n-  //     it('should show correct message', () => {\n-  //       errorMessage.assertText('Unable to load todos');\n-  //     });\n+  // //     it('should show correct message', () => {\n+  // //       errorMessage.assertText('Unable to load todos');\n+  // //     });\n \n-  //     it('should hide error after 3 seconds', () => {\n-  //       // just in case\n-  //       cy.wait(50);\n+  // //     it('should hide error after 3 seconds', () => {\n+  // //       // just in case\n+  // //       cy.wait(50);\n \n-  //       cy.clock();\n-  //       cy.tick(2500);\n-  //       errorMessage.assertVisible();\n+  // //       cy.clock();\n+  // //       cy.tick(2500);\n+  // //       errorMessage.assertVisible();\n \n-  //       cy.tick(500);\n-  //       errorMessage.assertHidden();\n-  //     });\n+  // //       cy.tick(500);\n+  // //       errorMessage.assertHidden();\n+  // //     });\n \n-  //     it('should hide error on close button click', () => {\n-  //       errorMessage.closeButton().click();\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n-  // });\n+  // //     it('should hide error on close button click', () => {\n+  // //       errorMessage.closeButton().click();\n+  // //       errorMessage.assertHidden();\n+  // //     });\n+  // //   });\n+  // // });\n \n-  // describe('Page with mixed todos', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad().as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n-  //   });\n+  // // describe('Page with mixed todos', () => {\n+  // //   beforeEach(() => {\n+  // //     page.mockLoad().as('loadRequest');\n+  // //     page.visit();\n+  // //     cy.wait('@loadRequest');\n+  // //   });\n \n-  //   it('should have NewTodoField', () => {\n-  //     page.newTodoField().should('exist');\n-  //   });\n+  // //   it('should have NewTodoField', () => {\n+  // //     page.newTodoField().should('exist');\n+  // //   });\n \n-  //   it('should have all loaded todos', () => {\n-  //     todos.assertCount(5);\n-  //   });\n+  // //   it('should have all loaded todos', () => {\n+  // //     todos.assertCount(5);\n+  // //   });\n \n-  //   it('should have delete buttons for every todo', () => {\n-  //     todos.deleteButton(0).should('exist');\n-  //   });\n+  // //   it('should have delete buttons for every todo', () => {\n+  // //     todos.deleteButton(0).should('exist');\n+  // //   });\n \n-  //   it('should not have loaders', () => {\n-  //     todos.assertNotLoading(0);\n-  //     todos.assertNotLoading(1);\n-  //     todos.assertNotLoading(2);\n-  //     todos.assertNotLoading(3);\n-  //     todos.assertNotLoading(4);\n-  //   })\n+  // //   it('should not have loaders', () => {\n+  // //     todos.assertNotLoading(0);\n+  // //     todos.assertNotLoading(1);\n+  // //     todos.assertNotLoading(2);\n+  // //     todos.assertNotLoading(3);\n+  // //     todos.assertNotLoading(4);\n+  // //   })\n \n-  //   it('should have correct todo titles', () => {\n-  //     todos.assertTitle(0, 'HTML');\n-  //     todos.assertTitle(1, 'CSS');\n-  //     todos.assertTitle(2, 'JS');\n-  //     todos.assertTitle(3, 'TypeScript');\n-  //     todos.assertTitle(4, 'React');\n-  //   });\n+  // //   it('should have correct todo titles', () => {\n+  // //     todos.assertTitle(0, 'HTML');\n+  // //     todos.assertTitle(1, 'CSS');\n+  // //     todos.assertTitle(2, 'JS');\n+  // //     todos.assertTitle(3, 'TypeScript');\n+  // //     todos.assertTitle(4, 'React');\n+  // //   });\n \n-  //   it('should higlight all completed todos', () => {\n-  //     todos.assertCompleted(0);\n-  //     todos.assertCompleted(1);\n-  //     todos.assertCompleted(2);\n-  //   });\n+  // //   it('should higlight all completed todos', () => {\n+  // //     todos.assertCompleted(0);\n+  // //     todos.assertCompleted(1);\n+  // //     todos.assertCompleted(2);\n+  // //   });\n \n-  //   it('should not higlight not completed todos', () => {\n-  //     todos.assertNotCompleted(3);\n-  //     todos.assertNotCompleted(4);\n-  //   });\n+  // //   it('should not higlight not completed todos', () => {\n+  // //     todos.assertNotCompleted(3);\n+  // //     todos.assertNotCompleted(4);\n+  // //   });\n \n-  //   it('should have correct completed statuses', () => {\n-  //     todos.statusToggler(0).should('be.checked');\n-  //     todos.statusToggler(1).should('be.checked');\n-  //     todos.statusToggler(2).should('be.checked');\n-  //     todos.statusToggler(3).should('not.be.checked');\n-  //     todos.statusToggler(4).should('not.be.checked');\n-  //   });\n+  // //   it('should have correct completed statuses', () => {\n+  // //     todos.statusToggler(0).should('be.checked');\n+  // //     todos.statusToggler(1).should('be.checked');\n+  // //     todos.statusToggler(2).should('be.checked');\n+  // //     todos.statusToggler(3).should('not.be.checked');\n+  // //     todos.statusToggler(4).should('not.be.checked');\n+  // //   });\n \n-  //   it('should have Filter', () => {\n-  //     filter.assertVisible();\n-  //   });\n+  // //   it('should have Filter', () => {\n+  // //     filter.assertVisible();\n+  // //   });\n \n-  //   it('should have todosCounter with a number of not completed todos', () => {\n-  //     page.todosCounter().should('have.text', '2 items left');\n-  //   });\n+  // //   it('should have todosCounter with a number of not completed todos', () => {\n+  // //     page.todosCounter().should('have.text', '2 items left');\n+  // //   });\n \n-  //   it('should have clearCompletedButton', () => {\n-  //     page.clearCompletedButton().should('exist');\n-  //   });\n+  // //   it('should have clearCompletedButton', () => {\n+  // //     page.clearCompletedButton().should('exist');\n+  // //   });\n \n-  //   it('should have Filter', () => {\n-  //     filter.assertVisible();\n-  //   });\n+  // //   it('should have Filter', () => {\n+  // //     filter.assertVisible();\n+  // //   });\n \n-  //   it('should not show error message', () => {\n-  //     errorMessage.assertHidden();\n-  //   });\n-  // });\n+  // //   it('should not show error message', () => {\n+  // //     errorMessage.assertHidden();\n+  // //   });\n+  // // });\n \n-  // describe('Filtering', () => {\n-  //   describe('with mixed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  // // describe('Filtering', () => {\n+  // //   describe('with mixed todos', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad().as('loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n \n-  //     it('should have only filterLinkAll active', () => {\n-  //       filter.assertSelected('all');\n-  //       filter.assertNotSelected('active');\n-  //       filter.assertNotSelected('completed');\n-  //     });\n+  // //     it('should have only filterLinkAll active', () => {\n+  // //       filter.assertSelected('all');\n+  // //       filter.assertNotSelected('active');\n+  // //       filter.assertNotSelected('completed');\n+  // //     });\n \n-  //     it('should allow to select the active filter', () => {\n-  //       filter.link('active').click();\n+  // //     it('should allow to select the active filter', () => {\n+  // //       filter.link('active').click();\n \n-  //       filter.assertNotSelected('all');\n-  //       filter.assertSelected('active');\n-  //       filter.assertNotSelected('completed');\n-  //     });\n+  // //       filter.assertNotSelected('all');\n+  // //       filter.assertSelected('active');\n+  // //       filter.assertNotSelected('completed');\n+  // //     });\n \n-  //     it('should show only active todos when active filter is selected', () => {\n-  //       filter.link('active').click();\n+  // //     it('should show only active todos when active filter is selected', () => {\n+  // //       filter.link('active').click();\n \n-  //       todos.assertCount(2);\n-  //       todos.assertTitle(0, 'TypeScript');\n-  //       todos.assertTitle(1, 'React');\n-  //     });\n+  // //       todos.assertCount(2);\n+  // //       todos.assertTitle(0, 'TypeScript');\n+  // //       todos.assertTitle(1, 'React');\n+  // //     });\n \n-  //     it('should keep footer when active todos are shown', () => {\n-  //       filter.link('active').click();\n+  // //     it('should keep footer when active todos are shown', () => {\n+  // //       filter.link('active').click();\n \n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //       filter.assertVisible();\n-  //       page.clearCompletedButton().should('exist');\n-  //     });\n+  // //       page.todosCounter().should('have.text', '2 items left');\n+  // //       filter.assertVisible();\n+  // //       page.clearCompletedButton().should('exist');\n+  // //     });\n \n-  //     it('should allow to select the completed filter', () => {\n-  //       filter.link('completed').click();\n+  // //     it('should allow to select the completed filter', () => {\n+  // //       filter.link('completed').click();\n \n-  //       filter.assertNotSelected('all');\n-  //       filter.assertNotSelected('active');\n-  //       filter.assertSelected('completed');\n-  //     });\n+  // //       filter.assertNotSelected('all');\n+  // //       filter.assertNotSelected('active');\n+  // //       filter.assertSelected('completed');\n+  // //     });\n \n-  //     it('should show only completed todos when completed filter is selected', () => {\n-  //       filter.link('completed').click();\n+  // //     it('should show only completed todos when completed filter is selected', () => {\n+  // //       filter.link('completed').click();\n \n-  //       todos.assertCount(3);\n-  //       todos.assertTitle(0, 'HTML');\n-  //       todos.assertTitle(1, 'CSS');\n-  //       todos.assertTitle(2, 'JS');\n-  //     });\n+  // //       todos.assertCount(3);\n+  // //       todos.assertTitle(0, 'HTML');\n+  // //       todos.assertTitle(1, 'CSS');\n+  // //       todos.assertTitle(2, 'JS');\n+  // //     });\n \n-  //     it('should keep footer when completed todos are shown', () => {\n-  //       filter.link('completed').click();\n+  // //     it('should keep footer when completed todos are shown', () => {\n+  // //       filter.link('completed').click();\n \n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //       filter.assertVisible();\n-  //       page.clearCompletedButton().should('exist');\n-  //     });\n+  // //       page.todosCounter().should('have.text', '2 items left');\n+  // //       filter.assertVisible();\n+  // //       page.clearCompletedButton().should('exist');\n+  // //     });\n \n-  //     it('should allow to reset filter', () => {\n-  //       filter.link('completed').click();\n-  //       filter.link('all').click();\n+  // //     it('should allow to reset filter', () => {\n+  // //       filter.link('completed').click();\n+  // //       filter.link('all').click();\n \n-  //       todos.assertCount(5);\n-  //       filter.assertSelected('all');\n-  //       filter.assertNotSelected('active');\n-  //       filter.assertNotSelected('completed');\n-  //     });\n-  //   });\n+  // //       todos.assertCount(5);\n+  // //       filter.assertSelected('all');\n+  // //       filter.assertNotSelected('active');\n+  // //       filter.assertNotSelected('completed');\n+  // //     });\n+  // //   });\n \n-  //   describe('with active todos only', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  // //   describe('with active todos only', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n \n-  //     it('should hide todos on completed selection', () => {\n-  //       filter.link('completed').click();\n+  // //     it('should hide todos on completed selection', () => {\n+  // //       filter.link('completed').click();\n \n-  //       todos.assertCount(0);\n-  //     });\n+  // //       todos.assertCount(0);\n+  // //     });\n \n-  //     it('should keep footer on completed selection', () => {\n-  //       filter.link('completed').click();\n-  //       filter.assertVisible();\n-  //     });\n+  // //     it('should keep footer on completed selection', () => {\n+  // //       filter.link('completed').click();\n+  // //       filter.assertVisible();\n+  // //     });\n \n-  //     it('should keep todos counter on completed selection', () => {\n-  //       filter.link('completed').click();\n-  //       page.todosCounter().should('have.text', '5 items left');\n-  //     });\n-  //   });\n+  // //     it('should keep todos counter on completed selection', () => {\n+  // //       filter.link('completed').click();\n+  // //       page.todosCounter().should('have.text', '5 items left');\n+  // //     });\n+  // //   });\n \n-  //   describe('with completed todos only', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-  //   });\n-  // });\n+  // //   describe('with completed todos only', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n+  // //   });\n+  // // });\n \n-  // describe('Adding a todo', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad().as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n-  //   });\n+  // // describe('Adding a todo', () => {\n+  // //   beforeEach(() => {\n+  // //     page.mockLoad().as('loadRequest');\n+  // //     page.visit();\n+  // //     cy.wait('@loadRequest');\n+  // //   });\n \n-  //   it('should focus text field by default', () => {\n-  //     page.newTodoField().should('be.focused');\n-  //   });\n+  // //   it('should focus text field by default', () => {\n+  // //     page.newTodoField().should('be.focused');\n+  // //   });\n \n-  //   describe('if title is empty', () => {\n-  //     beforeEach(() => {\n-  //       page.mockCreate();\n-  //       page.newTodoField().type('{enter}');\n-  //     });\n+  // //   describe('if title is empty', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockCreate();\n+  // //       page.newTodoField().type('{enter}');\n+  // //     });\n \n-  //     it('should not send a request', () => {\n-  //       cy.get('@createCallback').should('not.be.called');\n-  //     });\n+  // //     it('should not send a request', () => {\n+  // //       cy.get('@createCallback').should('not.be.called');\n+  // //     });\n \n-  //     it('should keep text field focused', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n+  // //     it('should keep text field focused', () => {\n+  // //       page.newTodoField().should('be.focused');\n+  // //     });\n \n-  //     it('should display an error message', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Title should not be empty');\n-  //     });\n+  // //     it('should display an error message', () => {\n+  // //       errorMessage.assertVisible();\n+  // //       errorMessage.assertText('Title should not be empty');\n+  // //     });\n \n-  //     it('should hide an error message after 3 seconds', () => {\n-  //       // just in case\n-  //       cy.wait(50);\n+  // //     it('should hide an error message after 3 seconds', () => {\n+  // //       // just in case\n+  // //       cy.wait(50);\n \n-  //       cy.clock();\n-  //       cy.tick(3000);\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n+  // //       cy.clock();\n+  // //       cy.tick(3000);\n+  // //       errorMessage.assertHidden();\n+  // //     });\n+  // //   });\n \n-  //   describe('if title title has only whitespaces', () => {\n-  //     beforeEach(() => {\n-  //       page.mockCreate();\n-  //       page.newTodoField().type('     {enter}');\n-  //     });\n+  // //   describe('if title title has only whitespaces', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockCreate();\n+  // //       page.newTodoField().type('     {enter}');\n+  // //     });\n \n-  //     it('should not send a request', () => {\n-  //       cy.get('@createCallback').should('not.be.called');\n-  //     });\n+  // //     it('should not send a request', () => {\n+  // //       cy.get('@createCallback').should('not.be.called');\n+  // //     });\n \n-  //     it('should keep text field focused', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n+  // //     it('should keep text field focused', () => {\n+  // //       page.newTodoField().should('be.focused');\n+  // //     });\n \n-  //     it('should display an error message', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Title should not be empty');\n-  //     });\n+  // //     it('should display an error message', () => {\n+  // //       errorMessage.assertVisible();\n+  // //       errorMessage.assertText('Title should not be empty');\n+  // //     });\n \n-  //     it('should hide an error message after 3 seconds', () => {\n-  //       // just in case\n-  //       cy.wait(50);\n+  // //     it('should hide an error message after 3 seconds', () => {\n+  // //       // just in case\n+  // //       cy.wait(50);\n \n-  //       cy.clock();\n-  //       cy.tick(3000);\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n+  // //       cy.clock();\n+  // //       cy.tick(3000);\n+  // //       errorMessage.assertHidden();\n+  // //     });\n+  // //   });\n \n-  //   describe('after form submition before response is received', () => {\n-  //     beforeEach(() => {\n-  //       page.mockCreate();\n-  //       page.pauseTimers();\n-  //       page.newTodoField().type('Test Todo{enter}');\n-  //     });\n+  // //   describe('after form submition before response is received', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockCreate();\n+  // //       page.pauseTimers();\n+  // //       page.newTodoField().type('Test Todo{enter}');\n+  // //     });\n \n-  //     it('should send a create request', () => {\n-  //       cy.tick(1000);\n-  //       cy.get('@createCallback').should('have.callCount', 1);\n-  //     });\n+  // //     it('should send a create request', () => {\n+  // //       cy.tick(1000);\n+  // //       cy.get('@createCallback').should('have.callCount', 1);\n+  // //     });\n \n-  //     it('should disable the input', () => {\n-  //       page.newTodoField().should('be.disabled');\n-  //     });\n+  // //     it('should disable the input', () => {\n+  // //       page.newTodoField().should('be.disabled');\n+  // //     });\n \n-  //     it('should keep entered text', () => {\n-  //       page.newTodoField().should('have.value', 'Test Todo');\n-  //     });\n+  // //     it('should keep entered text', () => {\n+  // //       page.newTodoField().should('have.value', 'Test Todo');\n+  // //     });\n \n-  //     it('should create and show a temp TodoItem with Loader', () => {\n-  //       todos.assertCount(6);\n-  //       todos.assertLoading(5);\n-  //     });\n+  // //     it('should create and show a temp TodoItem with Loader', () => {\n+  // //       todos.assertCount(6);\n+  // //       todos.assertLoading(5);\n+  // //     });\n \n-  //     it('should show a temp TodoItem with correct title', () => {\n-  //       todos.assertTitle(5, 'Test Todo');\n-  //     });\n+  // //     it('should show a temp TodoItem with correct title', () => {\n+  // //       todos.assertTitle(5, 'Test Todo');\n+  // //     });\n \n-  //     it('should show a not completed temp TodoItem', () => {\n-  //       todos.assertNotCompleted(5);\n-  //     });\n+  // //     it('should show a not completed temp TodoItem', () => {\n+  // //       todos.assertNotCompleted(5);\n+  // //     });\n \n-  //     it('should not show loaders for existing todos', () => {\n-  //       todos.assertNotLoading(0);\n-  //       todos.assertNotLoading(1);\n-  //       todos.assertNotLoading(2);\n-  //       todos.assertNotLoading(3);\n-  //       todos.assertNotLoading(4);\n-  //     });\n+  // //     it('should not show loaders for existing todos', () => {\n+  // //       todos.assertNotLoading(0);\n+  // //       todos.assertNotLoading(1);\n+  // //       todos.assertNotLoading(2);\n+  // //       todos.assertNotLoading(3);\n+  // //       todos.assertNotLoading(4);\n+  // //     });\n \n-  //     it('should not update active counter', () => {\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n-  //   });\n+  // //     it('should not update active counter', () => {\n+  // //       page.todosCounter().should('have.text', '2 items left');\n+  // //     });\n+  // //   });\n \n-  //   describe('on success response', () => {\n-  //     describe('', () => {\n-  //       beforeEach(() => {\n-  //         page.mockCreate().as('createRequest');\n-  //         page.newTodoField().type('Test Todo{enter}');\n+  // //   describe('on success response', () => {\n+  // //     describe('', () => {\n+  // //       beforeEach(() => {\n+  // //         page.mockCreate().as('createRequest');\n+  // //         page.newTodoField().type('Test Todo{enter}');\n \n-  //         cy.wait('@createRequest');\n-  //       });\n+  // //         cy.wait('@createRequest');\n+  // //       });\n \n-  //       // this test may be flaky\n-  //       it.skip('should replace loader with a created todo', () => {\n-  //         page.flushJSTimers();\n-  //         todos.assertCount(6);\n-  //         todos.assertNotLoading(5);\n-  //       });\n+  // //       // this test may be flaky\n+  // //       it.skip('should replace loader with a created todo', () => {\n+  // //         page.flushJSTimers();\n+  // //         todos.assertCount(6);\n+  // //         todos.assertNotLoading(5);\n+  // //       });\n \n-  //       it('should add a todo with a correct title', () => {\n-  //         todos.assertTitle(5, 'Test Todo');\n-  //       });\n+  // //       it('should add a todo with a correct title', () => {\n+  // //         todos.assertTitle(5, 'Test Todo');\n+  // //       });\n \n-  //       it('should add a not completed todo', () => {\n-  //         todos.assertNotCompleted(5);\n-  //       });\n+  // //       it('should add a not completed todo', () => {\n+  // //         todos.assertNotCompleted(5);\n+  // //       });\n \n-  //       it('should update active counter', () => {\n-  //         page.todosCounter().should('have.text', '3 items left');\n-  //       });\n+  // //       it('should update active counter', () => {\n+  // //         page.todosCounter().should('have.text', '3 items left');\n+  // //       });\n \n-  //       it('should enable the text field', () => {\n-  //         page.newTodoField().should('not.be.disabled');\n-  //       });\n+  // //       it('should enable the text field', () => {\n+  // //         page.newTodoField().should('not.be.disabled');\n+  // //       });\n \n-  //       it('should not show error message', () => {\n-  //         errorMessage.assertHidden();\n-  //       });\n+  // //       it('should not show error message', () => {\n+  // //         errorMessage.assertHidden();\n+  // //       });\n \n-  //       it('should clear text field', () => {\n-  //         page.newTodoField().should('have.value', '');\n-  //       });\n+  // //       it('should clear text field', () => {\n+  // //         page.newTodoField().should('have.value', '');\n+  // //       });\n \n-  //       it('should focus text field', () => {\n-  //         page.newTodoField().should('be.focused');\n-  //       });\n+  // //       it('should focus text field', () => {\n+  // //         page.newTodoField().should('be.focused');\n+  // //       });\n \n-  //       it('should allow to add one more todo', () => {\n-  //         page.mockCreate().as('createRequest2');\n+  // //       it('should allow to add one more todo', () => {\n+  // //         page.mockCreate().as('createRequest2');\n \n-  //         page.newTodoField().type('Hello world{enter}');\n-  //         cy.wait('@createRequest2');\n-  //         page.flushJSTimers();\n+  // //         page.newTodoField().type('Hello world{enter}');\n+  // //         cy.wait('@createRequest2');\n+  // //         page.flushJSTimers();\n \n-  //         todos.assertCount(7);\n-  //         // todos.assertNotLoading(6);\n-  //         todos.assertNotCompleted(6);\n-  //         todos.assertTitle(6, 'Hello world');\n-  //         page.todosCounter().should('have.text', '4 items left');\n-  //       });\n-  //     });\n+  // //         todos.assertCount(7);\n+  // //         // todos.assertNotLoading(6);\n+  // //         todos.assertNotCompleted(6);\n+  // //         todos.assertTitle(6, 'Hello world');\n+  // //         page.todosCounter().should('have.text', '4 items left');\n+  // //       });\n+  // //     });\n \n-  //     it('should add trimmed title', () => {\n-  //       page.mockCreate().as('createRequest');\n+  // //     it('should add trimmed title', () => {\n+  // //       page.mockCreate().as('createRequest');\n \n-  //       page.newTodoField().type('  Other Title    {enter}');\n-  //       cy.wait('@createRequest');\n+  // //       page.newTodoField().type('  Other Title    {enter}');\n+  // //       cy.wait('@createRequest');\n \n-  //       // just in case\n-  //       page.flushJSTimers();\n+  // //       // just in case\n+  // //       page.flushJSTimers();\n \n-  //       todos.assertTitle(5, 'Other Title');\n-  //     });\n+  // //       todos.assertTitle(5, 'Other Title');\n+  // //     });\n \n-  //     it('should keep current filter', () => {\n-  //       page.mockCreate().as('createRequest');\n+  // //     it('should keep current filter', () => {\n+  // //       page.mockCreate().as('createRequest');\n \n-  //       filter.link('active').click();\n-  //       page.newTodoField().type('Test Todo{enter}');\n-  //       cy.wait('@createRequest');\n+  // //       filter.link('active').click();\n+  // //       page.newTodoField().type('Test Todo{enter}');\n+  // //       cy.wait('@createRequest');\n \n-  //       filter.assertSelected('active');\n-  //     });\n-  //   });\n+  // //       filter.assertSelected('active');\n+  // //     });\n+  // //   });\n \n-  //   describe('on request fail', () => {\n-  //     beforeEach(() => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+  // //   describe('on request fail', () => {\n+  // //     beforeEach(() => {\n+  // //       // to prevent Cypress from failing the test on uncaught exception\n+  // //       cy.once('uncaught:exception', () => false);\n \n-  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('createRequest');\n+  // //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  // //         .as('createRequest');\n \n-  //       page.newTodoField().type('Test Todo{enter}');\n+  // //       page.newTodoField().type('Test Todo{enter}');\n \n-  //       cy.wait('@createRequest');\n-  //     });\n+  // //       cy.wait('@createRequest');\n+  // //     });\n \n-  //     it('should show an error message', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Unable to add a todo');\n-  //     });\n+  // //     it('should show an error message', () => {\n+  // //       errorMessage.assertVisible();\n+  // //       errorMessage.assertText('Unable to add a todo');\n+  // //     });\n \n-  //     it('should hide an error message in 3 seconds', () => {\n-  //       cy.clock();\n-  //       cy.tick(2500);\n+  // //     it('should hide an error message in 3 seconds', () => {\n+  // //       cy.clock();\n+  // //       cy.tick(2500);\n \n-  //       errorMessage.assertVisible();\n+  // //       errorMessage.assertVisible();\n \n-  //       cy.tick(500);\n-  //       errorMessage.assertHidden();\n-  //     });\n+  // //       cy.tick(500);\n+  // //       errorMessage.assertHidden();\n+  // //     });\n \n-  //     it('should remove a temp TodoItem on request fail', () => {\n-  //       todos.assertCount(5);\n-  //       todos.assertTitle(4, 'React');\n-  //     });\n+  // //     it('should remove a temp TodoItem on request fail', () => {\n+  // //       todos.assertCount(5);\n+  // //       todos.assertTitle(4, 'React');\n+  // //     });\n \n-  //     it('should enable the text field on request fail', () => {\n-  //       page.newTodoField().should('not.be.disabled');\n-  //     });\n+  // //     it('should enable the text field on request fail', () => {\n+  // //       page.newTodoField().should('not.be.disabled');\n+  // //     });\n \n-  //     it('should keep the entered text on request fail', () => {\n-  //       page.newTodoField().should('have.value', 'Test Todo');\n-  //     });\n+  // //     it('should keep the entered text on request fail', () => {\n+  // //       page.newTodoField().should('have.value', 'Test Todo');\n+  // //     });\n \n-  //     it('should focus text field', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n+  // //     it('should focus text field', () => {\n+  // //       page.newTodoField().should('be.focused');\n+  // //     });\n \n-  //     it('should not update active counter', () => {\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n+  // //     it('should not update active counter', () => {\n+  // //       page.todosCounter().should('have.text', '2 items left');\n+  // //     });\n \n-  //     it('should immediately hide an error message on new request', () => {\n-  //       page.newTodoField().type(`{enter}`);\n-  //       errorMessage.assertHidden();\n-  //     });\n+  // //     it('should immediately hide an error message on new request', () => {\n+  // //       page.newTodoField().type(`{enter}`);\n+  // //       errorMessage.assertHidden();\n+  // //     });\n \n-  //     it('should show an error message again on a next fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+  // //     it('should show an error message again on a next fail', () => {\n+  // //       // to prevent Cypress from failing the test on uncaught exception\n+  // //       cy.once('uncaught:exception', () => false);\n \n-  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('createRequest2');\n+  // //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  // //         .as('createRequest2');\n \n-  //       page.newTodoField().type(`{enter}`);\n-  //       cy.wait('@createRequest2');\n+  // //       page.newTodoField().type(`{enter}`);\n+  // //       cy.wait('@createRequest2');\n \n-  //       errorMessage.assertVisible();\n-  //     });\n+  // //       errorMessage.assertVisible();\n+  // //     });\n \n-  //     it('should keep an error message for 3s after the last fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+  // //     it('should keep an error message for 3s after the last fail', () => {\n+  // //       // to prevent Cypress from failing the test on uncaught exception\n+  // //       cy.once('uncaught:exception', () => false);\n \n-  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('createRequest2');\n+  // //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  // //         .as('createRequest2');\n \n-  //       cy.clock();\n+  // //       cy.clock();\n \n-  //       cy.tick(2000);\n-  //       page.newTodoField().type(`{enter}`);\n-  //       cy.tick(500);\n-  //       cy.wait('@createRequest2');\n-  //       cy.tick(2000);\n+  // //       cy.tick(2000);\n+  // //       page.newTodoField().type(`{enter}`);\n+  // //       cy.tick(500);\n+  // //       cy.wait('@createRequest2');\n+  // //       cy.tick(2000);\n \n-  //       errorMessage.assertVisible();\n-  //     });\n+  // //       errorMessage.assertVisible();\n+  // //     });\n \n-  //     it('should allow to add a todo', () => {\n-  //       page.mockCreate().as('createRequest2');\n-  //       page.newTodoField().type('{enter}');\n+  // //     it('should allow to add a todo', () => {\n+  // //       page.mockCreate().as('createRequest2');\n+  // //       page.newTodoField().type('{enter}');\n \n-  //       cy.wait('@createRequest2');\n-  //       page.flushJSTimers();\n+  // //       cy.wait('@createRequest2');\n+  // //       page.flushJSTimers();\n \n-  //       todos.assertCount(6);\n-  //       // todos.assertNotLoading(5);\n-  //       todos.assertNotCompleted(5);\n-  //       todos.assertTitle(5, 'Test Todo');\n+  // //       todos.assertCount(6);\n+  // //       // todos.assertNotLoading(5);\n+  // //       todos.assertNotCompleted(5);\n+  // //       todos.assertTitle(5, 'Test Todo');\n \n-  //       page.todosCounter().should('have.text', '3 items left');\n-  //     });\n-  //   });\n-  // });\n+  // //       page.todosCounter().should('have.text', '3 items left');\n+  // //     });\n+  // //   });\n+  // // });\n \n-  // describe('Adding a first todo', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad({ body: [] }).as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n+  // // describe('Adding a first todo', () => {\n+  // //   beforeEach(() => {\n+  // //     page.mockLoad({ body: [] }).as('loadRequest');\n+  // //     page.visit();\n+  // //     cy.wait('@loadRequest');\n \n-  //     page.mockCreate().as('createRequest');\n-  //     page.newTodoField().type('First todo{enter}');\n+  // //     page.mockCreate().as('createRequest');\n+  // //     page.newTodoField().type('First todo{enter}');\n \n-  //     cy.wait('@createRequest');\n-  //   });\n+  // //     cy.wait('@createRequest');\n+  // //   });\n \n-  //   it('should show a new todos', () => {\n-  //     todos.assertCount(1);\n-  //     todos.assertTitle(0, 'First todo');\n-  //     todos.assertNotCompleted(0);\n-  //   });\n+  // //   it('should show a new todos', () => {\n+  // //     todos.assertCount(1);\n+  // //     todos.assertTitle(0, 'First todo');\n+  // //     todos.assertNotCompleted(0);\n+  // //   });\n \n-  //   it('should show Filter', () => {\n-  //     filter.assertVisible();\n-  //   });\n+  // //   it('should show Filter', () => {\n+  // //     filter.assertVisible();\n+  // //   });\n \n-  //   it('should show todosCounter', () => {\n-  //     page.todosCounter().should('contain.text', '1 item');\n-  //   });\n-  // });\n+  // //   it('should show todosCounter', () => {\n+  // //     page.todosCounter().should('contain.text', '1 item');\n+  // //   });\n+  // // });\n \n-  // describe('Individual Todo Deletion', () => {\n-  //   describe('Default behavior', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  // // describe('Individual Todo Deletion', () => {\n+  // //   describe('Default behavior', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad().as('loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n \n-  //     it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n-  //       page.mockDelete(257334);\n-  //       page.pauseTimers();\n-  //       todos.deleteButton(0).click();\n+  // //     it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n+  // //       page.mockDelete(257334);\n+  // //       page.pauseTimers();\n+  // //       todos.deleteButton(0).click();\n \n-  //       todos.assertLoading(0);\n-  //     });\n+  // //       todos.assertLoading(0);\n+  // //     });\n \n-  //     it('should not delete a todo before successful response', () => {\n-  //       page.mockDelete(257334);\n-  //       page.pauseTimers();\n-  //       todos.deleteButton(0).click();\n+  // //     it('should not delete a todo before successful response', () => {\n+  // //       page.mockDelete(257334);\n+  // //       page.pauseTimers();\n+  // //       todos.deleteButton(0).click();\n \n-  //       todos.assertCount(5);\n-  //     });\n+  // //       todos.assertCount(5);\n+  // //     });\n \n-  //     it('should remove the todo from the list on a successful API response', () => {\n-  //       page.mockDelete(257334).as('deleteRequest');\n+  // //     it('should remove the todo from the list on a successful API response', () => {\n+  // //       page.mockDelete(257334).as('deleteRequest');\n \n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n+  // //       todos.deleteButton(0).click();\n+  // //       cy.wait('@deleteRequest');\n \n-  //       todos.assertCount(4);\n-  //       todos.assertTitle(0, 'CSS');\n-  //     });\n+  // //       todos.assertCount(4);\n+  // //       todos.assertTitle(0, 'CSS');\n+  // //     });\n \n-  //     it('should focus text field after todo deletion', () => {\n-  //       page.mockDelete(257334).as('deleteRequest');\n+  // //     it('should focus text field after todo deletion', () => {\n+  // //       page.mockDelete(257334).as('deleteRequest');\n \n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n+  // //       todos.deleteButton(0).click();\n+  // //       cy.wait('@deleteRequest');\n \n-  //       page.newTodoField().should('be.focused');\n-  //     });\n+  // //       page.newTodoField().should('be.focused');\n+  // //     });\n \n-  //     it('should not remove the todo from the list on an API error', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+  // //     it('should not remove the todo from the list on an API error', () => {\n+  // //       // to prevent Cypress from failing the test on uncaught exception\n+  // //       cy.once('uncaught:exception', () => false);\n \n-  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+  // //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n \n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n+  // //       todos.deleteButton(0).click();\n+  // //       cy.wait('@deleteRequest');\n \n-  //       todos.assertCount(5);\n-  //       todos.assertTitle(0, 'HTML');\n-  //     });\n+  // //       todos.assertCount(5);\n+  // //       todos.assertTitle(0, 'HTML');\n+  // //     });\n \n-  //     it('should show an error message on an API error', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+  // //     it('should show an error message on an API error', () => {\n+  // //       // to prevent Cypress from failing the test on uncaught exception\n+  // //       cy.once('uncaught:exception', () => false);\n \n-  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+  // //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n \n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n+  // //       todos.deleteButton(0).click();\n+  // //       cy.wait('@deleteRequest');\n \n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Unable to delete a todo');\n-  //     });\n+  // //       errorMessage.assertVisible();\n+  // //       errorMessage.assertText('Unable to delete a todo');\n+  // //     });\n \n-  //     it('should adjust the active todo count correctly after successful deletion', () => {\n-  //       page.mockDelete(257338).as('deleteRequest');\n-  //       todos.deleteButton(4).click();\n-  //       cy.wait('@deleteRequest');\n+  // //     it('should adjust the active todo count correctly after successful deletion', () => {\n+  // //       page.mockDelete(257338).as('deleteRequest');\n+  // //       todos.deleteButton(4).click();\n+  // //       cy.wait('@deleteRequest');\n \n-  //       page.todosCounter().should('contain.text', '1 item');\n-  //     });\n+  // //       page.todosCounter().should('contain.text', '1 item');\n+  // //     });\n \n-  //     it('should not adjust the active todo count after failed deletion', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+  // //     it('should not adjust the active todo count after failed deletion', () => {\n+  // //       // to prevent Cypress from failing the test on uncaught exception\n+  // //       cy.once('uncaught:exception', () => false);\n \n-  //       page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n-  //         .as('deleteRequest');\n+  // //       page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n+  // //         .as('deleteRequest');\n \n-  //       todos.deleteButton(4).click();\n-  //       cy.wait('@deleteRequest');\n+  // //       todos.deleteButton(4).click();\n+  // //       cy.wait('@deleteRequest');\n \n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n-  //   });\n+  // //       page.todosCounter().should('have.text', '2 items left');\n+  // //     });\n+  // //   });\n \n-  //   describe('Last todo deletion', () => {\n-  //     beforeEach(() => {\n-  //       const todo = {\n-  //         \"id\": 257334,\n-  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-  //         \"userId\": 1,\n-  //         \"title\": \"HTML\",\n-  //         \"completed\": false\n-  //       };\n+  // //   describe('Last todo deletion', () => {\n+  // //     beforeEach(() => {\n+  // //       const todo = {\n+  // //         \"id\": 257334,\n+  // //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+  // //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+  // //         \"userId\": 1,\n+  // //         \"title\": \"HTML\",\n+  // //         \"completed\": false\n+  // //       };\n \n-  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n+  // //       page.mockLoad({ body: [todo] }).as('loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n \n-  //       page.mockDelete(257334);\n-  //       todos.deleteButton(0).click();\n-  //     });\n+  // //       page.mockDelete(257334);\n+  // //       todos.deleteButton(0).click();\n+  // //     });\n \n-  //     it('should hide todos', () => {\n-  //       todos.assertCount(0);\n-  //     });\n+  // //     it('should hide todos', () => {\n+  // //       todos.assertCount(0);\n+  // //     });\n \n-  //     it('should hide footer', () => {\n-  //       filter.assertHidden();\n-  //       page.clearCompletedButton().should('not.exist');\n-  //       page.todosCounter().should('not.exist');\n-  //     });\n+  // //     it('should hide footer', () => {\n+  // //       filter.assertHidden();\n+  // //       page.clearCompletedButton().should('not.exist');\n+  // //       page.todosCounter().should('not.exist');\n+  // //     });\n \n-  //     it('should focus text field after todo deletion', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n-  //   });\n-  // });\n+  // //     it('should focus text field after todo deletion', () => {\n+  // //       page.newTodoField().should('be.focused');\n+  // //     });\n+  // //   });\n+  // // });\n \n-  // describe('Group Todo Deletion', () => {\n-  //   describe('with no completed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  // // describe('Group Todo Deletion', () => {\n+  // //   describe('with no completed todos', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n \n-  //     it('should not have active ClearCompleted button', () => {\n-  //       page.clearCompletedButton().should('be.disabled');\n-  //     });\n-  //   });\n+  // //     it('should not have active ClearCompleted button', () => {\n+  // //       page.clearCompletedButton().should('be.disabled');\n+  // //     });\n+  // //   });\n \n-  //   describe('with some completed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  // //   describe('with some completed todos', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad().as('loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n \n-  //     it('should have ClearCompleted button enabled', () => {\n-  //       page.clearCompletedButton().should('not.be.disabled');\n-  //     });\n+  // //     it('should have ClearCompleted button enabled', () => {\n+  // //       page.clearCompletedButton().should('not.be.disabled');\n+  // //     });\n \n-  //     it('should send individual deletion request for each completed todo', () => {\n-  //       page.mockDelete(257334).as('deleteRequest1');\n-  //       page.mockDelete(257335).as('deleteRequest2');\n-  //       page.mockDelete(257336).as('deleteRequest3');\n+  // //     it('should send individual deletion request for each completed todo', () => {\n+  // //       page.mockDelete(257334).as('deleteRequest1');\n+  // //       page.mockDelete(257335).as('deleteRequest2');\n+  // //       page.mockDelete(257336).as('deleteRequest3');\n \n-  //       page.clearCompletedButton().click();\n+  // //       page.clearCompletedButton().click();\n \n-  //       cy.wait('@deleteRequest1');\n-  //       cy.wait('@deleteRequest2');\n-  //       cy.wait('@deleteRequest3');\n-  //     });\n+  // //       cy.wait('@deleteRequest1');\n+  // //       cy.wait('@deleteRequest2');\n+  // //       cy.wait('@deleteRequest3');\n+  // //     });\n \n-  //     describe('on success', () => {\n-  //       beforeEach(() => {\n-  //         page.mockDelete(257334).as('deleteRequest1');\n-  //         page.mockDelete(257335).as('deleteRequest2');\n-  //         page.mockDelete(257336).as('deleteRequest3');\n+  // //     describe('on success', () => {\n+  // //       beforeEach(() => {\n+  // //         page.mockDelete(257334).as('deleteRequest1');\n+  // //         page.mockDelete(257335).as('deleteRequest2');\n+  // //         page.mockDelete(257336).as('deleteRequest3');\n \n-  //         page.clearCompletedButton().click();\n+  // //         page.clearCompletedButton().click();\n \n-  //         cy.wait('@deleteRequest1');\n-  //         cy.wait('@deleteRequest2');\n-  //         cy.wait('@deleteRequest3');\n-  //       });\n+  // //         cy.wait('@deleteRequest1');\n+  // //         cy.wait('@deleteRequest2');\n+  // //         cy.wait('@deleteRequest3');\n+  // //       });\n \n-  //       it('should remove all completed todos from the list', () => {\n-  //         todos.assertCount(2);\n-  //         todos.assertTitle(0, 'TypeScript');\n-  //         todos.assertTitle(1, 'React');\n-  //       });\n+  // //       it('should remove all completed todos from the list', () => {\n+  // //         todos.assertCount(2);\n+  // //         todos.assertTitle(0, 'TypeScript');\n+  // //         todos.assertTitle(1, 'React');\n+  // //       });\n \n-  //       it('should disable ClearCompleted button', () => {\n-  //         page.clearCompletedButton().should('be.disabled');\n-  //       });\n+  // //       it('should disable ClearCompleted button', () => {\n+  // //         page.clearCompletedButton().should('be.disabled');\n+  // //       });\n \n-  //       it('should focus the text field', () => {\n-  //         page.newTodoField().should('be.focused');\n-  //       });\n-  //     });\n+  // //       it('should focus the text field', () => {\n+  // //         page.newTodoField().should('be.focused');\n+  // //       });\n+  // //     });\n \n-  //     describe('on a single fail', () => {\n-  //       beforeEach(() => {\n-  //         // to prevent Cypress from failing the test on uncaught exception\n-  //         cy.once('uncaught:exception', () => false);\n+  // //     describe('on a single fail', () => {\n+  // //       beforeEach(() => {\n+  // //         // to prevent Cypress from failing the test on uncaught exception\n+  // //         cy.once('uncaught:exception', () => false);\n \n-  //         page.mockDelete(257334).as('deleteRequest1');\n-  //         page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n-  //         page.mockDelete(257336).as('deleteRequest3');\n+  // //         page.mockDelete(257334).as('deleteRequest1');\n+  // //         page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n+  // //         page.mockDelete(257336).as('deleteRequest3');\n \n-  //         page.clearCompletedButton().click();\n+  // //         page.clearCompletedButton().click();\n \n-  //         cy.wait('@deleteRequest1');\n-  //         cy.wait('@deleteRequest2');\n-  //         cy.wait('@deleteRequest3');\n-  //       });\n+  // //         cy.wait('@deleteRequest1');\n+  // //         cy.wait('@deleteRequest2');\n+  // //         cy.wait('@deleteRequest3');\n+  // //       });\n \n-  //       it('should show an error message if any of the group deletions fails', () => {\n-  //         errorMessage.assertVisible();\n-  //         errorMessage.assertText('Unable to delete a todo');\n-  //       });\n+  // //       it('should show an error message if any of the group deletions fails', () => {\n+  // //         errorMessage.assertVisible();\n+  // //         errorMessage.assertText('Unable to delete a todo');\n+  // //       });\n \n-  //       it('should remove todos with success responses and keep todos with errors', () => {\n-  //         todos.assertCount(3);\n-  //         todos.assertTitle(0, 'CSS');\n-  //         todos.assertTitle(1, 'TypeScript');\n-  //       });\n+  // //       it('should remove todos with success responses and keep todos with errors', () => {\n+  // //         todos.assertCount(3);\n+  // //         todos.assertTitle(0, 'CSS');\n+  // //         todos.assertTitle(1, 'TypeScript');\n+  // //       });\n \n-  //       it('should not disable ClearCompleted button', () => {\n-  //         page.clearCompletedButton().should('not.be.disabled');\n-  //       });\n-  //     });\n-  //   });\n+  // //       it('should not disable ClearCompleted button', () => {\n+  // //         page.clearCompletedButton().should('not.be.disabled');\n+  // //       });\n+  // //     });\n+  // //   });\n \n-  //   describe('with all todos completed', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n+  // //   describe('with all todos completed', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n \n-  //       page.mockDelete(257334).as('deleteRequest1');\n-  //       page.mockDelete(257335).as('deleteRequest2');\n-  //       page.mockDelete(257336).as('deleteRequest3');\n-  //       page.mockDelete(257337).as('deleteRequest4');\n-  //       page.mockDelete(257338).as('deleteRequest5');\n+  // //       page.mockDelete(257334).as('deleteRequest1');\n+  // //       page.mockDelete(257335).as('deleteRequest2');\n+  // //       page.mockDelete(257336).as('deleteRequest3');\n+  // //       page.mockDelete(257337).as('deleteRequest4');\n+  // //       page.mockDelete(257338).as('deleteRequest5');\n \n-  //       page.clearCompletedButton().click();\n+  // //       page.clearCompletedButton().click();\n \n-  //       cy.wait('@deleteRequest1');\n-  //       cy.wait('@deleteRequest2');\n-  //       cy.wait('@deleteRequest3');\n-  //       cy.wait('@deleteRequest4');\n-  //       cy.wait('@deleteRequest5');\n-  //     });\n+  // //       cy.wait('@deleteRequest1');\n+  // //       cy.wait('@deleteRequest2');\n+  // //       cy.wait('@deleteRequest3');\n+  // //       cy.wait('@deleteRequest4');\n+  // //       cy.wait('@deleteRequest5');\n+  // //     });\n \n-  //     it('should hide todos after clearing all completed todos', () => {\n-  //       todos.assertCount(0);\n-  //     });\n+  // //     it('should hide todos after clearing all completed todos', () => {\n+  // //       todos.assertCount(0);\n+  // //     });\n \n-  //     it('should hide footer after clearing all completed todos', () => {\n-  //       filter.assertHidden();\n-  //       page.clearCompletedButton().should('not.exist');\n-  //       page.todosCounter().should('not.exist');\n-  //     });\n-  //   });\n-  // });\n+  // //     it('should hide footer after clearing all completed todos', () => {\n+  // //       filter.assertHidden();\n+  // //       page.clearCompletedButton().should('not.exist');\n+  // //       page.todosCounter().should('not.exist');\n+  // //     });\n+  // //   });\n+  // // });\n \n-  // describe('Todo Toggling', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad().as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n-  //   });\n+  // // describe('Todo Toggling', () => {\n+  // //   beforeEach(() => {\n+  // //     page.mockLoad().as('loadRequest');\n+  // //     page.visit();\n+  // //     cy.wait('@loadRequest');\n+  // //   });\n \n-  //   describe('before receving response', () => {\n-  //     beforeEach(() => {\n-  //       page.mockUpdate(257334).as('updateRequest');\n-  //     });\n+  // //   describe('before receving response', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockUpdate(257334).as('updateRequest');\n+  // //     });\n \n-  //     it('should send an update request', () => {\n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest');\n-  //     });\n+  // //     it('should send an update request', () => {\n+  // //       todos.statusToggler(0).click();\n+  // //       cy.wait('@updateRequest');\n+  // //     });\n \n-  //     it('should show loader after click', () => {\n-  //       page.pauseTimers();\n-  //       todos.statusToggler(0).click();\n+  // //     it('should show loader after click', () => {\n+  // //       page.pauseTimers();\n+  // //       todos.statusToggler(0).click();\n \n-  //       todos.assertLoading(0);\n-  //     });\n+  // //       todos.assertLoading(0);\n+  // //     });\n \n-  //     it('should not show error message after click', () => {\n-  //       page.pauseTimers();\n-  //       todos.statusToggler(0).click();\n+  // //     it('should not show error message after click', () => {\n+  // //       page.pauseTimers();\n+  // //       todos.statusToggler(0).click();\n \n-  //       errorMessage.assertHidden();\n-  //     });\n+  // //       errorMessage.assertHidden();\n+  // //     });\n \n-  //     it('should not hide a todo if filtered', () => {\n-  //       filter.link('completed').click();\n-  //       page.pauseTimers();\n-  //       cy.tick(1000); // flush JS animation\n-  //       todos.statusToggler(0).click();\n+  // //     it('should not hide a todo if filtered', () => {\n+  // //       filter.link('completed').click();\n+  // //       page.pauseTimers();\n+  // //       cy.tick(1000); // flush JS animation\n+  // //       todos.statusToggler(0).click();\n \n-  //       todos.assertCount(3);\n-  //       todos.assertTitle(0, 'HTML');\n-  //     });\n-  //   });\n+  // //       todos.assertCount(3);\n+  // //       todos.assertTitle(0, 'HTML');\n+  // //     });\n+  // //   });\n \n-  //   describe('on success', () => {\n-  //     beforeEach(() => {\n-  //       page.mockUpdate(257334).as('updateRequest');\n+  // //   describe('on success', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockUpdate(257334).as('updateRequest');\n \n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest');\n-  //     });\n+  // //       todos.statusToggler(0).click();\n+  // //       cy.wait('@updateRequest');\n+  // //     });\n \n-  //     it('should toggle a todo', () => {\n-  //       todos.assertNotCompleted(0);\n-  //       todos.statusToggler(0).should('not.be.checked');\n-  //     });\n+  // //     it('should toggle a todo', () => {\n+  // //       todos.assertNotCompleted(0);\n+  // //       todos.statusToggler(0).should('not.be.checked');\n+  // //     });\n \n-  //     it('should cancel loading', () => {\n-  //       page.flushJSTimers();\n-  //       todos.assertNotLoading(0);\n-  //     });\n+  // //     it('should cancel loading', () => {\n+  // //       page.flushJSTimers();\n+  // //       todos.assertNotLoading(0);\n+  // //     });\n \n-  //     it('should update the counter', () => {\n-  //       page.todosCounter().should('have.text', '3 items left');\n-  //     });\n+  // //     it('should update the counter', () => {\n+  // //       page.todosCounter().should('have.text', '3 items left');\n+  // //     });\n \n-  //     it('should not show an error message', () => {\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n+  // //     it('should not show an error message', () => {\n+  // //       errorMessage.assertHidden();\n+  // //     });\n+  // //   });\n \n-  //   describe('on fail', () => {\n-  //     beforeEach(() => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+  // //   describe('on fail', () => {\n+  // //     beforeEach(() => {\n+  // //       // to prevent Cypress from failing the test on uncaught exception\n+  // //       cy.once('uncaught:exception', () => false);\n \n-  //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('updateRequest');\n+  // //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+  // //         .as('updateRequest');\n \n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest');\n-  //     });\n+  // //       todos.statusToggler(0).click();\n+  // //       cy.wait('@updateRequest');\n+  // //     });\n \n-  //     it('should show an error', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Unable to update a todo');\n-  //     });\n+  // //     it('should show an error', () => {\n+  // //       errorMessage.assertVisible();\n+  // //       errorMessage.assertText('Unable to update a todo');\n+  // //     });\n \n-  //     it('should not toggle a todo', () => {\n-  //       todos.assertCompleted(0);\n-  //       todos.statusToggler(0).should('be.checked');\n-  //     });\n+  // //     it('should not toggle a todo', () => {\n+  // //       todos.assertCompleted(0);\n+  // //       todos.statusToggler(0).should('be.checked');\n+  // //     });\n \n-  //     it('should cancel loading', () => {\n-  //       page.flushJSTimers();\n-  //       todos.assertNotLoading(0);\n-  //     });\n+  // //     it('should cancel loading', () => {\n+  // //       page.flushJSTimers();\n+  // //       todos.assertNotLoading(0);\n+  // //     });\n \n-  //     it('should not update the counter', () => {\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n+  // //     it('should not update the counter', () => {\n+  // //       page.todosCounter().should('have.text', '2 items left');\n+  // //     });\n \n-  //     it('should allow to toggle again', () => {\n-  //       page.mockUpdate(257334).as('updateRequest2');\n+  // //     it('should allow to toggle again', () => {\n+  // //       page.mockUpdate(257334).as('updateRequest2');\n \n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest2');\n+  // //       todos.statusToggler(0).click();\n+  // //       cy.wait('@updateRequest2');\n \n-  //       todos.assertNotCompleted(0);\n-  //     });\n-  //   });\n+  // //       todos.assertNotCompleted(0);\n+  // //     });\n+  // //   });\n \n-  //   describe('if filtered', () => {\n-  //     beforeEach(() => {\n-  //       filter.link('completed').click();\n-  //     });\n+  // //   describe('if filtered', () => {\n+  // //     beforeEach(() => {\n+  // //       filter.link('completed').click();\n+  // //     });\n \n-  //     it('should hide a todo on success', () => {\n-  //       page.mockUpdate(257334).as('updateRequest');\n+  // //     it('should hide a todo on success', () => {\n+  // //       page.mockUpdate(257334).as('updateRequest');\n \n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest');\n+  // //       todos.statusToggler(0).click();\n+  // //       cy.wait('@updateRequest');\n \n-  //       todos.assertCount(2);\n-  //       todos.assertTitle(0, 'CSS');\n-  //     });\n+  // //       todos.assertCount(2);\n+  // //       todos.assertTitle(0, 'CSS');\n+  // //     });\n \n-  //     it('should show a todo on success when selected an oposite filter', () => {\n-  //       page.mockUpdate(257334).as('updateRequest');\n+  // //     it('should show a todo on success when selected an oposite filter', () => {\n+  // //       page.mockUpdate(257334).as('updateRequest');\n \n-  //       todos.statusToggler(0).click();\n-  //       filter.link('active').click();\n-  //       cy.wait('@updateRequest');\n+  // //       todos.statusToggler(0).click();\n+  // //       filter.link('active').click();\n+  // //       cy.wait('@updateRequest');\n \n-  //       todos.assertCount(3);\n-  //       todos.assertTitle(0, 'HTML');\n-  //     });\n+  // //       todos.assertCount(3);\n+  // //       todos.assertTitle(0, 'HTML');\n+  // //     });\n \n-  //     it('should not hide a todo on fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+  // //     it('should not hide a todo on fail', () => {\n+  // //       // to prevent Cypress from failing the test on uncaught exception\n+  // //       cy.once('uncaught:exception', () => false);\n \n-  //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('updateRequest');\n+  // //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+  // //         .as('updateRequest');\n \n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest');\n+  // //       todos.statusToggler(0).click();\n+  // //       cy.wait('@updateRequest');\n \n-  //       todos.assertCount(3);\n-  //       todos.assertTitle(0, 'HTML');\n-  //     });\n-  //   });\n-  // });\n+  // //       todos.assertCount(3);\n+  // //       todos.assertTitle(0, 'HTML');\n+  // //     });\n+  // //   });\n+  // // });\n \n \n \n \n \n \n \n-  // describe('Toggle All Button', () => {\n-  //   describe('if there are no todos', () => {\n-  //     it('should not be visible while loading todos', () => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n+  // // describe('Toggle All Button', () => {\n+  // //   describe('if there are no todos', () => {\n+  // //     it('should not be visible while loading todos', () => {\n+  // //       page.mockLoad({ body: [] }).as('loadRequest');\n \n-  //       page.pauseTimers();\n-  //       page.visit();\n+  // //       page.pauseTimers();\n+  // //       page.visit();\n \n-  //       page.toggleAllButton().should('not.exist');\n-  //     });\n+  // //       page.toggleAllButton().should('not.exist');\n+  // //     });\n \n-  //     it('should not be visible when loaded', () => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n+  // //     it('should not be visible when loaded', () => {\n+  // //       page.mockLoad({ body: [] }).as('loadRequest');\n \n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n \n-  //       page.toggleAllButton().should('not.exist');\n-  //     });\n+  // //       page.toggleAllButton().should('not.exist');\n+  // //     });\n \n-  //     it('should appear after adding a todo', () => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n-  //       page.mockCreate().as('createRequest');\n+  // //     it('should appear after adding a todo', () => {\n+  // //       page.mockLoad({ body: [] }).as('loadRequest');\n+  // //       page.mockCreate().as('createRequest');\n \n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n \n-  //       page.newTodoField().type('First todo{enter}');\n-  //       cy.wait('@createRequest');\n+  // //       page.newTodoField().type('First todo{enter}');\n+  // //       cy.wait('@createRequest');\n \n-  //       page.toggleAllButton().should('exist');\n-  //     });\n+  // //       page.toggleAllButton().should('exist');\n+  // //     });\n \n-  //     it('should disappear after removing the last todo', () => {\n-  //       const todo = {\n-  //         \"id\": 257334,\n-  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-  //         \"userId\": 1,\n-  //         \"title\": \"HTML\",\n-  //         \"completed\": false\n-  //       };\n+  // //     it('should disappear after removing the last todo', () => {\n+  // //       const todo = {\n+  // //         \"id\": 257334,\n+  // //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+  // //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+  // //         \"userId\": 1,\n+  // //         \"title\": \"HTML\",\n+  // //         \"completed\": false\n+  // //       };\n \n-  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n-  //       page.mockDelete(257334).as('deleteRequest');\n+  // //       page.mockLoad({ body: [todo] }).as('loadRequest');\n+  // //       page.mockDelete(257334).as('deleteRequest');\n \n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n \n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n+  // //       todos.deleteButton(0).click();\n+  // //       cy.wait('@deleteRequest');\n \n-  //       page.toggleAllButton().should('not.exist');\n-  //     });\n-  //   });\n+  // //       page.toggleAllButton().should('not.exist');\n+  // //     });\n+  // //   });\n \n-  //   describe('if all todos are completed', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+  // //   describe('if all todos are completed', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n \n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n \n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n+  // //     it('should be visible', () => {\n+  // //       page.toggleAllButton().should('exist');\n+  // //     });\n \n-  //     it('should stay visible after filtering out all the todos', () => {\n-  //       filter.link('active').click();\n+  // //     it('should stay visible after filtering out all the todos', () => {\n+  // //       filter.link('active').click();\n \n-  //       page.toggleAllButton().should('exist');\n-  //     });\n+  // //       page.toggleAllButton().should('exist');\n+  // //     });\n \n-  //     it('should be active', () => {\n-  //       page.toggleAllButton().should('have.class', 'active');\n-  //     });\n+  // //     it('should be active', () => {\n+  // //       page.toggleAllButton().should('have.class', 'active');\n+  // //     });\n \n-  //     it('should become not active after toggling a todo', () => {\n-  //       page.mockUpdate(257335).as('updateRequest');\n-  //       todos.statusToggler(1).click();\n-  //       cy.wait('@updateRequest');\n+  // //     it('should become not active after toggling a todo', () => {\n+  // //       page.mockUpdate(257335).as('updateRequest');\n+  // //       todos.statusToggler(1).click();\n+  // //       cy.wait('@updateRequest');\n \n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n+  // //       page.toggleAllButton().should('not.have.class', 'active');\n+  // //     });\n \n-  //     it('should stay active after a todo toggling fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+  // //     it('should stay active after a todo toggling fail', () => {\n+  // //       // to prevent Cypress from failing the test on uncaught exception\n+  // //       cy.once('uncaught:exception', () => false);\n \n-  //       page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n-  //       todos.statusToggler(1).click();\n-  //       cy.wait('@updateRequest');\n+  // //       page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n+  // //       todos.statusToggler(1).click();\n+  // //       cy.wait('@updateRequest');\n \n-  //       page.toggleAllButton().should('have.class', 'active');\n-  //     });\n+  // //       page.toggleAllButton().should('have.class', 'active');\n+  // //     });\n \n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334).as('updateRequest4');\n-  //         page.mockUpdate(257335).as('updateRequest5');\n-  //         page.mockUpdate(257336).as('updateRequest6');\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n+  // //     describe('on click', () => {\n+  // //       beforeEach(() => {\n+  // //         page.mockUpdate(257334).as('updateRequest4');\n+  // //         page.mockUpdate(257335).as('updateRequest5');\n+  // //         page.mockUpdate(257336).as('updateRequest6');\n+  // //         page.mockUpdate(257337).as('updateRequest7');\n+  // //         page.mockUpdate(257338).as('updateRequest8');\n \n-  //         page.toggleAllButton().click();\n+  // //         page.toggleAllButton().click();\n \n-  //         cy.wait('@updateRequest4');\n-  //         cy.wait('@updateRequest5');\n-  //         cy.wait('@updateRequest6');\n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n+  // //         cy.wait('@updateRequest4');\n+  // //         cy.wait('@updateRequest5');\n+  // //         cy.wait('@updateRequest6');\n+  // //         cy.wait('@updateRequest7');\n+  // //         cy.wait('@updateRequest8');\n+  // //       });\n \n-  //       it('should send requests for all todos', () => {\n-  //         // if before each pass\n-  //       });\n+  // //       it('should send requests for all todos', () => {\n+  // //         // if before each pass\n+  // //       });\n \n-  //       it('should make all todos active', () => {\n-  //         todos.assertNotCompleted(0);\n-  //         todos.assertNotCompleted(1);\n-  //         todos.assertNotCompleted(2);\n-  //         todos.assertNotCompleted(3);\n-  //         todos.assertNotCompleted(4);\n-  //       });\n+  // //       it('should make all todos active', () => {\n+  // //         todos.assertNotCompleted(0);\n+  // //         todos.assertNotCompleted(1);\n+  // //         todos.assertNotCompleted(2);\n+  // //         todos.assertNotCompleted(3);\n+  // //         todos.assertNotCompleted(4);\n+  // //       });\n \n-  //       it('should become not active', () => {\n-  //         page.toggleAllButton().should('not.have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n+  // //       it('should become not active', () => {\n+  // //         page.toggleAllButton().should('not.have.class', 'active');\n+  // //       });\n+  // //     });\n+  // //   });\n \n-  //   describe('if all todos are active', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+  // //   describe('if all todos are active', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n \n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n \n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n+  // //     it('should be visible', () => {\n+  // //       page.toggleAllButton().should('exist');\n+  // //     });\n \n-  //     it('should not be active', () => {\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n+  // //     it('should not be active', () => {\n+  // //       page.toggleAllButton().should('not.have.class', 'active');\n+  // //     });\n \n-  //     it('should not become active after toggling a todo', () => {\n-  //       page.mockUpdate(257335).as('updateRequest');\n-  //       todos.statusToggler(1).click();\n-  //       cy.wait('@updateRequest');\n+  // //     it('should not become active after toggling a todo', () => {\n+  // //       page.mockUpdate(257335).as('updateRequest');\n+  // //       todos.statusToggler(1).click();\n+  // //       cy.wait('@updateRequest');\n \n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n+  // //       page.toggleAllButton().should('not.have.class', 'active');\n+  // //     });\n \n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334).as('updateRequest4');\n-  //         page.mockUpdate(257335).as('updateRequest5');\n-  //         page.mockUpdate(257336).as('updateRequest6');\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n+  // //     describe('on click', () => {\n+  // //       beforeEach(() => {\n+  // //         page.mockUpdate(257334).as('updateRequest4');\n+  // //         page.mockUpdate(257335).as('updateRequest5');\n+  // //         page.mockUpdate(257336).as('updateRequest6');\n+  // //         page.mockUpdate(257337).as('updateRequest7');\n+  // //         page.mockUpdate(257338).as('updateRequest8');\n \n-  //         page.toggleAllButton().click();\n+  // //         page.toggleAllButton().click();\n \n-  //         cy.wait('@updateRequest4');\n-  //         cy.wait('@updateRequest5');\n-  //         cy.wait('@updateRequest6');\n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n+  // //         cy.wait('@updateRequest4');\n+  // //         cy.wait('@updateRequest5');\n+  // //         cy.wait('@updateRequest6');\n+  // //         cy.wait('@updateRequest7');\n+  // //         cy.wait('@updateRequest8');\n+  // //       });\n \n-  //       it('should send requests for all todos', () => {\n-  //         // if before each pass\n-  //       });\n+  // //       it('should send requests for all todos', () => {\n+  // //         // if before each pass\n+  // //       });\n \n-  //       it('should make all todos completed', () => {\n-  //         todos.assertCompleted(0);\n-  //         todos.assertCompleted(1);\n-  //         todos.assertCompleted(2);\n-  //         todos.assertCompleted(3);\n-  //         todos.assertCompleted(4);\n-  //       });\n+  // //       it('should make all todos completed', () => {\n+  // //         todos.assertCompleted(0);\n+  // //         todos.assertCompleted(1);\n+  // //         todos.assertCompleted(2);\n+  // //         todos.assertCompleted(3);\n+  // //         todos.assertCompleted(4);\n+  // //       });\n \n-  //       it('should become active', () => {\n-  //         page.toggleAllButton().should('have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n+  // //       it('should become active', () => {\n+  // //         page.toggleAllButton().should('have.class', 'active');\n+  // //       });\n+  // //     });\n+  // //   });\n \n-  //   describe('if there are some mixed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n+  // //   describe('if there are some mixed todos', () => {\n+  // //     beforeEach(() => {\n+  // //       page.mockLoad().as('loadRequest');\n \n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  // //       page.visit();\n+  // //       cy.wait('@loadRequest');\n+  // //     });\n \n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n+  // //     it('should be visible', () => {\n+  // //       page.toggleAllButton().should('exist');\n+  // //     });\n \n-  //     it('should not be active', () => {\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n+  // //     it('should not be active', () => {\n+  // //       page.toggleAllButton().should('not.have.class', 'active');\n+  // //     });\n \n-  //     it('should become active after completing all todos', () => {\n-  //       page.mockUpdate(257337).as('updateRequest1');\n-  //       page.mockUpdate(257338).as('updateRequest2');\n+  // //     it('should become active after completing all todos', () => {\n+  // //       page.mockUpdate(257337).as('updateRequest1');\n+  // //       page.mockUpdate(257338).as('updateRequest2');\n \n-  //       todos.statusToggler(3).click();\n-  //       cy.wait('@updateRequest1');\n-  //       todos.statusToggler(4).click();\n-  //       cy.wait('@updateRequest2');\n+  // //       todos.statusToggler(3).click();\n+  // //       cy.wait('@updateRequest1');\n+  // //       todos.statusToggler(4).click();\n+  // //       cy.wait('@updateRequest2');\n \n-  //       page.toggleAllButton().should('have.class', 'active');\n-  //     });\n+  // //       page.toggleAllButton().should('have.class', 'active');\n+  // //     });\n \n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334, cy.stub().as('update4'));\n-  //         page.mockUpdate(257335, cy.stub().as('update5'));\n-  //         page.mockUpdate(257336, cy.stub().as('update6'));\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n+  // //     describe('on click', () => {\n+  // //       beforeEach(() => {\n+  // //         page.mockUpdate(257334, cy.stub().as('update4'));\n+  // //         page.mockUpdate(257335, cy.stub().as('update5'));\n+  // //         page.mockUpdate(257336, cy.stub().as('update6'));\n+  // //         page.mockUpdate(257337).as('updateRequest7');\n+  // //         page.mockUpdate(257338).as('updateRequest8');\n \n-  //         page.toggleAllButton().click();\n+  // //         page.toggleAllButton().click();\n \n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n+  // //         cy.wait('@updateRequest7');\n+  // //         cy.wait('@updateRequest8');\n+  // //       });\n \n-  //       it('should send requests only for not completed todos', () => {\n-  //         cy.get('@update4').should('not.be.called');\n-  //         cy.get('@update5').should('not.be.called');\n-  //         cy.get('@update6').should('not.be.called');\n-  //       });\n+  // //       it('should send requests only for not completed todos', () => {\n+  // //         cy.get('@update4').should('not.be.called');\n+  // //         cy.get('@update5').should('not.be.called');\n+  // //         cy.get('@update6').should('not.be.called');\n+  // //       });\n \n-  //       it('should make all todos completed', () => {\n-  //         todos.assertCompleted(0);\n-  //         todos.assertCompleted(1);\n-  //         todos.assertCompleted(2);\n-  //         todos.assertCompleted(3);\n-  //         todos.assertCompleted(4);\n-  //       });\n+  // //       it('should make all todos completed', () => {\n+  // //         todos.assertCompleted(0);\n+  // //         todos.assertCompleted(1);\n+  // //         todos.assertCompleted(2);\n+  // //         todos.assertCompleted(3);\n+  // //         todos.assertCompleted(4);\n+  // //       });\n \n-  //       it('should become active', () => {\n-  //         page.toggleAllButton().should('have.class', 'active');\n-  //       });\n-  //     });\n+  // //       it('should become active', () => {\n+  // //         page.toggleAllButton().should('have.class', 'active');\n+  // //       });\n+  // //     });\n+  // //   });\n+  // // });\n+\n+  // describe('Renaming', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad().as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n   //   });\n-  // });\n \n-  describe('Renaming', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n+  //   it('should not show forms by default', () => {\n+  //     todos.titleField(0).should('not.exist');\n+  //     todos.titleField(1).should('not.exist');\n+  //     todos.titleField(2).should('not.exist');\n+  //     todos.titleField(3).should('not.exist');\n+  //     todos.titleField(4).should('not.exist');\n+  //   });\n \n-    it('should not show forms by default', () => {\n-      todos.titleField(0).should('not.exist');\n-      todos.titleField(1).should('not.exist');\n-      todos.titleField(2).should('not.exist');\n-      todos.titleField(3).should('not.exist');\n-      todos.titleField(4).should('not.exist');\n-    });\n+  //   describe('Edit Form', () => {\n+  //     // describe('by default', () => {\n+  //     //   it('should be opened on dblclick', () => {\n+  //     //     todos.title(0).trigger('dblclick');\n \n-    describe('Edit Form', () => {\n-      // describe('by default', () => {\n-      //   it('should be opened on dblclick', () => {\n-      //     todos.title(0).trigger('dblclick');\n+  //     //     todos.titleField(0).should('exist');\n+  //     //   });\n \n-      //     todos.titleField(0).should('exist');\n-      //   });\n+  //     //   it('should have current value', () => {\n+  //     //     todos.title(0).trigger('dblclick');\n \n-      //   it('should have current value', () => {\n-      //     todos.title(0).trigger('dblclick');\n+  //     //     todos.titleField(0).should('have.value', 'HTML');\n+  //     //   });\n \n-      //     todos.titleField(0).should('have.value', 'HTML');\n-      //   });\n+  //     //   it('should be focused', () => {\n+  //     //     todos.title(0).trigger('dblclick');\n \n-      //   it('should be focused', () => {\n-      //     todos.title(0).trigger('dblclick');\n+  //     //     todos.titleField(0).should('be.focused');\n+  //     //   });\n \n-      //     todos.titleField(0).should('be.focused');\n-      //   });\n+  //     //   it('should hide a title', () => {\n+  //     //     todos.title(0).trigger('dblclick');\n \n-      //   it('should hide a title', () => {\n-      //     todos.title(0).trigger('dblclick');\n+  //     //     todos.title(0).should('not.exist');\n+  //     //   });\n \n-      //     todos.title(0).should('not.exist');\n-      //   });\n+  //     //   it('should hide DeleteButton', () => {\n+  //     //     todos.title(0).trigger('dblclick');\n \n-      //   it('should hide DeleteButton', () => {\n-      //     todos.title(0).trigger('dblclick');\n+  //     //     todos.deleteButton(0).should('not.exist');\n+  //     //   });\n \n-      //     todos.deleteButton(0).should('not.exist');\n-      //   });\n+  //     //   it('should keep StatusToggler', () => {\n+  //     //     todos.title(0).trigger('dblclick');\n \n-      //   it('should keep StatusToggler', () => {\n-      //     todos.title(0).trigger('dblclick');\n+  //     //     todos.statusToggler(0).should('exist');\n+  //     //   });\n \n-      //     todos.statusToggler(0).should('exist');\n-      //   });\n+  //     //   it('should not open forms for other todos', () => {\n+  //     //     todos.title(0).trigger('dblclick');\n \n-      //   it('should not open forms for other todos', () => {\n-      //     todos.title(0).trigger('dblclick');\n+  //     //     todos.titleField(1).should('not.exist');\n+  //     //     todos.titleField(2).should('not.exist');\n+  //     //     todos.titleField(3).should('not.exist');\n+  //     //     todos.titleField(4).should('not.exist');\n+  //     //   });\n \n-      //     todos.titleField(1).should('not.exist');\n-      //     todos.titleField(2).should('not.exist');\n-      //     todos.titleField(3).should('not.exist');\n-      //     todos.titleField(4).should('not.exist');\n-      //   });\n+  //     //   it('should not send a request on change', () => {\n+  //     //     const spy = cy.stub()\n+  //     //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+  //     //       .as('renameCallback');\n \n-      //   it('should not send a request on change', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n+  //     //     page.mockUpdate(257334, spy);\n \n-      //     page.mockUpdate(257334, spy);\n+  //     //     todos.title(0).trigger('dblclick');\n+  //     //     todos.titleField(0).type('123');\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123');\n+  //     //     cy.get('@renameCallback').should('not.be.called');\n+  //     //   });\n+  //     // });\n \n-      //     cy.get('@renameCallback').should('not.be.called');\n-      //   });\n-      // });\n+  //     // describe('on Escape', () => {\n+  //     //   it('should be closed', () => {\n+  //     //     todos.title(0).trigger('dblclick');\n+  //     //     todos.titleField(0).type('123123{esc}');\n \n-      // describe('on Escape', () => {\n-      //   it('should be closed', () => {\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n+  //     //     todos.titleField(0).should('not.exist');\n+  //     //   });\n \n-      //     todos.titleField(0).should('not.exist');\n-      //   });\n+  //     //   it('should keep current title', () => {\n+  //     //     todos.title(0).trigger('dblclick');\n+  //     //     todos.titleField(0).type('123123{esc}');\n \n-      //   it('should keep current title', () => {\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n+  //     //     todos.assertTitle(0, 'HTML');\n+  //     //   });\n \n-      //     todos.assertTitle(0, 'HTML');\n-      //   });\n+  //     //   it('should not send a request', () => {\n+  //     //     const spy = cy.stub()\n+  //     //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+  //     //       .as('renameCallback');\n \n-      //   it('should not send a request', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n+  //     //     page.mockUpdate(257334, spy);\n \n-      //     page.mockUpdate(257334, spy);\n+  //     //     todos.title(0).trigger('dblclick');\n+  //     //     todos.titleField(0).type('123123{esc}');\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n+  //     //     cy.get('@renameCallback').should('not.be.called');\n+  //     //   });\n+  //     // });\n \n-      //     cy.get('@renameCallback').should('not.be.called');\n-      //   });\n-      // });\n+  //     // describe('on enter before recieved a response', () => {\n+  //     //   it('should send a request', () => {\n+  //     //     const spy = cy.stub()\n+  //     //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+  //     //       .as('renameCallback');\n \n-      // describe('on enter before recieved a response', () => {\n-      //   it('should send a request', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n+  //     //     page.mockUpdate(257334, spy);\n \n-      //     page.mockUpdate(257334, spy);\n+  //     //     todos.title(0).trigger('dblclick');\n+  //     //     todos.titleField(0).type('123{enter}');\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123{enter}');\n+  //     //     cy.get('@renameCallback').should('have.callCount', 1);\n+  //     //   });\n \n-      //     cy.get('@renameCallback').should('have.callCount', 1);\n-      //   });\n+  //     //   it('should show loader', () => {\n+  //     //     page.mockUpdate(257334);\n \n-      //   it('should show loader', () => {\n-      //     page.mockUpdate(257334);\n+  //     //     todos.title(0).trigger('dblclick');\n+  //     //     page.pauseTimers();\n+  //     //     todos.titleField(0).type('123{enter}');\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     page.pauseTimers();\n-      //     todos.titleField(0).type('123{enter}');\n+  //     //     todos.assertLoading(0);\n+  //     //   });\n \n-      //     todos.assertLoading(0);\n-      //   });\n+  //     //   // It depend on your implementation\n+  //     //   it.skip('should stay while waiting', () => {\n+  //     //     page.mockUpdate(257334);\n \n-      //   // It depend on your implementation\n-      //   it.skip('should stay while waiting', () => {\n-      //     page.mockUpdate(257334);\n+  //     //     todos.title(0).trigger('dblclick');\n+  //     //     page.pauseTimers();\n+  //     //     todos.titleField(0).type('123{enter}');\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     page.pauseTimers();\n-      //     todos.titleField(0).type('123{enter}');\n+  //     //     todos.titleField(0).should('exist');\n+  //     //   });\n+  //     // });\n \n-      //     todos.titleField(0).should('exist');\n-      //   });\n-      // });\n+  //     // describe('on success', () => {\n+  //     //   beforeEach(() => {\n+  //     //     page.mockUpdate(257334).as('renameRequest');\n \n-      // describe('on success', () => {\n-      //   beforeEach(() => {\n-      //     page.mockUpdate(257334).as('renameRequest');\n+  //     //     todos.title(0).trigger('dblclick');\n+  //     //     todos.titleField(0).clear()\n+  //     //   });\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).clear()\n-      //   });\n+  //     //   it('should cancel loading', () => {\n+  //     //     todos.titleField(0).type('123{enter}');\n+  //     //     cy.wait('@renameRequest');\n+  //     //     page.flushJSTimers();\n \n-      //   it('should cancel loading', () => {\n-      //     todos.titleField(0).type('123{enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n+  //     //     todos.assertNotLoading(0);\n+  //     //   });\n \n-      //     todos.assertNotLoading(0);\n-      //   });\n+  //     //   it('should be closed', () => {\n+  //     //     todos.titleField(0).type('123{enter}');\n+  //     //     cy.wait('@renameRequest');\n+  //     //     page.flushJSTimers();\n \n-      //   it('should be closed', () => {\n-      //     todos.titleField(0).type('123{enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n+  //     //     todos.titleField(0).should('not.exist');\n+  //     //   });\n \n-      //     todos.titleField(0).should('not.exist');\n-      //   });\n+  //     //   it('should show the updated title', () => {\n+  //     //     todos.titleField(0).type('Something{enter}');\n+  //     //     cy.wait('@renameRequest');\n+  //     //     page.flushJSTimers();\n \n-      //   it('should show the updated title', () => {\n-      //     todos.titleField(0).type('Something{enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n+  //     //     todos.assertTitle(0, 'Something');\n+  //     //   });\n \n-      //     todos.assertTitle(0, 'Something');\n-      //   });\n+  //     //   it('should show trim the new title', () => {\n+  //     //     todos.titleField(0).type('   Some new title      {enter}');\n+  //     //     cy.wait('@renameRequest');\n+  //     //     page.flushJSTimers();\n \n-      //   it('should show trim the new title', () => {\n-      //     todos.titleField(0).type('   Some new title      {enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n+  //     //     todos.assertTitle(0, 'Some new title');\n+  //     //   });\n+  //     // });\n \n-      //     todos.assertTitle(0, 'Some new title');\n-      //   });\n-      // });\n+  //     describe('on fail', () => {\n+  //       beforeEach(() => {\n+  //         // to prevent Cypress from failing the test on uncaught exception\n+  //         cy.once('uncaught:exception', () => false);\n \n-      describe('on fail', () => {\n-        beforeEach(() => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n+  //         page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n \n-          page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n+  //         todos.title(0).trigger('dblclick');\n+  //         todos.titleField(0).type('123{enter}');\n+  //         cy.wait('@renameRequest');\n+  //       });\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123{enter}');\n-          cy.wait('@renameRequest');\n-        });\n+  //       it('should cancel loading on fail', () => {\n+  //         page.flushJSTimers();\n+  //         todos.assertNotLoading(0);\n+  //       });\n \n-        it('should cancel loading on fail', () => {\n-          page.flushJSTimers();\n-          todos.assertNotLoading(0);\n-        });\n+  //       it('should stay open on fail', () => {\n+  //         todos.titleField(0).should('exist');\n+  //       });\n \n-        it('should stay open on fail', () => {\n-          todos.titleField(0).should('exist');\n-        });\n+  //       it('should show error message', () => {\n+  //         errorMessage.assertVisible();\n+  //         errorMessage.assertText('Unable to update a todo');\n+  //       });\n \n-        it('should show error message', () => {\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to update a todo');\n-        });\n+  //       it('should hide error message in 3s', () => {\n+  //         page.flushJSTimers(3000);\n \n-        it('should hide error message in 3s', () => {\n-          page.flushJSTimers(3000);\n+  //         errorMessage.assertHidden();\n+  //       });\n+  //     });\n \n-          errorMessage.assertHidden();\n-        });\n-      });\n+  //     describe('if title was not changed', () => {\n+  //       it('should not send a request on enter', () => {\n+  //         const spy = cy.stub()\n+  //           .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+  //           .as('renameCallback');\n \n-      describe('if title was not changed', () => {\n-        it('should not send a request on enter', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n+  //         page.mockUpdate(257334, spy);\n \n-          page.mockUpdate(257334, spy);\n+  //         todos.title(0).trigger('dblclick');\n+  //         todos.titleField(0).type('{enter}');\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n+  //         cy.get('@renameCallback').should('not.be.called');\n+  //       });\n \n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n+  //       it('should be close on enter', () => {\n+  //         todos.title(0).trigger('dblclick');\n+  //         todos.titleField(0).type('{enter}');\n \n-        it('should be close on enter', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n+  //         todos.titleField(0).should('not.exist');\n+  //       });\n \n-          todos.titleField(0).should('not.exist');\n-        });\n+  //       it('should be closed on Escape', () => {\n+  //         todos.title(0).trigger('dblclick');\n+  //         todos.titleField(0).type('{esc}');\n \n-        it('should be closed on Escape', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{esc}');\n+  //         todos.titleField(0).should('not.exist');\n+  //       });\n \n-          todos.titleField(0).should('not.exist');\n-        });\n+  //       it('should preserve current title on save', () => {\n+  //         todos.title(0).trigger('dblclick');\n+  //         todos.titleField(0).type('{enter}');\n \n-        it('should preserve current title on save', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n+  //         todos.assertTitle(0, 'HTML');\n+  //       });\n+  //     });\n \n-          todos.assertTitle(0, 'HTML');\n-        });\n-      });\n+  //     describe('if title became empty', () => {\n+  //       beforeEach(() => {\n+  //         const spy = cy.stub()\n+  //           .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+  //           .as('renameCallback');\n \n-      describe('if title became empty', () => {\n-        beforeEach(() => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n+  //         page.mockUpdate(257334, spy);\n \n-          page.mockUpdate(257334, spy);\n+  //         todos.title(0).trigger('dblclick');\n+  //         todos.titleField(0).clear();\n+  //       });\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear();\n-        });\n+  //       it('should not send an update request on enter', () => {\n+  //         page.mockDelete(257334).as('deleteRequest');\n+  //         todos.titleField(0).type('{enter}');\n \n-        it('should not send an update request on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n+  //         cy.get('@renameCallback').should('not.be.called');\n+  //       });\n \n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n+  //       it('should send a delete request on enter', () => {\n+  //         page.mockDelete(257334).as('deleteRequest');\n+  //         todos.titleField(0).type('{enter}');\n \n-        it('should send a delete request on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n+  //         cy.wait('@deleteRequest');\n+  //       });\n \n-          cy.wait('@deleteRequest');\n-        });\n+  //       it('should show loading on enter', () => {\n+  //         page.mockDelete(257334).as('deleteRequest');\n \n-        it('should show loading on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n+  //         page.pauseTimers();\n+  //         todos.titleField(0).type('{enter}');\n \n-          page.pauseTimers();\n-          todos.titleField(0).type('{enter}');\n+  //         todos.assertLoading(0);\n+  //       });\n \n-          todos.assertLoading(0);\n-        });\n+  //       it('should delete a todo on success', () => {\n+  //         page.mockDelete(257334).as('deleteRequest');\n+  //         todos.titleField(0).type('{enter}');\n+  //         cy.wait('@deleteRequest');\n \n-        it('should delete a todo on success', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n+  //         todos.assertCount(4);\n+  //         todos.assertTitle(0, 'CSS');\n+  //       });\n \n-          todos.assertCount(4);\n-          todos.assertTitle(0, 'CSS');\n-        });\n+  //       it('should show deleting error message on fail', () => {\n+  //         // to prevent Cypress from failing the test on uncaught exception\n+  //         cy.once('uncaught:exception', () => false);\n \n-        it('should show deleting error message on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n+  //         page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n \n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+  //         todos.titleField(0).type('{enter}');\n+  //         cy.wait('@deleteRequest');\n \n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n+  //         errorMessage.assertVisible();\n+  //         errorMessage.assertText('Unable to delete a todo')\n+  //       });\n \n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to delete a todo')\n-        });\n+  //       // this test may be unstable\n+  //       it.skip('should hide loader on fail', () => {\n+  //         // to prevent Cypress from failing the test on uncaught exception\n+  //         cy.once('uncaught:exception', () => false);\n \n-        // this test may be unstable\n-        it.skip('should hide loader on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n+  //         page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n \n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+  //         todos.titleField(0).type('{enter}');\n+  //         cy.wait('@deleteRequest');\n+  //         page.flushJSTimers();\n \n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-          page.flushJSTimers();\n+  //         todos.assertNotLoading(0);\n+  //       });\n \n-          todos.assertNotLoading(0);\n-        });\n+  //       it('should stay open on fail', () => {\n+  //         // to prevent Cypress from failing the test on uncaught exception\n+  //         cy.once('uncaught:exception', () => false);\n \n-        it('should stay open on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n+  //         page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n \n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+  //         todos.titleField(0).type('{enter}');\n+  //         cy.wait('@deleteRequest');\n \n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n+  //         todos.titleField(0).should('exist');\n+  //       });\n \n-          todos.titleField(0).should('exist');\n-        });\n+  //       it('should be closed on Escape', () => {\n+  //         todos.titleField(0).type('{esc}');\n \n-        it('should be closed on Escape', () => {\n-          todos.titleField(0).type('{esc}');\n+  //         todos.titleField(0).should('not.exist');\n+  //       });\n \n-          todos.titleField(0).should('not.exist');\n-        });\n+  //       it('should preserve current title on close', () => {\n+  //         todos.titleField(0).type('{esc}');\n \n-        it('should preserve current title on close', () => {\n-          todos.titleField(0).type('{esc}');\n+  //         todos.title(0).should('have.text', 'HTML');\n+  //       });\n+  //     });\n \n-          todos.title(0).should('have.text', 'HTML');\n-        });\n-      });\n+  //     describe('on Blur', () => {\n+  //       // it('should save', () => {\n+  //       //   page.mockUpdate(257334).as('renameRequest');\n \n-      describe('on Blur', () => {\n-        // it('should save', () => {\n-        //   page.mockUpdate(257334).as('renameRequest');\n+  //       //   todos.title(0).trigger('dblclick');\n+  //       //   todos.titleField(0).clear()\n+  //       //   todos.titleField(0).type('New title');\n+  //       //   todos.titleField(0).blur();\n+  //       //   cy.wait('@renameRequest');\n \n-        //   todos.title(0).trigger('dblclick');\n-        //   todos.titleField(0).clear()\n-        //   todos.titleField(0).type('New title');\n-        //   todos.titleField(0).blur();\n-        //   cy.wait('@renameRequest');\n+  //       //   // just in case\n+  //       //   page.flushJSTimers();\n \n-        //   // just in case\n-        //   page.flushJSTimers();\n+  //       //   todos.assertTitle(0, 'New title');\n+  //       // });\n \n-        //   todos.assertTitle(0, 'New title');\n-        // });\n+  //       // it('should cancel if title was not changed', () => {\n+  //       //   const spy = cy.stub()\n+  //       //     .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+  //       //     .as('renameCallback');\n \n-        // it('should cancel if title was not changed', () => {\n-        //   const spy = cy.stub()\n-        //     .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-        //     .as('renameCallback');\n+  //       //   page.mockUpdate(257334, spy);\n \n-        //   page.mockUpdate(257334, spy);\n+  //       //   todos.title(0).trigger('dblclick');\n+  //       //   todos.titleField(0).blur();\n \n-        //   todos.title(0).trigger('dblclick');\n-        //   todos.titleField(0).blur();\n+  //       //   cy.get('@renameCallback').should('not.be.called');\n+  //       //   page.flushJSTimers();\n+  //       //   todos.titleField(0).should('not.exist');\n+  //       //   todos.assertTitle(0, 'HTML');\n+  //       // });\n \n-        //   cy.get('@renameCallback').should('not.be.called');\n-        //   page.flushJSTimers();\n-        //   todos.titleField(0).should('not.exist');\n-        //   todos.assertTitle(0, 'HTML');\n-        // });\n-\n         it('should delete if title is empty', () => {\n           page.mockDelete(257334).as('deleteRequest');\n \n           todos.title(0).trigger('dblclick');\n"
                },
                {
                    "date": 1715618875420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1769 @@\n+/// <reference types='cypress' />\n+/// <reference types='../support' />\n+\n+import mixedTodos from '../fixtures/todos.json';\n+\n+//#region Page Objects\n+const page = {\n+  toggleAllButton: () => cy.byDataCy('ToggleAllButton'),\n+  newTodoField: () => cy.byDataCy('NewTodoField'),\n+  todosCounter: () => cy.byDataCy('TodosCounter'),\n+  clearCompletedButton: () => cy.byDataCy('ClearCompletedButton'),\n+\n+  visit: (url = '/') => {\n+    cy.visit(url, {\n+      onBeforeLoad: win => win.localStorage.setItem('user', '{ \"id\": 1 }'),\n+    });\n+\n+    // to wait until React App is loaded\n+    cy.get('.todoapp__title').should('exist');\n+  },\n+  pauseTimers: () => cy.clock(),\n+\n+  flushJSTimers: (delay = 1000) => {\n+    cy.clock().then(clock => {\n+      clock.tick(delay);\n+      clock.restore();\n+    });\n+\n+    cy.wait(50);\n+  },\n+\n+  /**\n+   * @param {*} response - can be a valid response object or stub\n+   *\n+   * { body: [] }\n+   * { statusCode: 503: body: 'Service Unavailable' }\n+   * spy = cy.stub().callsFake(req => req.reply(response)).as('alias')\n+   */\n+  mockLoad: (response = { fixture: 'todos' }) => {\n+    return cy.intercept('**/todos?userId=*', response);\n+  },\n+  mockCreate: (response) => {\n+    const options = { method: 'POST', url: '**/todos' };\n+\n+    const spy = cy.stub()\n+      .callsFake(req => req.reply({\n+        statusCode: 201,\n+        body: { ...req.body, id: Math.random() },\n+      }))\n+      .as('createCallback');\n+\n+    return cy.intercept(options, response || spy);\n+  },\n+  mockDelete: (id, response) => {\n+    const options = { method: 'DELETE', url: `**/todos/${id}` };\n+\n+    return cy.intercept(options, response || { body: '1' });\n+  },\n+  mockUpdate: (id, response) => {\n+    const todo = mixedTodos.find(todo => todo.id === id) || {};\n+    const options = { method: 'PATCH', url: `**/todos/${id}` };\n+\n+    const spy = cy.stub()\n+      .callsFake(req => req.reply({ body: { ...todo, ...req.body, id } }))\n+      .as('updateCallback');\n+\n+    return cy.intercept(options, response || spy);\n+  },\n+};\n+\n+const todos = {\n+  el: index => cy.byDataCy('Todo').eq(index),\n+  deleteButton: index => todos.el(index).byDataCy('TodoDelete'),\n+  statusToggler: index => todos.el(index).byDataCy('TodoStatus'),\n+  title: index => todos.el(index).byDataCy('TodoTitle'),\n+  titleField: index => todos.el(index).byDataCy('TodoTitleField'),\n+\n+  assertCount: length => cy.byDataCy('Todo').should('have.length', length),\n+  assertTitle: (index, title) => todos.title(index).should('have.text', title),\n+  assertLoading: index => todos.el(index).byDataCy('TodoLoader').should('have.class', 'is-active'),\n+  assertNotLoading: index => todos.el(index).byDataCy('TodoLoader').should('not.have.class', 'is-active'),\n+  assertCompleted: index => todos.el(index).should('have.class', 'completed'),\n+  assertNotCompleted: index => todos.el(index).should('not.have.class', 'completed'),\n+};\n+\n+const errorMessage = {\n+  el: () => cy.byDataCy('ErrorNotification'),\n+  closeButton: () => errorMessage.el().byDataCy('HideErrorButton'),\n+  assertVisible: () => errorMessage.el().should('not.have.class', 'hidden'),\n+  assertHidden: () => errorMessage.el().should('have.class', 'hidden'),\n+  assertText: text => errorMessage.el().should('have.text', text),\n+};\n+\n+const FilterLinkKeys = {\n+  all: 'FilterLinkAll',\n+  active: 'FilterLinkActive',\n+  completed: 'FilterLinkCompleted',\n+};\n+\n+const filter = {\n+  el: () => cy.byDataCy('Filter'),\n+  link: type => cy.byDataCy(FilterLinkKeys[type]),\n+  assertVisible: () => filter.el().should('exist'),\n+  assertHidden: () => filter.el().should('not.exist'),\n+  assertSelected: type => filter.link(type).should('have.class', 'selected'),\n+  assertNotSelected: type => filter.link(type).should('not.have.class', 'selected'),\n+};\n+//#endregion\n+\n+let failed = false;\n+\n+Cypress.on('fail', (e) => {\n+  failed = true;\n+  throw e;\n+});\n+\n+describe('', () => {\n+  beforeEach(() => {\n+    if (failed) Cypress.runner.stop();\n+  });\n+\n+  describe('Page with no todos', () => {\n+    it('should send 1 todos request', () => {\n+      const spy = cy.stub()\n+        .callsFake(req => req.reply({ body: [] }))\n+        .as('loadCallback')\n+\n+      page.mockLoad(spy).as('loadRequest');\n+      page.visit();\n+\n+      cy.wait('@loadRequest');\n+      cy.wait(500);\n+\n+      cy.get('@loadCallback').should('have.callCount', 1);\n+    });\n+\n+    describe('', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have NewTodoField', () => {\n+        page.newTodoField().should('exist');\n+      });\n+\n+      it('should not have Todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+  //     it('should not have Footer', () => {\n+  //       filter.assertHidden();\n+  //       page.clearCompletedButton().should('not.exist');\n+  //       page.todosCounter().should('not.exist');\n+  //     });\n+\n+  //     it('should not show error message', () => {\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+\n+  //   describe('on loading error', () => {\n+  //     beforeEach(() => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should show error', () => {\n+  //       errorMessage.assertVisible();\n+  //     });\n+\n+  //     it('should show correct message', () => {\n+  //       errorMessage.assertText('Unable to load todos');\n+  //     });\n+\n+  //     it('should hide error after 3 seconds', () => {\n+  //       // just in case\n+  //       cy.wait(50);\n+\n+  //       cy.clock();\n+  //       cy.tick(2500);\n+  //       errorMessage.assertVisible();\n+\n+  //       cy.tick(500);\n+  //       errorMessage.assertHidden();\n+  //     });\n+\n+  //     it('should hide error on close button click', () => {\n+  //       errorMessage.closeButton().click();\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+  // });\n+\n+  // describe('Page with mixed todos', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad().as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n+  //   });\n+\n+  //   it('should have NewTodoField', () => {\n+  //     page.newTodoField().should('exist');\n+  //   });\n+\n+  //   it('should have all loaded todos', () => {\n+  //     todos.assertCount(5);\n+  //   });\n+\n+  //   it('should have delete buttons for every todo', () => {\n+  //     todos.deleteButton(0).should('exist');\n+  //   });\n+\n+  //   it('should not have loaders', () => {\n+  //     todos.assertNotLoading(0);\n+  //     todos.assertNotLoading(1);\n+  //     todos.assertNotLoading(2);\n+  //     todos.assertNotLoading(3);\n+  //     todos.assertNotLoading(4);\n+  //   })\n+\n+  //   it('should have correct todo titles', () => {\n+  //     todos.assertTitle(0, 'HTML');\n+  //     todos.assertTitle(1, 'CSS');\n+  //     todos.assertTitle(2, 'JS');\n+  //     todos.assertTitle(3, 'TypeScript');\n+  //     todos.assertTitle(4, 'React');\n+  //   });\n+\n+  //   it('should higlight all completed todos', () => {\n+  //     todos.assertCompleted(0);\n+  //     todos.assertCompleted(1);\n+  //     todos.assertCompleted(2);\n+  //   });\n+\n+  //   it('should not higlight not completed todos', () => {\n+  //     todos.assertNotCompleted(3);\n+  //     todos.assertNotCompleted(4);\n+  //   });\n+\n+  //   it('should have correct completed statuses', () => {\n+  //     todos.statusToggler(0).should('be.checked');\n+  //     todos.statusToggler(1).should('be.checked');\n+  //     todos.statusToggler(2).should('be.checked');\n+  //     todos.statusToggler(3).should('not.be.checked');\n+  //     todos.statusToggler(4).should('not.be.checked');\n+  //   });\n+\n+  //   it('should have Filter', () => {\n+  //     filter.assertVisible();\n+  //   });\n+\n+  //   it('should have todosCounter with a number of not completed todos', () => {\n+  //     page.todosCounter().should('have.text', '2 items left');\n+  //   });\n+\n+  //   it('should have clearCompletedButton', () => {\n+  //     page.clearCompletedButton().should('exist');\n+  //   });\n+\n+  //   it('should have Filter', () => {\n+  //     filter.assertVisible();\n+  //   });\n+\n+  //   it('should not show error message', () => {\n+  //     errorMessage.assertHidden();\n+  //   });\n+  // });\n+\n+  // describe('Filtering', () => {\n+  //   describe('with mixed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should have only filterLinkAll active', () => {\n+  //       filter.assertSelected('all');\n+  //       filter.assertNotSelected('active');\n+  //       filter.assertNotSelected('completed');\n+  //     });\n+\n+  //     it('should allow to select the active filter', () => {\n+  //       filter.link('active').click();\n+\n+  //       filter.assertNotSelected('all');\n+  //       filter.assertSelected('active');\n+  //       filter.assertNotSelected('completed');\n+  //     });\n+\n+  //     it('should show only active todos when active filter is selected', () => {\n+  //       filter.link('active').click();\n+\n+  //       todos.assertCount(2);\n+  //       todos.assertTitle(0, 'TypeScript');\n+  //       todos.assertTitle(1, 'React');\n+  //     });\n+\n+  //     it('should keep footer when active todos are shown', () => {\n+  //       filter.link('active').click();\n+\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //       filter.assertVisible();\n+  //       page.clearCompletedButton().should('exist');\n+  //     });\n+\n+  //     it('should allow to select the completed filter', () => {\n+  //       filter.link('completed').click();\n+\n+  //       filter.assertNotSelected('all');\n+  //       filter.assertNotSelected('active');\n+  //       filter.assertSelected('completed');\n+  //     });\n+\n+  //     it('should show only completed todos when completed filter is selected', () => {\n+  //       filter.link('completed').click();\n+\n+  //       todos.assertCount(3);\n+  //       todos.assertTitle(0, 'HTML');\n+  //       todos.assertTitle(1, 'CSS');\n+  //       todos.assertTitle(2, 'JS');\n+  //     });\n+\n+  //     it('should keep footer when completed todos are shown', () => {\n+  //       filter.link('completed').click();\n+\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //       filter.assertVisible();\n+  //       page.clearCompletedButton().should('exist');\n+  //     });\n+\n+  //     it('should allow to reset filter', () => {\n+  //       filter.link('completed').click();\n+  //       filter.link('all').click();\n+\n+  //       todos.assertCount(5);\n+  //       filter.assertSelected('all');\n+  //       filter.assertNotSelected('active');\n+  //       filter.assertNotSelected('completed');\n+  //     });\n+  //   });\n+\n+  //   describe('with active todos only', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should hide todos on completed selection', () => {\n+  //       filter.link('completed').click();\n+\n+  //       todos.assertCount(0);\n+  //     });\n+\n+  //     it('should keep footer on completed selection', () => {\n+  //       filter.link('completed').click();\n+  //       filter.assertVisible();\n+  //     });\n+\n+  //     it('should keep todos counter on completed selection', () => {\n+  //       filter.link('completed').click();\n+  //       page.todosCounter().should('have.text', '5 items left');\n+  //     });\n+  //   });\n+\n+  //   describe('with completed todos only', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+  //   });\n+  // });\n+\n+  // describe('Adding a todo', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad().as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n+  //   });\n+\n+  //   it('should focus text field by default', () => {\n+  //     page.newTodoField().should('be.focused');\n+  //   });\n+\n+  //   describe('if title is empty', () => {\n+  //     beforeEach(() => {\n+  //       page.mockCreate();\n+  //       page.newTodoField().type('{enter}');\n+  //     });\n+\n+  //     it('should not send a request', () => {\n+  //       cy.get('@createCallback').should('not.be.called');\n+  //     });\n+\n+  //     it('should keep text field focused', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+\n+  //     it('should display an error message', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Title should not be empty');\n+  //     });\n+\n+  //     it('should hide an error message after 3 seconds', () => {\n+  //       // just in case\n+  //       cy.wait(50);\n+\n+  //       cy.clock();\n+  //       cy.tick(3000);\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+\n+  //   describe('if title title has only whitespaces', () => {\n+  //     beforeEach(() => {\n+  //       page.mockCreate();\n+  //       page.newTodoField().type('     {enter}');\n+  //     });\n+\n+  //     it('should not send a request', () => {\n+  //       cy.get('@createCallback').should('not.be.called');\n+  //     });\n+\n+  //     it('should keep text field focused', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+\n+  //     it('should display an error message', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Title should not be empty');\n+  //     });\n+\n+  //     it('should hide an error message after 3 seconds', () => {\n+  //       // just in case\n+  //       cy.wait(50);\n+\n+  //       cy.clock();\n+  //       cy.tick(3000);\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+\n+  //   describe('after form submition before response is received', () => {\n+  //     beforeEach(() => {\n+  //       page.mockCreate();\n+  //       page.pauseTimers();\n+  //       page.newTodoField().type('Test Todo{enter}');\n+  //     });\n+\n+  //     it('should send a create request', () => {\n+  //       cy.tick(1000);\n+  //       cy.get('@createCallback').should('have.callCount', 1);\n+  //     });\n+\n+  //     it('should disable the input', () => {\n+  //       page.newTodoField().should('be.disabled');\n+  //     });\n+\n+  //     it('should keep entered text', () => {\n+  //       page.newTodoField().should('have.value', 'Test Todo');\n+  //     });\n+\n+  //     it('should create and show a temp TodoItem with Loader', () => {\n+  //       todos.assertCount(6);\n+  //       todos.assertLoading(5);\n+  //     });\n+\n+  //     it('should show a temp TodoItem with correct title', () => {\n+  //       todos.assertTitle(5, 'Test Todo');\n+  //     });\n+\n+  //     it('should show a not completed temp TodoItem', () => {\n+  //       todos.assertNotCompleted(5);\n+  //     });\n+\n+  //     it('should not show loaders for existing todos', () => {\n+  //       todos.assertNotLoading(0);\n+  //       todos.assertNotLoading(1);\n+  //       todos.assertNotLoading(2);\n+  //       todos.assertNotLoading(3);\n+  //       todos.assertNotLoading(4);\n+  //     });\n+\n+  //     it('should not update active counter', () => {\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n+  //   });\n+\n+  //   describe('on success response', () => {\n+  //     describe('', () => {\n+  //       beforeEach(() => {\n+  //         page.mockCreate().as('createRequest');\n+  //         page.newTodoField().type('Test Todo{enter}');\n+\n+  //         cy.wait('@createRequest');\n+  //       });\n+\n+  //       // this test may be flaky\n+  //       it.skip('should replace loader with a created todo', () => {\n+  //         page.flushJSTimers();\n+  //         todos.assertCount(6);\n+  //         todos.assertNotLoading(5);\n+  //       });\n+\n+  //       it('should add a todo with a correct title', () => {\n+  //         todos.assertTitle(5, 'Test Todo');\n+  //       });\n+\n+  //       it('should add a not completed todo', () => {\n+  //         todos.assertNotCompleted(5);\n+  //       });\n+\n+  //       it('should update active counter', () => {\n+  //         page.todosCounter().should('have.text', '3 items left');\n+  //       });\n+\n+  //       it('should enable the text field', () => {\n+  //         page.newTodoField().should('not.be.disabled');\n+  //       });\n+\n+  //       it('should not show error message', () => {\n+  //         errorMessage.assertHidden();\n+  //       });\n+\n+  //       it('should clear text field', () => {\n+  //         page.newTodoField().should('have.value', '');\n+  //       });\n+\n+  //       it('should focus text field', () => {\n+  //         page.newTodoField().should('be.focused');\n+  //       });\n+\n+  //       it('should allow to add one more todo', () => {\n+  //         page.mockCreate().as('createRequest2');\n+\n+  //         page.newTodoField().type('Hello world{enter}');\n+  //         cy.wait('@createRequest2');\n+  //         page.flushJSTimers();\n+\n+  //         todos.assertCount(7);\n+  //         // todos.assertNotLoading(6);\n+  //         todos.assertNotCompleted(6);\n+  //         todos.assertTitle(6, 'Hello world');\n+  //         page.todosCounter().should('have.text', '4 items left');\n+  //       });\n+  //     });\n+\n+  //     it('should add trimmed title', () => {\n+  //       page.mockCreate().as('createRequest');\n+\n+  //       page.newTodoField().type('  Other Title    {enter}');\n+  //       cy.wait('@createRequest');\n+\n+  //       // just in case\n+  //       page.flushJSTimers();\n+\n+  //       todos.assertTitle(5, 'Other Title');\n+  //     });\n+\n+  //     it('should keep current filter', () => {\n+  //       page.mockCreate().as('createRequest');\n+\n+  //       filter.link('active').click();\n+  //       page.newTodoField().type('Test Todo{enter}');\n+  //       cy.wait('@createRequest');\n+\n+  //       filter.assertSelected('active');\n+  //     });\n+  //   });\n+\n+  //   describe('on request fail', () => {\n+  //     beforeEach(() => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('createRequest');\n+\n+  //       page.newTodoField().type('Test Todo{enter}');\n+\n+  //       cy.wait('@createRequest');\n+  //     });\n+\n+  //     it('should show an error message', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Unable to add a todo');\n+  //     });\n+\n+  //     it('should hide an error message in 3 seconds', () => {\n+  //       cy.clock();\n+  //       cy.tick(2500);\n+\n+  //       errorMessage.assertVisible();\n+\n+  //       cy.tick(500);\n+  //       errorMessage.assertHidden();\n+  //     });\n+\n+  //     it('should remove a temp TodoItem on request fail', () => {\n+  //       todos.assertCount(5);\n+  //       todos.assertTitle(4, 'React');\n+  //     });\n+\n+  //     it('should enable the text field on request fail', () => {\n+  //       page.newTodoField().should('not.be.disabled');\n+  //     });\n+\n+  //     it('should keep the entered text on request fail', () => {\n+  //       page.newTodoField().should('have.value', 'Test Todo');\n+  //     });\n+\n+  //     it('should focus text field', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+\n+  //     it('should not update active counter', () => {\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n+\n+  //     it('should immediately hide an error message on new request', () => {\n+  //       page.newTodoField().type(`{enter}`);\n+  //       errorMessage.assertHidden();\n+  //     });\n+\n+  //     it('should show an error message again on a next fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('createRequest2');\n+\n+  //       page.newTodoField().type(`{enter}`);\n+  //       cy.wait('@createRequest2');\n+\n+  //       errorMessage.assertVisible();\n+  //     });\n+\n+  //     it('should keep an error message for 3s after the last fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('createRequest2');\n+\n+  //       cy.clock();\n+\n+  //       cy.tick(2000);\n+  //       page.newTodoField().type(`{enter}`);\n+  //       cy.tick(500);\n+  //       cy.wait('@createRequest2');\n+  //       cy.tick(2000);\n+\n+  //       errorMessage.assertVisible();\n+  //     });\n+\n+  //     it('should allow to add a todo', () => {\n+  //       page.mockCreate().as('createRequest2');\n+  //       page.newTodoField().type('{enter}');\n+\n+  //       cy.wait('@createRequest2');\n+  //       page.flushJSTimers();\n+\n+  //       todos.assertCount(6);\n+  //       // todos.assertNotLoading(5);\n+  //       todos.assertNotCompleted(5);\n+  //       todos.assertTitle(5, 'Test Todo');\n+\n+  //       page.todosCounter().should('have.text', '3 items left');\n+  //     });\n+  //   });\n+  // });\n+\n+  // describe('Adding a first todo', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad({ body: [] }).as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n+\n+  //     page.mockCreate().as('createRequest');\n+  //     page.newTodoField().type('First todo{enter}');\n+\n+  //     cy.wait('@createRequest');\n+  //   });\n+\n+  //   it('should show a new todos', () => {\n+  //     todos.assertCount(1);\n+  //     todos.assertTitle(0, 'First todo');\n+  //     todos.assertNotCompleted(0);\n+  //   });\n+\n+  //   it('should show Filter', () => {\n+  //     filter.assertVisible();\n+  //   });\n+\n+  //   it('should show todosCounter', () => {\n+  //     page.todosCounter().should('contain.text', '1 item');\n+  //   });\n+  // });\n+\n+  // describe('Individual Todo Deletion', () => {\n+  //   describe('Default behavior', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n+  //       page.mockDelete(257334);\n+  //       page.pauseTimers();\n+  //       todos.deleteButton(0).click();\n+\n+  //       todos.assertLoading(0);\n+  //     });\n+\n+  //     it('should not delete a todo before successful response', () => {\n+  //       page.mockDelete(257334);\n+  //       page.pauseTimers();\n+  //       todos.deleteButton(0).click();\n+\n+  //       todos.assertCount(5);\n+  //     });\n+\n+  //     it('should remove the todo from the list on a successful API response', () => {\n+  //       page.mockDelete(257334).as('deleteRequest');\n+\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       todos.assertCount(4);\n+  //       todos.assertTitle(0, 'CSS');\n+  //     });\n+\n+  //     it('should focus text field after todo deletion', () => {\n+  //       page.mockDelete(257334).as('deleteRequest');\n+\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+\n+  //     it('should not remove the todo from the list on an API error', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       todos.assertCount(5);\n+  //       todos.assertTitle(0, 'HTML');\n+  //     });\n+\n+  //     it('should show an error message on an API error', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Unable to delete a todo');\n+  //     });\n+\n+  //     it('should adjust the active todo count correctly after successful deletion', () => {\n+  //       page.mockDelete(257338).as('deleteRequest');\n+  //       todos.deleteButton(4).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       page.todosCounter().should('contain.text', '1 item');\n+  //     });\n+\n+  //     it('should not adjust the active todo count after failed deletion', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n+  //         .as('deleteRequest');\n+\n+  //       todos.deleteButton(4).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n+  //   });\n+\n+  //   describe('Last todo deletion', () => {\n+  //     beforeEach(() => {\n+  //       const todo = {\n+  //         \"id\": 257334,\n+  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+  //         \"userId\": 1,\n+  //         \"title\": \"HTML\",\n+  //         \"completed\": false\n+  //       };\n+\n+  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+\n+  //       page.mockDelete(257334);\n+  //       todos.deleteButton(0).click();\n+  //     });\n+\n+  //     it('should hide todos', () => {\n+  //       todos.assertCount(0);\n+  //     });\n+\n+  //     it('should hide footer', () => {\n+  //       filter.assertHidden();\n+  //       page.clearCompletedButton().should('not.exist');\n+  //       page.todosCounter().should('not.exist');\n+  //     });\n+\n+  //     it('should focus text field after todo deletion', () => {\n+  //       page.newTodoField().should('be.focused');\n+  //     });\n+  //   });\n+  // });\n+\n+  // describe('Group Todo Deletion', () => {\n+  //   describe('with no completed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should not have active ClearCompleted button', () => {\n+  //       page.clearCompletedButton().should('be.disabled');\n+  //     });\n+  //   });\n+\n+  //   describe('with some completed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should have ClearCompleted button enabled', () => {\n+  //       page.clearCompletedButton().should('not.be.disabled');\n+  //     });\n+\n+  //     it('should send individual deletion request for each completed todo', () => {\n+  //       page.mockDelete(257334).as('deleteRequest1');\n+  //       page.mockDelete(257335).as('deleteRequest2');\n+  //       page.mockDelete(257336).as('deleteRequest3');\n+\n+  //       page.clearCompletedButton().click();\n+\n+  //       cy.wait('@deleteRequest1');\n+  //       cy.wait('@deleteRequest2');\n+  //       cy.wait('@deleteRequest3');\n+  //     });\n+\n+  //     describe('on success', () => {\n+  //       beforeEach(() => {\n+  //         page.mockDelete(257334).as('deleteRequest1');\n+  //         page.mockDelete(257335).as('deleteRequest2');\n+  //         page.mockDelete(257336).as('deleteRequest3');\n+\n+  //         page.clearCompletedButton().click();\n+\n+  //         cy.wait('@deleteRequest1');\n+  //         cy.wait('@deleteRequest2');\n+  //         cy.wait('@deleteRequest3');\n+  //       });\n+\n+  //       it('should remove all completed todos from the list', () => {\n+  //         todos.assertCount(2);\n+  //         todos.assertTitle(0, 'TypeScript');\n+  //         todos.assertTitle(1, 'React');\n+  //       });\n+\n+  //       it('should disable ClearCompleted button', () => {\n+  //         page.clearCompletedButton().should('be.disabled');\n+  //       });\n+\n+  //       it('should focus the text field', () => {\n+  //         page.newTodoField().should('be.focused');\n+  //       });\n+  //     });\n+\n+  //     describe('on a single fail', () => {\n+  //       beforeEach(() => {\n+  //         // to prevent Cypress from failing the test on uncaught exception\n+  //         cy.once('uncaught:exception', () => false);\n+\n+  //         page.mockDelete(257334).as('deleteRequest1');\n+  //         page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n+  //         page.mockDelete(257336).as('deleteRequest3');\n+\n+  //         page.clearCompletedButton().click();\n+\n+  //         cy.wait('@deleteRequest1');\n+  //         cy.wait('@deleteRequest2');\n+  //         cy.wait('@deleteRequest3');\n+  //       });\n+\n+  //       it('should show an error message if any of the group deletions fails', () => {\n+  //         errorMessage.assertVisible();\n+  //         errorMessage.assertText('Unable to delete a todo');\n+  //       });\n+\n+  //       it('should remove todos with success responses and keep todos with errors', () => {\n+  //         todos.assertCount(3);\n+  //         todos.assertTitle(0, 'CSS');\n+  //         todos.assertTitle(1, 'TypeScript');\n+  //       });\n+\n+  //       it('should not disable ClearCompleted button', () => {\n+  //         page.clearCompletedButton().should('not.be.disabled');\n+  //       });\n+  //     });\n+  //   });\n+\n+  //   describe('with all todos completed', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+\n+  //       page.mockDelete(257334).as('deleteRequest1');\n+  //       page.mockDelete(257335).as('deleteRequest2');\n+  //       page.mockDelete(257336).as('deleteRequest3');\n+  //       page.mockDelete(257337).as('deleteRequest4');\n+  //       page.mockDelete(257338).as('deleteRequest5');\n+\n+  //       page.clearCompletedButton().click();\n+\n+  //       cy.wait('@deleteRequest1');\n+  //       cy.wait('@deleteRequest2');\n+  //       cy.wait('@deleteRequest3');\n+  //       cy.wait('@deleteRequest4');\n+  //       cy.wait('@deleteRequest5');\n+  //     });\n+\n+  //     it('should hide todos after clearing all completed todos', () => {\n+  //       todos.assertCount(0);\n+  //     });\n+\n+  //     it('should hide footer after clearing all completed todos', () => {\n+  //       filter.assertHidden();\n+  //       page.clearCompletedButton().should('not.exist');\n+  //       page.todosCounter().should('not.exist');\n+  //     });\n+  //   });\n+  // });\n+\n+  // describe('Todo Toggling', () => {\n+  //   beforeEach(() => {\n+  //     page.mockLoad().as('loadRequest');\n+  //     page.visit();\n+  //     cy.wait('@loadRequest');\n+  //   });\n+\n+  //   describe('before receving response', () => {\n+  //     beforeEach(() => {\n+  //       page.mockUpdate(257334).as('updateRequest');\n+  //     });\n+\n+  //     it('should send an update request', () => {\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest');\n+  //     });\n+\n+  //     it('should show loader after click', () => {\n+  //       page.pauseTimers();\n+  //       todos.statusToggler(0).click();\n+\n+  //       todos.assertLoading(0);\n+  //     });\n+\n+  //     it('should not show error message after click', () => {\n+  //       page.pauseTimers();\n+  //       todos.statusToggler(0).click();\n+\n+  //       errorMessage.assertHidden();\n+  //     });\n+\n+  //     it('should not hide a todo if filtered', () => {\n+  //       filter.link('completed').click();\n+  //       page.pauseTimers();\n+  //       cy.tick(1000); // flush JS animation\n+  //       todos.statusToggler(0).click();\n+\n+  //       todos.assertCount(3);\n+  //       todos.assertTitle(0, 'HTML');\n+  //     });\n+  //   });\n+\n+  //   describe('on success', () => {\n+  //     beforeEach(() => {\n+  //       page.mockUpdate(257334).as('updateRequest');\n+\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest');\n+  //     });\n+\n+  //     it('should toggle a todo', () => {\n+  //       todos.assertNotCompleted(0);\n+  //       todos.statusToggler(0).should('not.be.checked');\n+  //     });\n+\n+  //     it('should cancel loading', () => {\n+  //       page.flushJSTimers();\n+  //       todos.assertNotLoading(0);\n+  //     });\n+\n+  //     it('should update the counter', () => {\n+  //       page.todosCounter().should('have.text', '3 items left');\n+  //     });\n+\n+  //     it('should not show an error message', () => {\n+  //       errorMessage.assertHidden();\n+  //     });\n+  //   });\n+\n+  //   describe('on fail', () => {\n+  //     beforeEach(() => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('updateRequest');\n+\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest');\n+  //     });\n+\n+  //     it('should show an error', () => {\n+  //       errorMessage.assertVisible();\n+  //       errorMessage.assertText('Unable to update a todo');\n+  //     });\n+\n+  //     it('should not toggle a todo', () => {\n+  //       todos.assertCompleted(0);\n+  //       todos.statusToggler(0).should('be.checked');\n+  //     });\n+\n+  //     it('should cancel loading', () => {\n+  //       page.flushJSTimers();\n+  //       todos.assertNotLoading(0);\n+  //     });\n+\n+  //     it('should not update the counter', () => {\n+  //       page.todosCounter().should('have.text', '2 items left');\n+  //     });\n+\n+  //     it('should allow to toggle again', () => {\n+  //       page.mockUpdate(257334).as('updateRequest2');\n+\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest2');\n+\n+  //       todos.assertNotCompleted(0);\n+  //     });\n+  //   });\n+\n+  //   describe('if filtered', () => {\n+  //     beforeEach(() => {\n+  //       filter.link('completed').click();\n+  //     });\n+\n+  //     it('should hide a todo on success', () => {\n+  //       page.mockUpdate(257334).as('updateRequest');\n+\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       todos.assertCount(2);\n+  //       todos.assertTitle(0, 'CSS');\n+  //     });\n+\n+  //     it('should show a todo on success when selected an oposite filter', () => {\n+  //       page.mockUpdate(257334).as('updateRequest');\n+\n+  //       todos.statusToggler(0).click();\n+  //       filter.link('active').click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       todos.assertCount(3);\n+  //       todos.assertTitle(0, 'HTML');\n+  //     });\n+\n+  //     it('should not hide a todo on fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+  //         .as('updateRequest');\n+\n+  //       todos.statusToggler(0).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       todos.assertCount(3);\n+  //       todos.assertTitle(0, 'HTML');\n+  //     });\n+  //   });\n+  // });\n+\n+\n+\n+\n+\n+\n+\n+  // describe('Toggle All Button', () => {\n+  //   describe('if there are no todos', () => {\n+  //     it('should not be visible while loading todos', () => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n+\n+  //       page.pauseTimers();\n+  //       page.visit();\n+\n+  //       page.toggleAllButton().should('not.exist');\n+  //     });\n+\n+  //     it('should not be visible when loaded', () => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+\n+  //       page.toggleAllButton().should('not.exist');\n+  //     });\n+\n+  //     it('should appear after adding a todo', () => {\n+  //       page.mockLoad({ body: [] }).as('loadRequest');\n+  //       page.mockCreate().as('createRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+\n+  //       page.newTodoField().type('First todo{enter}');\n+  //       cy.wait('@createRequest');\n+\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should disappear after removing the last todo', () => {\n+  //       const todo = {\n+  //         \"id\": 257334,\n+  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+  //         \"userId\": 1,\n+  //         \"title\": \"HTML\",\n+  //         \"completed\": false\n+  //       };\n+\n+  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n+  //       page.mockDelete(257334).as('deleteRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+\n+  //       todos.deleteButton(0).click();\n+  //       cy.wait('@deleteRequest');\n+\n+  //       page.toggleAllButton().should('not.exist');\n+  //     });\n+  //   });\n+\n+  //   describe('if all todos are completed', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should stay visible after filtering out all the todos', () => {\n+  //       filter.link('active').click();\n+\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should be active', () => {\n+  //       page.toggleAllButton().should('have.class', 'active');\n+  //     });\n+\n+  //     it('should become not active after toggling a todo', () => {\n+  //       page.mockUpdate(257335).as('updateRequest');\n+  //       todos.statusToggler(1).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     it('should stay active after a todo toggling fail', () => {\n+  //       // to prevent Cypress from failing the test on uncaught exception\n+  //       cy.once('uncaught:exception', () => false);\n+\n+  //       page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n+  //       todos.statusToggler(1).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       page.toggleAllButton().should('have.class', 'active');\n+  //     });\n+\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334).as('updateRequest4');\n+  //         page.mockUpdate(257335).as('updateRequest5');\n+  //         page.mockUpdate(257336).as('updateRequest6');\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n+\n+  //         page.toggleAllButton().click();\n+\n+  //         cy.wait('@updateRequest4');\n+  //         cy.wait('@updateRequest5');\n+  //         cy.wait('@updateRequest6');\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n+\n+  //       it('should send requests for all todos', () => {\n+  //         // if before each pass\n+  //       });\n+\n+  //       it('should make all todos active', () => {\n+  //         todos.assertNotCompleted(0);\n+  //         todos.assertNotCompleted(1);\n+  //         todos.assertNotCompleted(2);\n+  //         todos.assertNotCompleted(3);\n+  //         todos.assertNotCompleted(4);\n+  //       });\n+\n+  //       it('should become not active', () => {\n+  //         page.toggleAllButton().should('not.have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n+\n+  //   describe('if all todos are active', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should not be active', () => {\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     it('should not become active after toggling a todo', () => {\n+  //       page.mockUpdate(257335).as('updateRequest');\n+  //       todos.statusToggler(1).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334).as('updateRequest4');\n+  //         page.mockUpdate(257335).as('updateRequest5');\n+  //         page.mockUpdate(257336).as('updateRequest6');\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n+\n+  //         page.toggleAllButton().click();\n+\n+  //         cy.wait('@updateRequest4');\n+  //         cy.wait('@updateRequest5');\n+  //         cy.wait('@updateRequest6');\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n+\n+  //       it('should send requests for all todos', () => {\n+  //         // if before each pass\n+  //       });\n+\n+  //       it('should make all todos completed', () => {\n+  //         todos.assertCompleted(0);\n+  //         todos.assertCompleted(1);\n+  //         todos.assertCompleted(2);\n+  //         todos.assertCompleted(3);\n+  //         todos.assertCompleted(4);\n+  //       });\n+\n+  //       it('should become active', () => {\n+  //         page.toggleAllButton().should('have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n+\n+  //   describe('if there are some mixed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should not be active', () => {\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     it('should become active after completing all todos', () => {\n+  //       page.mockUpdate(257337).as('updateRequest1');\n+  //       page.mockUpdate(257338).as('updateRequest2');\n+\n+  //       todos.statusToggler(3).click();\n+  //       cy.wait('@updateRequest1');\n+  //       todos.statusToggler(4).click();\n+  //       cy.wait('@updateRequest2');\n+\n+  //       page.toggleAllButton().should('have.class', 'active');\n+  //     });\n+\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334, cy.stub().as('update4'));\n+  //         page.mockUpdate(257335, cy.stub().as('update5'));\n+  //         page.mockUpdate(257336, cy.stub().as('update6'));\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n+\n+  //         page.toggleAllButton().click();\n+\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n+\n+  //       it('should send requests only for not completed todos', () => {\n+  //         cy.get('@update4').should('not.be.called');\n+  //         cy.get('@update5').should('not.be.called');\n+  //         cy.get('@update6').should('not.be.called');\n+  //       });\n+\n+  //       it('should make all todos completed', () => {\n+  //         todos.assertCompleted(0);\n+  //         todos.assertCompleted(1);\n+  //         todos.assertCompleted(2);\n+  //         todos.assertCompleted(3);\n+  //         todos.assertCompleted(4);\n+  //       });\n+\n+  //       it('should become active', () => {\n+  //         page.toggleAllButton().should('have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n+  // });\n+\n+  describe('Renaming', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should not show forms by default', () => {\n+      todos.titleField(0).should('not.exist');\n+      todos.titleField(1).should('not.exist');\n+      todos.titleField(2).should('not.exist');\n+      todos.titleField(3).should('not.exist');\n+      todos.titleField(4).should('not.exist');\n+    });\n+\n+    describe('Edit Form', () => {\n+      // describe('by default', () => {\n+      //   it('should be opened on dblclick', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(0).should('exist');\n+      //   });\n+\n+      //   it('should have current value', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(0).should('have.value', 'HTML');\n+      //   });\n+\n+      //   it('should be focused', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(0).should('be.focused');\n+      //   });\n+\n+      //   it('should hide a title', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.title(0).should('not.exist');\n+      //   });\n+\n+      //   it('should hide DeleteButton', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.deleteButton(0).should('not.exist');\n+      //   });\n+\n+      //   it('should keep StatusToggler', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.statusToggler(0).should('exist');\n+      //   });\n+\n+      //   it('should not open forms for other todos', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(1).should('not.exist');\n+      //     todos.titleField(2).should('not.exist');\n+      //     todos.titleField(3).should('not.exist');\n+      //     todos.titleField(4).should('not.exist');\n+      //   });\n+\n+      //   it('should not send a request on change', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n+\n+      //     page.mockUpdate(257334, spy);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123');\n+\n+      //     cy.get('@renameCallback').should('not.be.called');\n+      //   });\n+      // });\n+\n+      // describe('on Escape', () => {\n+      //   it('should be closed', () => {\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n+\n+      //     todos.titleField(0).should('not.exist');\n+      //   });\n+\n+      //   it('should keep current title', () => {\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n+\n+      //     todos.assertTitle(0, 'HTML');\n+      //   });\n+\n+      //   it('should not send a request', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n+\n+      //     page.mockUpdate(257334, spy);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n+\n+      //     cy.get('@renameCallback').should('not.be.called');\n+      //   });\n+      // });\n+\n+      // describe('on enter before recieved a response', () => {\n+      //   it('should send a request', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n+\n+      //     page.mockUpdate(257334, spy);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123{enter}');\n+\n+      //     cy.get('@renameCallback').should('have.callCount', 1);\n+      //   });\n+\n+      //   it('should show loader', () => {\n+      //     page.mockUpdate(257334);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     page.pauseTimers();\n+      //     todos.titleField(0).type('123{enter}');\n+\n+      //     todos.assertLoading(0);\n+      //   });\n+\n+      //   // It depend on your implementation\n+      //   it.skip('should stay while waiting', () => {\n+      //     page.mockUpdate(257334);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     page.pauseTimers();\n+      //     todos.titleField(0).type('123{enter}');\n+\n+      //     todos.titleField(0).should('exist');\n+      //   });\n+      // });\n+\n+      // describe('on success', () => {\n+      //   beforeEach(() => {\n+      //     page.mockUpdate(257334).as('renameRequest');\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).clear()\n+      //   });\n+\n+      //   it('should cancel loading', () => {\n+      //     todos.titleField(0).type('123{enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n+\n+      //     todos.assertNotLoading(0);\n+      //   });\n+\n+      //   it('should be closed', () => {\n+      //     todos.titleField(0).type('123{enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n+\n+      //     todos.titleField(0).should('not.exist');\n+      //   });\n+\n+      //   it('should show the updated title', () => {\n+      //     todos.titleField(0).type('Something{enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n+\n+      //     todos.assertTitle(0, 'Something');\n+      //   });\n+\n+      //   it('should show trim the new title', () => {\n+      //     todos.titleField(0).type('   Some new title      {enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n+\n+      //     todos.assertTitle(0, 'Some new title');\n+      //   });\n+      // });\n+\n+      describe('on fail', () => {\n+        beforeEach(() => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+        });\n+\n+        it('should cancel loading on fail', () => {\n+          page.flushJSTimers();\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should stay open on fail', () => {\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should show error message', () => {\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to update a todo');\n+        });\n+\n+        it('should hide error message in 3s', () => {\n+          page.flushJSTimers(3000);\n+\n+          errorMessage.assertHidden();\n+        });\n+      });\n+\n+      describe('if title was not changed', () => {\n+        it('should not send a request on enter', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+\n+        it('should be close on enter', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should be closed on Escape', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should preserve current title on save', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.assertTitle(0, 'HTML');\n+        });\n+      });\n+\n+      describe('if title became empty', () => {\n+        beforeEach(() => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+        });\n+\n+        it('should not send an update request on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+\n+        it('should send a delete request on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.wait('@deleteRequest');\n+        });\n+\n+        it('should show loading on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+\n+          page.pauseTimers();\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.assertLoading(0);\n+        });\n+\n+        it('should delete a todo on success', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          todos.assertCount(4);\n+          todos.assertTitle(0, 'CSS');\n+        });\n+\n+        it('should show deleting error message on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to delete a todo')\n+        });\n+\n+        // this test may be unstable\n+        it.skip('should hide loader on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should stay open on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should be closed on Escape', () => {\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should preserve current title on close', () => {\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.title(0).should('have.text', 'HTML');\n+        });\n+      });\n+\n+      describe('on Blur', () => {\n+        // it('should save', () => {\n+        //   page.mockUpdate(257334).as('renameRequest');\n+\n+        //   todos.title(0).trigger('dblclick');\n+        //   todos.titleField(0).clear()\n+        //   todos.titleField(0).type('New title');\n+        //   todos.titleField(0).blur();\n+        //   cy.wait('@renameRequest');\n+\n+        //   // just in case\n+        //   page.flushJSTimers();\n+\n+        //   todos.assertTitle(0, 'New title');\n+        // });\n+\n+        // it('should cancel if title was not changed', () => {\n+        //   const spy = cy.stub()\n+        //     .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+        //     .as('renameCallback');\n+\n+        //   page.mockUpdate(257334, spy);\n+\n+        //   todos.title(0).trigger('dblclick');\n+        //   todos.titleField(0).blur();\n+\n+        //   cy.get('@renameCallback').should('not.be.called');\n+        //   page.flushJSTimers();\n+        //   todos.titleField(0).should('not.exist');\n+        //   todos.assertTitle(0, 'HTML');\n+        // });\n+\n+        it('should delete if title is empty', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+          todos.titleField(0).blur();\n+          cy.wait('@deleteRequest');\n+\n+          todos.assertCount(4);\n+          todos.assertTitle(0, 'CSS');\n+        })\n+      });\n+    });\n+  });\n+});\n"
                },
                {
                    "date": 1715618886709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,826 +148,826 @@\n       it('should not have Todos', () => {\n         todos.assertCount(0);\n       });\n \n-  //     it('should not have Footer', () => {\n-  //       filter.assertHidden();\n-  //       page.clearCompletedButton().should('not.exist');\n-  //       page.todosCounter().should('not.exist');\n-  //     });\n+      it('should not have Footer', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n \n-  //     it('should not show error message', () => {\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n+      it('should not show error message', () => {\n+        errorMessage.assertHidden();\n+      });\n+    });\n \n-  //   describe('on loading error', () => {\n-  //     beforeEach(() => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+    describe('on loading error', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n \n-  //       page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+        page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n \n-  //     it('should show error', () => {\n-  //       errorMessage.assertVisible();\n-  //     });\n+      it('should show error', () => {\n+        errorMessage.assertVisible();\n+      });\n \n-  //     it('should show correct message', () => {\n-  //       errorMessage.assertText('Unable to load todos');\n-  //     });\n+      it('should show correct message', () => {\n+        errorMessage.assertText('Unable to load todos');\n+      });\n \n-  //     it('should hide error after 3 seconds', () => {\n-  //       // just in case\n-  //       cy.wait(50);\n+      it('should hide error after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n \n-  //       cy.clock();\n-  //       cy.tick(2500);\n-  //       errorMessage.assertVisible();\n+        cy.clock();\n+        cy.tick(2500);\n+        errorMessage.assertVisible();\n \n-  //       cy.tick(500);\n-  //       errorMessage.assertHidden();\n-  //     });\n+        cy.tick(500);\n+        errorMessage.assertHidden();\n+      });\n \n-  //     it('should hide error on close button click', () => {\n-  //       errorMessage.closeButton().click();\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n-  // });\n+      it('should hide error on close button click', () => {\n+        errorMessage.closeButton().click();\n+        errorMessage.assertHidden();\n+      });\n+    });\n+  });\n \n-  // describe('Page with mixed todos', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad().as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n-  //   });\n+  describe('Page with mixed todos', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n \n-  //   it('should have NewTodoField', () => {\n-  //     page.newTodoField().should('exist');\n-  //   });\n+    it('should have NewTodoField', () => {\n+      page.newTodoField().should('exist');\n+    });\n \n-  //   it('should have all loaded todos', () => {\n-  //     todos.assertCount(5);\n-  //   });\n+    it('should have all loaded todos', () => {\n+      todos.assertCount(5);\n+    });\n \n-  //   it('should have delete buttons for every todo', () => {\n-  //     todos.deleteButton(0).should('exist');\n-  //   });\n+    it('should have delete buttons for every todo', () => {\n+      todos.deleteButton(0).should('exist');\n+    });\n \n-  //   it('should not have loaders', () => {\n-  //     todos.assertNotLoading(0);\n-  //     todos.assertNotLoading(1);\n-  //     todos.assertNotLoading(2);\n-  //     todos.assertNotLoading(3);\n-  //     todos.assertNotLoading(4);\n-  //   })\n+    it('should not have loaders', () => {\n+      todos.assertNotLoading(0);\n+      todos.assertNotLoading(1);\n+      todos.assertNotLoading(2);\n+      todos.assertNotLoading(3);\n+      todos.assertNotLoading(4);\n+    })\n \n-  //   it('should have correct todo titles', () => {\n-  //     todos.assertTitle(0, 'HTML');\n-  //     todos.assertTitle(1, 'CSS');\n-  //     todos.assertTitle(2, 'JS');\n-  //     todos.assertTitle(3, 'TypeScript');\n-  //     todos.assertTitle(4, 'React');\n-  //   });\n+    it('should have correct todo titles', () => {\n+      todos.assertTitle(0, 'HTML');\n+      todos.assertTitle(1, 'CSS');\n+      todos.assertTitle(2, 'JS');\n+      todos.assertTitle(3, 'TypeScript');\n+      todos.assertTitle(4, 'React');\n+    });\n \n-  //   it('should higlight all completed todos', () => {\n-  //     todos.assertCompleted(0);\n-  //     todos.assertCompleted(1);\n-  //     todos.assertCompleted(2);\n-  //   });\n+    it('should higlight all completed todos', () => {\n+      todos.assertCompleted(0);\n+      todos.assertCompleted(1);\n+      todos.assertCompleted(2);\n+    });\n \n-  //   it('should not higlight not completed todos', () => {\n-  //     todos.assertNotCompleted(3);\n-  //     todos.assertNotCompleted(4);\n-  //   });\n+    it('should not higlight not completed todos', () => {\n+      todos.assertNotCompleted(3);\n+      todos.assertNotCompleted(4);\n+    });\n \n-  //   it('should have correct completed statuses', () => {\n-  //     todos.statusToggler(0).should('be.checked');\n-  //     todos.statusToggler(1).should('be.checked');\n-  //     todos.statusToggler(2).should('be.checked');\n-  //     todos.statusToggler(3).should('not.be.checked');\n-  //     todos.statusToggler(4).should('not.be.checked');\n-  //   });\n+    it('should have correct completed statuses', () => {\n+      todos.statusToggler(0).should('be.checked');\n+      todos.statusToggler(1).should('be.checked');\n+      todos.statusToggler(2).should('be.checked');\n+      todos.statusToggler(3).should('not.be.checked');\n+      todos.statusToggler(4).should('not.be.checked');\n+    });\n \n-  //   it('should have Filter', () => {\n-  //     filter.assertVisible();\n-  //   });\n+    it('should have Filter', () => {\n+      filter.assertVisible();\n+    });\n \n-  //   it('should have todosCounter with a number of not completed todos', () => {\n-  //     page.todosCounter().should('have.text', '2 items left');\n-  //   });\n+    it('should have todosCounter with a number of not completed todos', () => {\n+      page.todosCounter().should('have.text', '2 items left');\n+    });\n \n-  //   it('should have clearCompletedButton', () => {\n-  //     page.clearCompletedButton().should('exist');\n-  //   });\n+    it('should have clearCompletedButton', () => {\n+      page.clearCompletedButton().should('exist');\n+    });\n \n-  //   it('should have Filter', () => {\n-  //     filter.assertVisible();\n-  //   });\n+    it('should have Filter', () => {\n+      filter.assertVisible();\n+    });\n \n-  //   it('should not show error message', () => {\n-  //     errorMessage.assertHidden();\n-  //   });\n-  // });\n+    it('should not show error message', () => {\n+      errorMessage.assertHidden();\n+    });\n+  });\n \n-  // describe('Filtering', () => {\n-  //   describe('with mixed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  describe('Filtering', () => {\n+    describe('with mixed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n \n-  //     it('should have only filterLinkAll active', () => {\n-  //       filter.assertSelected('all');\n-  //       filter.assertNotSelected('active');\n-  //       filter.assertNotSelected('completed');\n-  //     });\n+      it('should have only filterLinkAll active', () => {\n+        filter.assertSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n \n-  //     it('should allow to select the active filter', () => {\n-  //       filter.link('active').click();\n+      it('should allow to select the active filter', () => {\n+        filter.link('active').click();\n \n-  //       filter.assertNotSelected('all');\n-  //       filter.assertSelected('active');\n-  //       filter.assertNotSelected('completed');\n-  //     });\n+        filter.assertNotSelected('all');\n+        filter.assertSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n \n-  //     it('should show only active todos when active filter is selected', () => {\n-  //       filter.link('active').click();\n+      it('should show only active todos when active filter is selected', () => {\n+        filter.link('active').click();\n \n-  //       todos.assertCount(2);\n-  //       todos.assertTitle(0, 'TypeScript');\n-  //       todos.assertTitle(1, 'React');\n-  //     });\n+        todos.assertCount(2);\n+        todos.assertTitle(0, 'TypeScript');\n+        todos.assertTitle(1, 'React');\n+      });\n \n-  //     it('should keep footer when active todos are shown', () => {\n-  //       filter.link('active').click();\n+      it('should keep footer when active todos are shown', () => {\n+        filter.link('active').click();\n \n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //       filter.assertVisible();\n-  //       page.clearCompletedButton().should('exist');\n-  //     });\n+        page.todosCounter().should('have.text', '2 items left');\n+        filter.assertVisible();\n+        page.clearCompletedButton().should('exist');\n+      });\n \n-  //     it('should allow to select the completed filter', () => {\n-  //       filter.link('completed').click();\n+      it('should allow to select the completed filter', () => {\n+        filter.link('completed').click();\n \n-  //       filter.assertNotSelected('all');\n-  //       filter.assertNotSelected('active');\n-  //       filter.assertSelected('completed');\n-  //     });\n+        filter.assertNotSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertSelected('completed');\n+      });\n \n-  //     it('should show only completed todos when completed filter is selected', () => {\n-  //       filter.link('completed').click();\n+      it('should show only completed todos when completed filter is selected', () => {\n+        filter.link('completed').click();\n \n-  //       todos.assertCount(3);\n-  //       todos.assertTitle(0, 'HTML');\n-  //       todos.assertTitle(1, 'CSS');\n-  //       todos.assertTitle(2, 'JS');\n-  //     });\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+        todos.assertTitle(1, 'CSS');\n+        todos.assertTitle(2, 'JS');\n+      });\n \n-  //     it('should keep footer when completed todos are shown', () => {\n-  //       filter.link('completed').click();\n+      it('should keep footer when completed todos are shown', () => {\n+        filter.link('completed').click();\n \n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //       filter.assertVisible();\n-  //       page.clearCompletedButton().should('exist');\n-  //     });\n+        page.todosCounter().should('have.text', '2 items left');\n+        filter.assertVisible();\n+        page.clearCompletedButton().should('exist');\n+      });\n \n-  //     it('should allow to reset filter', () => {\n-  //       filter.link('completed').click();\n-  //       filter.link('all').click();\n+      it('should allow to reset filter', () => {\n+        filter.link('completed').click();\n+        filter.link('all').click();\n \n-  //       todos.assertCount(5);\n-  //       filter.assertSelected('all');\n-  //       filter.assertNotSelected('active');\n-  //       filter.assertNotSelected('completed');\n-  //     });\n-  //   });\n+        todos.assertCount(5);\n+        filter.assertSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n+    });\n \n-  //   describe('with active todos only', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+    describe('with active todos only', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n \n-  //     it('should hide todos on completed selection', () => {\n-  //       filter.link('completed').click();\n+      it('should hide todos on completed selection', () => {\n+        filter.link('completed').click();\n \n-  //       todos.assertCount(0);\n-  //     });\n+        todos.assertCount(0);\n+      });\n \n-  //     it('should keep footer on completed selection', () => {\n-  //       filter.link('completed').click();\n-  //       filter.assertVisible();\n-  //     });\n+      it('should keep footer on completed selection', () => {\n+        filter.link('completed').click();\n+        filter.assertVisible();\n+      });\n \n-  //     it('should keep todos counter on completed selection', () => {\n-  //       filter.link('completed').click();\n-  //       page.todosCounter().should('have.text', '5 items left');\n-  //     });\n-  //   });\n+      it('should keep todos counter on completed selection', () => {\n+        filter.link('completed').click();\n+        page.todosCounter().should('have.text', '5 items left');\n+      });\n+    });\n \n-  //   describe('with completed todos only', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-  //   });\n-  // });\n+    describe('with completed todos only', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+    });\n+  });\n \n-  // describe('Adding a todo', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad().as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n-  //   });\n+  describe('Adding a todo', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n \n-  //   it('should focus text field by default', () => {\n-  //     page.newTodoField().should('be.focused');\n-  //   });\n+    it('should focus text field by default', () => {\n+      page.newTodoField().should('be.focused');\n+    });\n \n-  //   describe('if title is empty', () => {\n-  //     beforeEach(() => {\n-  //       page.mockCreate();\n-  //       page.newTodoField().type('{enter}');\n-  //     });\n+    describe('if title is empty', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.newTodoField().type('{enter}');\n+      });\n \n-  //     it('should not send a request', () => {\n-  //       cy.get('@createCallback').should('not.be.called');\n-  //     });\n+      it('should not send a request', () => {\n+        cy.get('@createCallback').should('not.be.called');\n+      });\n \n-  //     it('should keep text field focused', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n+      it('should keep text field focused', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n \n-  //     it('should display an error message', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Title should not be empty');\n-  //     });\n+      it('should display an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Title should not be empty');\n+      });\n \n-  //     it('should hide an error message after 3 seconds', () => {\n-  //       // just in case\n-  //       cy.wait(50);\n+      it('should hide an error message after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n \n-  //       cy.clock();\n-  //       cy.tick(3000);\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n+        cy.clock();\n+        cy.tick(3000);\n+        errorMessage.assertHidden();\n+      });\n+    });\n \n-  //   describe('if title title has only whitespaces', () => {\n-  //     beforeEach(() => {\n-  //       page.mockCreate();\n-  //       page.newTodoField().type('     {enter}');\n-  //     });\n+    describe('if title title has only whitespaces', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.newTodoField().type('     {enter}');\n+      });\n \n-  //     it('should not send a request', () => {\n-  //       cy.get('@createCallback').should('not.be.called');\n-  //     });\n+      it('should not send a request', () => {\n+        cy.get('@createCallback').should('not.be.called');\n+      });\n \n-  //     it('should keep text field focused', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n+      it('should keep text field focused', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n \n-  //     it('should display an error message', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Title should not be empty');\n-  //     });\n+      it('should display an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Title should not be empty');\n+      });\n \n-  //     it('should hide an error message after 3 seconds', () => {\n-  //       // just in case\n-  //       cy.wait(50);\n+      it('should hide an error message after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n \n-  //       cy.clock();\n-  //       cy.tick(3000);\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n+        cy.clock();\n+        cy.tick(3000);\n+        errorMessage.assertHidden();\n+      });\n+    });\n \n-  //   describe('after form submition before response is received', () => {\n-  //     beforeEach(() => {\n-  //       page.mockCreate();\n-  //       page.pauseTimers();\n-  //       page.newTodoField().type('Test Todo{enter}');\n-  //     });\n+    describe('after form submition before response is received', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.pauseTimers();\n+        page.newTodoField().type('Test Todo{enter}');\n+      });\n \n-  //     it('should send a create request', () => {\n-  //       cy.tick(1000);\n-  //       cy.get('@createCallback').should('have.callCount', 1);\n-  //     });\n+      it('should send a create request', () => {\n+        cy.tick(1000);\n+        cy.get('@createCallback').should('have.callCount', 1);\n+      });\n \n-  //     it('should disable the input', () => {\n-  //       page.newTodoField().should('be.disabled');\n-  //     });\n+      it('should disable the input', () => {\n+        page.newTodoField().should('be.disabled');\n+      });\n \n-  //     it('should keep entered text', () => {\n-  //       page.newTodoField().should('have.value', 'Test Todo');\n-  //     });\n+      it('should keep entered text', () => {\n+        page.newTodoField().should('have.value', 'Test Todo');\n+      });\n \n-  //     it('should create and show a temp TodoItem with Loader', () => {\n-  //       todos.assertCount(6);\n-  //       todos.assertLoading(5);\n-  //     });\n+      it('should create and show a temp TodoItem with Loader', () => {\n+        todos.assertCount(6);\n+        todos.assertLoading(5);\n+      });\n \n-  //     it('should show a temp TodoItem with correct title', () => {\n-  //       todos.assertTitle(5, 'Test Todo');\n-  //     });\n+      it('should show a temp TodoItem with correct title', () => {\n+        todos.assertTitle(5, 'Test Todo');\n+      });\n \n-  //     it('should show a not completed temp TodoItem', () => {\n-  //       todos.assertNotCompleted(5);\n-  //     });\n+      it('should show a not completed temp TodoItem', () => {\n+        todos.assertNotCompleted(5);\n+      });\n \n-  //     it('should not show loaders for existing todos', () => {\n-  //       todos.assertNotLoading(0);\n-  //       todos.assertNotLoading(1);\n-  //       todos.assertNotLoading(2);\n-  //       todos.assertNotLoading(3);\n-  //       todos.assertNotLoading(4);\n-  //     });\n+      it('should not show loaders for existing todos', () => {\n+        todos.assertNotLoading(0);\n+        todos.assertNotLoading(1);\n+        todos.assertNotLoading(2);\n+        todos.assertNotLoading(3);\n+        todos.assertNotLoading(4);\n+      });\n \n-  //     it('should not update active counter', () => {\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n-  //   });\n+      it('should not update active counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+    });\n \n-  //   describe('on success response', () => {\n-  //     describe('', () => {\n-  //       beforeEach(() => {\n-  //         page.mockCreate().as('createRequest');\n-  //         page.newTodoField().type('Test Todo{enter}');\n+    describe('on success response', () => {\n+      describe('', () => {\n+        beforeEach(() => {\n+          page.mockCreate().as('createRequest');\n+          page.newTodoField().type('Test Todo{enter}');\n \n-  //         cy.wait('@createRequest');\n-  //       });\n+          cy.wait('@createRequest');\n+        });\n \n-  //       // this test may be flaky\n-  //       it.skip('should replace loader with a created todo', () => {\n-  //         page.flushJSTimers();\n-  //         todos.assertCount(6);\n-  //         todos.assertNotLoading(5);\n-  //       });\n+        // this test may be flaky\n+        it.skip('should replace loader with a created todo', () => {\n+          page.flushJSTimers();\n+          todos.assertCount(6);\n+          todos.assertNotLoading(5);\n+        });\n \n-  //       it('should add a todo with a correct title', () => {\n-  //         todos.assertTitle(5, 'Test Todo');\n-  //       });\n+        it('should add a todo with a correct title', () => {\n+          todos.assertTitle(5, 'Test Todo');\n+        });\n \n-  //       it('should add a not completed todo', () => {\n-  //         todos.assertNotCompleted(5);\n-  //       });\n+        it('should add a not completed todo', () => {\n+          todos.assertNotCompleted(5);\n+        });\n \n-  //       it('should update active counter', () => {\n-  //         page.todosCounter().should('have.text', '3 items left');\n-  //       });\n+        it('should update active counter', () => {\n+          page.todosCounter().should('have.text', '3 items left');\n+        });\n \n-  //       it('should enable the text field', () => {\n-  //         page.newTodoField().should('not.be.disabled');\n-  //       });\n+        it('should enable the text field', () => {\n+          page.newTodoField().should('not.be.disabled');\n+        });\n \n-  //       it('should not show error message', () => {\n-  //         errorMessage.assertHidden();\n-  //       });\n+        it('should not show error message', () => {\n+          errorMessage.assertHidden();\n+        });\n \n-  //       it('should clear text field', () => {\n-  //         page.newTodoField().should('have.value', '');\n-  //       });\n+        it('should clear text field', () => {\n+          page.newTodoField().should('have.value', '');\n+        });\n \n-  //       it('should focus text field', () => {\n-  //         page.newTodoField().should('be.focused');\n-  //       });\n+        it('should focus text field', () => {\n+          page.newTodoField().should('be.focused');\n+        });\n \n-  //       it('should allow to add one more todo', () => {\n-  //         page.mockCreate().as('createRequest2');\n+        it('should allow to add one more todo', () => {\n+          page.mockCreate().as('createRequest2');\n \n-  //         page.newTodoField().type('Hello world{enter}');\n-  //         cy.wait('@createRequest2');\n-  //         page.flushJSTimers();\n+          page.newTodoField().type('Hello world{enter}');\n+          cy.wait('@createRequest2');\n+          page.flushJSTimers();\n \n-  //         todos.assertCount(7);\n-  //         // todos.assertNotLoading(6);\n-  //         todos.assertNotCompleted(6);\n-  //         todos.assertTitle(6, 'Hello world');\n-  //         page.todosCounter().should('have.text', '4 items left');\n-  //       });\n-  //     });\n+          todos.assertCount(7);\n+          // todos.assertNotLoading(6);\n+          todos.assertNotCompleted(6);\n+          todos.assertTitle(6, 'Hello world');\n+          page.todosCounter().should('have.text', '4 items left');\n+        });\n+      });\n \n-  //     it('should add trimmed title', () => {\n-  //       page.mockCreate().as('createRequest');\n+      it('should add trimmed title', () => {\n+        page.mockCreate().as('createRequest');\n \n-  //       page.newTodoField().type('  Other Title    {enter}');\n-  //       cy.wait('@createRequest');\n+        page.newTodoField().type('  Other Title    {enter}');\n+        cy.wait('@createRequest');\n \n-  //       // just in case\n-  //       page.flushJSTimers();\n+        // just in case\n+        page.flushJSTimers();\n \n-  //       todos.assertTitle(5, 'Other Title');\n-  //     });\n+        todos.assertTitle(5, 'Other Title');\n+      });\n \n-  //     it('should keep current filter', () => {\n-  //       page.mockCreate().as('createRequest');\n+      it('should keep current filter', () => {\n+        page.mockCreate().as('createRequest');\n \n-  //       filter.link('active').click();\n-  //       page.newTodoField().type('Test Todo{enter}');\n-  //       cy.wait('@createRequest');\n+        filter.link('active').click();\n+        page.newTodoField().type('Test Todo{enter}');\n+        cy.wait('@createRequest');\n \n-  //       filter.assertSelected('active');\n-  //     });\n-  //   });\n+        filter.assertSelected('active');\n+      });\n+    });\n \n-  //   describe('on request fail', () => {\n-  //     beforeEach(() => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+    describe('on request fail', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n \n-  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('createRequest');\n+        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest');\n \n-  //       page.newTodoField().type('Test Todo{enter}');\n+        page.newTodoField().type('Test Todo{enter}');\n \n-  //       cy.wait('@createRequest');\n-  //     });\n+        cy.wait('@createRequest');\n+      });\n \n-  //     it('should show an error message', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Unable to add a todo');\n-  //     });\n+      it('should show an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to add a todo');\n+      });\n \n-  //     it('should hide an error message in 3 seconds', () => {\n-  //       cy.clock();\n-  //       cy.tick(2500);\n+      it('should hide an error message in 3 seconds', () => {\n+        cy.clock();\n+        cy.tick(2500);\n \n-  //       errorMessage.assertVisible();\n+        errorMessage.assertVisible();\n \n-  //       cy.tick(500);\n-  //       errorMessage.assertHidden();\n-  //     });\n+        cy.tick(500);\n+        errorMessage.assertHidden();\n+      });\n \n-  //     it('should remove a temp TodoItem on request fail', () => {\n-  //       todos.assertCount(5);\n-  //       todos.assertTitle(4, 'React');\n-  //     });\n+      it('should remove a temp TodoItem on request fail', () => {\n+        todos.assertCount(5);\n+        todos.assertTitle(4, 'React');\n+      });\n \n-  //     it('should enable the text field on request fail', () => {\n-  //       page.newTodoField().should('not.be.disabled');\n-  //     });\n+      it('should enable the text field on request fail', () => {\n+        page.newTodoField().should('not.be.disabled');\n+      });\n \n-  //     it('should keep the entered text on request fail', () => {\n-  //       page.newTodoField().should('have.value', 'Test Todo');\n-  //     });\n+      it('should keep the entered text on request fail', () => {\n+        page.newTodoField().should('have.value', 'Test Todo');\n+      });\n \n-  //     it('should focus text field', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n+      it('should focus text field', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n \n-  //     it('should not update active counter', () => {\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n+      it('should not update active counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n \n-  //     it('should immediately hide an error message on new request', () => {\n-  //       page.newTodoField().type(`{enter}`);\n-  //       errorMessage.assertHidden();\n-  //     });\n+      it('should immediately hide an error message on new request', () => {\n+        page.newTodoField().type(`{enter}`);\n+        errorMessage.assertHidden();\n+      });\n \n-  //     it('should show an error message again on a next fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+      it('should show an error message again on a next fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n \n-  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('createRequest2');\n+        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest2');\n \n-  //       page.newTodoField().type(`{enter}`);\n-  //       cy.wait('@createRequest2');\n+        page.newTodoField().type(`{enter}`);\n+        cy.wait('@createRequest2');\n \n-  //       errorMessage.assertVisible();\n-  //     });\n+        errorMessage.assertVisible();\n+      });\n \n-  //     it('should keep an error message for 3s after the last fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+      it('should keep an error message for 3s after the last fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n \n-  //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('createRequest2');\n+        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest2');\n \n-  //       cy.clock();\n+        cy.clock();\n \n-  //       cy.tick(2000);\n-  //       page.newTodoField().type(`{enter}`);\n-  //       cy.tick(500);\n-  //       cy.wait('@createRequest2');\n-  //       cy.tick(2000);\n+        cy.tick(2000);\n+        page.newTodoField().type(`{enter}`);\n+        cy.tick(500);\n+        cy.wait('@createRequest2');\n+        cy.tick(2000);\n \n-  //       errorMessage.assertVisible();\n-  //     });\n+        errorMessage.assertVisible();\n+      });\n \n-  //     it('should allow to add a todo', () => {\n-  //       page.mockCreate().as('createRequest2');\n-  //       page.newTodoField().type('{enter}');\n+      it('should allow to add a todo', () => {\n+        page.mockCreate().as('createRequest2');\n+        page.newTodoField().type('{enter}');\n \n-  //       cy.wait('@createRequest2');\n-  //       page.flushJSTimers();\n+        cy.wait('@createRequest2');\n+        page.flushJSTimers();\n \n-  //       todos.assertCount(6);\n-  //       // todos.assertNotLoading(5);\n-  //       todos.assertNotCompleted(5);\n-  //       todos.assertTitle(5, 'Test Todo');\n+        todos.assertCount(6);\n+        // todos.assertNotLoading(5);\n+        todos.assertNotCompleted(5);\n+        todos.assertTitle(5, 'Test Todo');\n \n-  //       page.todosCounter().should('have.text', '3 items left');\n-  //     });\n-  //   });\n-  // });\n+        page.todosCounter().should('have.text', '3 items left');\n+      });\n+    });\n+  });\n \n-  // describe('Adding a first todo', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad({ body: [] }).as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n+  describe('Adding a first todo', () => {\n+    beforeEach(() => {\n+      page.mockLoad({ body: [] }).as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n \n-  //     page.mockCreate().as('createRequest');\n-  //     page.newTodoField().type('First todo{enter}');\n+      page.mockCreate().as('createRequest');\n+      page.newTodoField().type('First todo{enter}');\n \n-  //     cy.wait('@createRequest');\n-  //   });\n+      cy.wait('@createRequest');\n+    });\n \n-  //   it('should show a new todos', () => {\n-  //     todos.assertCount(1);\n-  //     todos.assertTitle(0, 'First todo');\n-  //     todos.assertNotCompleted(0);\n-  //   });\n+    it('should show a new todos', () => {\n+      todos.assertCount(1);\n+      todos.assertTitle(0, 'First todo');\n+      todos.assertNotCompleted(0);\n+    });\n \n-  //   it('should show Filter', () => {\n-  //     filter.assertVisible();\n-  //   });\n+    it('should show Filter', () => {\n+      filter.assertVisible();\n+    });\n \n-  //   it('should show todosCounter', () => {\n-  //     page.todosCounter().should('contain.text', '1 item');\n-  //   });\n-  // });\n+    it('should show todosCounter', () => {\n+      page.todosCounter().should('contain.text', '1 item');\n+    });\n+  });\n \n-  // describe('Individual Todo Deletion', () => {\n-  //   describe('Default behavior', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  describe('Individual Todo Deletion', () => {\n+    describe('Default behavior', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n \n-  //     it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n-  //       page.mockDelete(257334);\n-  //       page.pauseTimers();\n-  //       todos.deleteButton(0).click();\n+      it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n+        page.mockDelete(257334);\n+        page.pauseTimers();\n+        todos.deleteButton(0).click();\n \n-  //       todos.assertLoading(0);\n-  //     });\n+        todos.assertLoading(0);\n+      });\n \n-  //     it('should not delete a todo before successful response', () => {\n-  //       page.mockDelete(257334);\n-  //       page.pauseTimers();\n-  //       todos.deleteButton(0).click();\n+      it('should not delete a todo before successful response', () => {\n+        page.mockDelete(257334);\n+        page.pauseTimers();\n+        todos.deleteButton(0).click();\n \n-  //       todos.assertCount(5);\n-  //     });\n+        todos.assertCount(5);\n+      });\n \n-  //     it('should remove the todo from the list on a successful API response', () => {\n-  //       page.mockDelete(257334).as('deleteRequest');\n+      it('should remove the todo from the list on a successful API response', () => {\n+        page.mockDelete(257334).as('deleteRequest');\n \n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n \n-  //       todos.assertCount(4);\n-  //       todos.assertTitle(0, 'CSS');\n-  //     });\n+        todos.assertCount(4);\n+        todos.assertTitle(0, 'CSS');\n+      });\n \n-  //     it('should focus text field after todo deletion', () => {\n-  //       page.mockDelete(257334).as('deleteRequest');\n+      it('should focus text field after todo deletion', () => {\n+        page.mockDelete(257334).as('deleteRequest');\n \n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n \n-  //       page.newTodoField().should('be.focused');\n-  //     });\n+        page.newTodoField().should('be.focused');\n+      });\n \n-  //     it('should not remove the todo from the list on an API error', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+      it('should not remove the todo from the list on an API error', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n \n-  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n \n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n \n-  //       todos.assertCount(5);\n-  //       todos.assertTitle(0, 'HTML');\n-  //     });\n+        todos.assertCount(5);\n+        todos.assertTitle(0, 'HTML');\n+      });\n \n-  //     it('should show an error message on an API error', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+      it('should show an error message on an API error', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n \n-  //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n \n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n \n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Unable to delete a todo');\n-  //     });\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to delete a todo');\n+      });\n \n-  //     it('should adjust the active todo count correctly after successful deletion', () => {\n-  //       page.mockDelete(257338).as('deleteRequest');\n-  //       todos.deleteButton(4).click();\n-  //       cy.wait('@deleteRequest');\n+      it('should adjust the active todo count correctly after successful deletion', () => {\n+        page.mockDelete(257338).as('deleteRequest');\n+        todos.deleteButton(4).click();\n+        cy.wait('@deleteRequest');\n \n-  //       page.todosCounter().should('contain.text', '1 item');\n-  //     });\n+        page.todosCounter().should('contain.text', '1 item');\n+      });\n \n-  //     it('should not adjust the active todo count after failed deletion', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+      it('should not adjust the active todo count after failed deletion', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n \n-  //       page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n-  //         .as('deleteRequest');\n+        page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n+          .as('deleteRequest');\n \n-  //       todos.deleteButton(4).click();\n-  //       cy.wait('@deleteRequest');\n+        todos.deleteButton(4).click();\n+        cy.wait('@deleteRequest');\n \n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n-  //   });\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+    });\n \n-  //   describe('Last todo deletion', () => {\n-  //     beforeEach(() => {\n-  //       const todo = {\n-  //         \"id\": 257334,\n-  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-  //         \"userId\": 1,\n-  //         \"title\": \"HTML\",\n-  //         \"completed\": false\n-  //       };\n+    describe('Last todo deletion', () => {\n+      beforeEach(() => {\n+        const todo = {\n+          \"id\": 257334,\n+          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+          \"userId\": 1,\n+          \"title\": \"HTML\",\n+          \"completed\": false\n+        };\n \n-  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n+        page.mockLoad({ body: [todo] }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n \n-  //       page.mockDelete(257334);\n-  //       todos.deleteButton(0).click();\n-  //     });\n+        page.mockDelete(257334);\n+        todos.deleteButton(0).click();\n+      });\n \n-  //     it('should hide todos', () => {\n-  //       todos.assertCount(0);\n-  //     });\n+      it('should hide todos', () => {\n+        todos.assertCount(0);\n+      });\n \n-  //     it('should hide footer', () => {\n-  //       filter.assertHidden();\n-  //       page.clearCompletedButton().should('not.exist');\n-  //       page.todosCounter().should('not.exist');\n-  //     });\n+      it('should hide footer', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n \n-  //     it('should focus text field after todo deletion', () => {\n-  //       page.newTodoField().should('be.focused');\n-  //     });\n-  //   });\n-  // });\n+      it('should focus text field after todo deletion', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+    });\n+  });\n \n-  // describe('Group Todo Deletion', () => {\n-  //   describe('with no completed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+  describe('Group Todo Deletion', () => {\n+    describe('with no completed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n \n-  //     it('should not have active ClearCompleted button', () => {\n-  //       page.clearCompletedButton().should('be.disabled');\n-  //     });\n-  //   });\n+      it('should not have active ClearCompleted button', () => {\n+        page.clearCompletedButton().should('be.disabled');\n+      });\n+    });\n \n-  //   describe('with some completed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n+    describe('with some completed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n \n-  //     it('should have ClearCompleted button enabled', () => {\n-  //       page.clearCompletedButton().should('not.be.disabled');\n-  //     });\n+      it('should have ClearCompleted button enabled', () => {\n+        page.clearCompletedButton().should('not.be.disabled');\n+      });\n \n-  //     it('should send individual deletion request for each completed todo', () => {\n-  //       page.mockDelete(257334).as('deleteRequest1');\n-  //       page.mockDelete(257335).as('deleteRequest2');\n-  //       page.mockDelete(257336).as('deleteRequest3');\n+      it('should send individual deletion request for each completed todo', () => {\n+        page.mockDelete(257334).as('deleteRequest1');\n+        page.mockDelete(257335).as('deleteRequest2');\n+        page.mockDelete(257336).as('deleteRequest3');\n \n-  //       page.clearCompletedButton().click();\n+        page.clearCompletedButton().click();\n \n-  //       cy.wait('@deleteRequest1');\n-  //       cy.wait('@deleteRequest2');\n-  //       cy.wait('@deleteRequest3');\n-  //     });\n+        cy.wait('@deleteRequest1');\n+        cy.wait('@deleteRequest2');\n+        cy.wait('@deleteRequest3');\n+      });\n \n-  //     describe('on success', () => {\n-  //       beforeEach(() => {\n-  //         page.mockDelete(257334).as('deleteRequest1');\n-  //         page.mockDelete(257335).as('deleteRequest2');\n-  //         page.mockDelete(257336).as('deleteRequest3');\n+      describe('on success', () => {\n+        beforeEach(() => {\n+          page.mockDelete(257334).as('deleteRequest1');\n+          page.mockDelete(257335).as('deleteRequest2');\n+          page.mockDelete(257336).as('deleteRequest3');\n \n-  //         page.clearCompletedButton().click();\n+          page.clearCompletedButton().click();\n \n-  //         cy.wait('@deleteRequest1');\n-  //         cy.wait('@deleteRequest2');\n-  //         cy.wait('@deleteRequest3');\n-  //       });\n+          cy.wait('@deleteRequest1');\n+          cy.wait('@deleteRequest2');\n+          cy.wait('@deleteRequest3');\n+        });\n \n-  //       it('should remove all completed todos from the list', () => {\n-  //         todos.assertCount(2);\n-  //         todos.assertTitle(0, 'TypeScript');\n-  //         todos.assertTitle(1, 'React');\n-  //       });\n+        it('should remove all completed todos from the list', () => {\n+          todos.assertCount(2);\n+          todos.assertTitle(0, 'TypeScript');\n+          todos.assertTitle(1, 'React');\n+        });\n \n-  //       it('should disable ClearCompleted button', () => {\n-  //         page.clearCompletedButton().should('be.disabled');\n-  //       });\n+        it('should disable ClearCompleted button', () => {\n+          page.clearCompletedButton().should('be.disabled');\n+        });\n \n-  //       it('should focus the text field', () => {\n-  //         page.newTodoField().should('be.focused');\n-  //       });\n-  //     });\n+        it('should focus the text field', () => {\n+          page.newTodoField().should('be.focused');\n+        });\n+      });\n \n-  //     describe('on a single fail', () => {\n-  //       beforeEach(() => {\n-  //         // to prevent Cypress from failing the test on uncaught exception\n-  //         cy.once('uncaught:exception', () => false);\n+      describe('on a single fail', () => {\n+        beforeEach(() => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n \n-  //         page.mockDelete(257334).as('deleteRequest1');\n-  //         page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n-  //         page.mockDelete(257336).as('deleteRequest3');\n+          page.mockDelete(257334).as('deleteRequest1');\n+          page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n+          page.mockDelete(257336).as('deleteRequest3');\n \n-  //         page.clearCompletedButton().click();\n+          page.clearCompletedButton().click();\n \n-  //         cy.wait('@deleteRequest1');\n-  //         cy.wait('@deleteRequest2');\n-  //         cy.wait('@deleteRequest3');\n-  //       });\n+          cy.wait('@deleteRequest1');\n+          cy.wait('@deleteRequest2');\n+          cy.wait('@deleteRequest3');\n+        });\n \n-  //       it('should show an error message if any of the group deletions fails', () => {\n-  //         errorMessage.assertVisible();\n-  //         errorMessage.assertText('Unable to delete a todo');\n-  //       });\n+        it('should show an error message if any of the group deletions fails', () => {\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to delete a todo');\n+        });\n \n-  //       it('should remove todos with success responses and keep todos with errors', () => {\n-  //         todos.assertCount(3);\n-  //         todos.assertTitle(0, 'CSS');\n-  //         todos.assertTitle(1, 'TypeScript');\n-  //       });\n+        it('should remove todos with success responses and keep todos with errors', () => {\n+          todos.assertCount(3);\n+          todos.assertTitle(0, 'CSS');\n+          todos.assertTitle(1, 'TypeScript');\n+        });\n \n-  //       it('should not disable ClearCompleted button', () => {\n-  //         page.clearCompletedButton().should('not.be.disabled');\n-  //       });\n-  //     });\n-  //   });\n+        it('should not disable ClearCompleted button', () => {\n+          page.clearCompletedButton().should('not.be.disabled');\n+        });\n+      });\n+    });\n \n-  //   describe('with all todos completed', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n+    describe('with all todos completed', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n \n-  //       page.mockDelete(257334).as('deleteRequest1');\n-  //       page.mockDelete(257335).as('deleteRequest2');\n-  //       page.mockDelete(257336).as('deleteRequest3');\n-  //       page.mockDelete(257337).as('deleteRequest4');\n-  //       page.mockDelete(257338).as('deleteRequest5');\n+        page.mockDelete(257334).as('deleteRequest1');\n+        page.mockDelete(257335).as('deleteRequest2');\n+        page.mockDelete(257336).as('deleteRequest3');\n+        page.mockDelete(257337).as('deleteRequest4');\n+        page.mockDelete(257338).as('deleteRequest5');\n \n-  //       page.clearCompletedButton().click();\n+        page.clearCompletedButton().click();\n \n-  //       cy.wait('@deleteRequest1');\n-  //       cy.wait('@deleteRequest2');\n-  //       cy.wait('@deleteRequest3');\n-  //       cy.wait('@deleteRequest4');\n-  //       cy.wait('@deleteRequest5');\n-  //     });\n+        cy.wait('@deleteRequest1');\n+        cy.wait('@deleteRequest2');\n+        cy.wait('@deleteRequest3');\n+        cy.wait('@deleteRequest4');\n+        cy.wait('@deleteRequest5');\n+      });\n \n-  //     it('should hide todos after clearing all completed todos', () => {\n-  //       todos.assertCount(0);\n-  //     });\n+      it('should hide todos after clearing all completed todos', () => {\n+        todos.assertCount(0);\n+      });\n \n-  //     it('should hide footer after clearing all completed todos', () => {\n-  //       filter.assertHidden();\n-  //       page.clearCompletedButton().should('not.exist');\n-  //       page.todosCounter().should('not.exist');\n-  //     });\n-  //   });\n-  // });\n+      it('should hide footer after clearing all completed todos', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+    });\n+  });\n \n-  // describe('Todo Toggling', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad().as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n-  //   });\n+  describe('Todo Toggling', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n \n   //   describe('before receving response', () => {\n   //     beforeEach(() => {\n   //       page.mockUpdate(257334).as('updateRequest');\n@@ -1766,1773 +1766,4 @@\n       });\n     });\n   });\n });\n-/// <reference types='cypress' />\n-/// <reference types='../support' />\n-\n-import mixedTodos from '../fixtures/todos.json';\n-\n-//#region Page Objects\n-const page = {\n-  toggleAllButton: () => cy.byDataCy('ToggleAllButton'),\n-  newTodoField: () => cy.byDataCy('NewTodoField'),\n-  todosCounter: () => cy.byDataCy('TodosCounter'),\n-  clearCompletedButton: () => cy.byDataCy('ClearCompletedButton'),\n-\n-  visit: (url = '/') => {\n-    cy.visit(url, {\n-      onBeforeLoad: win => win.localStorage.setItem('user', '{ \"id\": 1 }'),\n-    });\n-\n-    // to wait until React App is loaded\n-    cy.get('.todoapp__title').should('exist');\n-  },\n-  pauseTimers: () => cy.clock(),\n-\n-  flushJSTimers: (delay = 1000) => {\n-    cy.clock().then(clock => {\n-      clock.tick(delay);\n-      clock.restore();\n-    });\n-\n-    cy.wait(50);\n-  },\n-\n-  /**\n-   * @param {*} response - can be a valid response object or stub\n-   *\n-   * { body: [] }\n-   * { statusCode: 503: body: 'Service Unavailable' }\n-   * spy = cy.stub().callsFake(req => req.reply(response)).as('alias')\n-   */\n-  mockLoad: (response = { fixture: 'todos' }) => {\n-    return cy.intercept('**/todos?userId=*', response);\n-  },\n-  mockCreate: (response) => {\n-    const options = { method: 'POST', url: '**/todos' };\n-\n-    const spy = cy.stub()\n-      .callsFake(req => req.reply({\n-        statusCode: 201,\n-        body: { ...req.body, id: Math.random() },\n-      }))\n-      .as('createCallback');\n-\n-    return cy.intercept(options, response || spy);\n-  },\n-  mockDelete: (id, response) => {\n-    const options = { method: 'DELETE', url: `**/todos/${id}` };\n-\n-    return cy.intercept(options, response || { body: '1' });\n-  },\n-  mockUpdate: (id, response) => {\n-    const todo = mixedTodos.find(todo => todo.id === id) || {};\n-    const options = { method: 'PATCH', url: `**/todos/${id}` };\n-\n-    const spy = cy.stub()\n-      .callsFake(req => req.reply({ body: { ...todo, ...req.body, id } }))\n-      .as('updateCallback');\n-\n-    return cy.intercept(options, response || spy);\n-  },\n-};\n-\n-const todos = {\n-  el: index => cy.byDataCy('Todo').eq(index),\n-  deleteButton: index => todos.el(index).byDataCy('TodoDelete'),\n-  statusToggler: index => todos.el(index).byDataCy('TodoStatus'),\n-  title: index => todos.el(index).byDataCy('TodoTitle'),\n-  titleField: index => todos.el(index).byDataCy('TodoTitleField'),\n-\n-  assertCount: length => cy.byDataCy('Todo').should('have.length', length),\n-  assertTitle: (index, title) => todos.title(index).should('have.text', title),\n-  assertLoading: index => todos.el(index).byDataCy('TodoLoader').should('have.class', 'is-active'),\n-  assertNotLoading: index => todos.el(index).byDataCy('TodoLoader').should('not.have.class', 'is-active'),\n-  assertCompleted: index => todos.el(index).should('have.class', 'completed'),\n-  assertNotCompleted: index => todos.el(index).should('not.have.class', 'completed'),\n-};\n-\n-const errorMessage = {\n-  el: () => cy.byDataCy('ErrorNotification'),\n-  closeButton: () => errorMessage.el().byDataCy('HideErrorButton'),\n-  assertVisible: () => errorMessage.el().should('not.have.class', 'hidden'),\n-  assertHidden: () => errorMessage.el().should('have.class', 'hidden'),\n-  assertText: text => errorMessage.el().should('have.text', text),\n-};\n-\n-const FilterLinkKeys = {\n-  all: 'FilterLinkAll',\n-  active: 'FilterLinkActive',\n-  completed: 'FilterLinkCompleted',\n-};\n-\n-const filter = {\n-  el: () => cy.byDataCy('Filter'),\n-  link: type => cy.byDataCy(FilterLinkKeys[type]),\n-  assertVisible: () => filter.el().should('exist'),\n-  assertHidden: () => filter.el().should('not.exist'),\n-  assertSelected: type => filter.link(type).should('have.class', 'selected'),\n-  assertNotSelected: type => filter.link(type).should('not.have.class', 'selected'),\n-};\n-//#endregion\n-\n-let failed = false;\n-\n-Cypress.on('fail', (e) => {\n-  failed = true;\n-  throw e;\n-});\n-\n-describe('', () => {\n-  beforeEach(() => {\n-    if (failed) Cypress.runner.stop();\n-  });\n-\n-  // // describe('Page with no todos', () => {\n-  // //   it('should send 1 todos request', () => {\n-  // //     const spy = cy.stub()\n-  // //       .callsFake(req => req.reply({ body: [] }))\n-  // //       .as('loadCallback')\n-\n-  // //     page.mockLoad(spy).as('loadRequest');\n-  // //     page.visit();\n-\n-  // //     cy.wait('@loadRequest');\n-  // //     cy.wait(500);\n-\n-  // //     cy.get('@loadCallback').should('have.callCount', 1);\n-  // //   });\n-\n-  // //   describe('', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad({ body: [] }).as('loadRequest');\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-\n-  // //     it('should have NewTodoField', () => {\n-  // //       page.newTodoField().should('exist');\n-  // //     });\n-\n-  // //     it('should not have Todos', () => {\n-  // //       todos.assertCount(0);\n-  // //     });\n-\n-  // //     it('should not have Footer', () => {\n-  // //       filter.assertHidden();\n-  // //       page.clearCompletedButton().should('not.exist');\n-  // //       page.todosCounter().should('not.exist');\n-  // //     });\n-\n-  // //     it('should not show error message', () => {\n-  // //       errorMessage.assertHidden();\n-  // //     });\n-  // //   });\n-\n-  // //   describe('on loading error', () => {\n-  // //     beforeEach(() => {\n-  // //       // to prevent Cypress from failing the test on uncaught exception\n-  // //       cy.once('uncaught:exception', () => false);\n-\n-  // //       page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-\n-  // //     it('should show error', () => {\n-  // //       errorMessage.assertVisible();\n-  // //     });\n-\n-  // //     it('should show correct message', () => {\n-  // //       errorMessage.assertText('Unable to load todos');\n-  // //     });\n-\n-  // //     it('should hide error after 3 seconds', () => {\n-  // //       // just in case\n-  // //       cy.wait(50);\n-\n-  // //       cy.clock();\n-  // //       cy.tick(2500);\n-  // //       errorMessage.assertVisible();\n-\n-  // //       cy.tick(500);\n-  // //       errorMessage.assertHidden();\n-  // //     });\n-\n-  // //     it('should hide error on close button click', () => {\n-  // //       errorMessage.closeButton().click();\n-  // //       errorMessage.assertHidden();\n-  // //     });\n-  // //   });\n-  // // });\n-\n-  // // describe('Page with mixed todos', () => {\n-  // //   beforeEach(() => {\n-  // //     page.mockLoad().as('loadRequest');\n-  // //     page.visit();\n-  // //     cy.wait('@loadRequest');\n-  // //   });\n-\n-  // //   it('should have NewTodoField', () => {\n-  // //     page.newTodoField().should('exist');\n-  // //   });\n-\n-  // //   it('should have all loaded todos', () => {\n-  // //     todos.assertCount(5);\n-  // //   });\n-\n-  // //   it('should have delete buttons for every todo', () => {\n-  // //     todos.deleteButton(0).should('exist');\n-  // //   });\n-\n-  // //   it('should not have loaders', () => {\n-  // //     todos.assertNotLoading(0);\n-  // //     todos.assertNotLoading(1);\n-  // //     todos.assertNotLoading(2);\n-  // //     todos.assertNotLoading(3);\n-  // //     todos.assertNotLoading(4);\n-  // //   })\n-\n-  // //   it('should have correct todo titles', () => {\n-  // //     todos.assertTitle(0, 'HTML');\n-  // //     todos.assertTitle(1, 'CSS');\n-  // //     todos.assertTitle(2, 'JS');\n-  // //     todos.assertTitle(3, 'TypeScript');\n-  // //     todos.assertTitle(4, 'React');\n-  // //   });\n-\n-  // //   it('should higlight all completed todos', () => {\n-  // //     todos.assertCompleted(0);\n-  // //     todos.assertCompleted(1);\n-  // //     todos.assertCompleted(2);\n-  // //   });\n-\n-  // //   it('should not higlight not completed todos', () => {\n-  // //     todos.assertNotCompleted(3);\n-  // //     todos.assertNotCompleted(4);\n-  // //   });\n-\n-  // //   it('should have correct completed statuses', () => {\n-  // //     todos.statusToggler(0).should('be.checked');\n-  // //     todos.statusToggler(1).should('be.checked');\n-  // //     todos.statusToggler(2).should('be.checked');\n-  // //     todos.statusToggler(3).should('not.be.checked');\n-  // //     todos.statusToggler(4).should('not.be.checked');\n-  // //   });\n-\n-  // //   it('should have Filter', () => {\n-  // //     filter.assertVisible();\n-  // //   });\n-\n-  // //   it('should have todosCounter with a number of not completed todos', () => {\n-  // //     page.todosCounter().should('have.text', '2 items left');\n-  // //   });\n-\n-  // //   it('should have clearCompletedButton', () => {\n-  // //     page.clearCompletedButton().should('exist');\n-  // //   });\n-\n-  // //   it('should have Filter', () => {\n-  // //     filter.assertVisible();\n-  // //   });\n-\n-  // //   it('should not show error message', () => {\n-  // //     errorMessage.assertHidden();\n-  // //   });\n-  // // });\n-\n-  // // describe('Filtering', () => {\n-  // //   describe('with mixed todos', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad().as('loadRequest');\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-\n-  // //     it('should have only filterLinkAll active', () => {\n-  // //       filter.assertSelected('all');\n-  // //       filter.assertNotSelected('active');\n-  // //       filter.assertNotSelected('completed');\n-  // //     });\n-\n-  // //     it('should allow to select the active filter', () => {\n-  // //       filter.link('active').click();\n-\n-  // //       filter.assertNotSelected('all');\n-  // //       filter.assertSelected('active');\n-  // //       filter.assertNotSelected('completed');\n-  // //     });\n-\n-  // //     it('should show only active todos when active filter is selected', () => {\n-  // //       filter.link('active').click();\n-\n-  // //       todos.assertCount(2);\n-  // //       todos.assertTitle(0, 'TypeScript');\n-  // //       todos.assertTitle(1, 'React');\n-  // //     });\n-\n-  // //     it('should keep footer when active todos are shown', () => {\n-  // //       filter.link('active').click();\n-\n-  // //       page.todosCounter().should('have.text', '2 items left');\n-  // //       filter.assertVisible();\n-  // //       page.clearCompletedButton().should('exist');\n-  // //     });\n-\n-  // //     it('should allow to select the completed filter', () => {\n-  // //       filter.link('completed').click();\n-\n-  // //       filter.assertNotSelected('all');\n-  // //       filter.assertNotSelected('active');\n-  // //       filter.assertSelected('completed');\n-  // //     });\n-\n-  // //     it('should show only completed todos when completed filter is selected', () => {\n-  // //       filter.link('completed').click();\n-\n-  // //       todos.assertCount(3);\n-  // //       todos.assertTitle(0, 'HTML');\n-  // //       todos.assertTitle(1, 'CSS');\n-  // //       todos.assertTitle(2, 'JS');\n-  // //     });\n-\n-  // //     it('should keep footer when completed todos are shown', () => {\n-  // //       filter.link('completed').click();\n-\n-  // //       page.todosCounter().should('have.text', '2 items left');\n-  // //       filter.assertVisible();\n-  // //       page.clearCompletedButton().should('exist');\n-  // //     });\n-\n-  // //     it('should allow to reset filter', () => {\n-  // //       filter.link('completed').click();\n-  // //       filter.link('all').click();\n-\n-  // //       todos.assertCount(5);\n-  // //       filter.assertSelected('all');\n-  // //       filter.assertNotSelected('active');\n-  // //       filter.assertNotSelected('completed');\n-  // //     });\n-  // //   });\n-\n-  // //   describe('with active todos only', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-\n-  // //     it('should hide todos on completed selection', () => {\n-  // //       filter.link('completed').click();\n-\n-  // //       todos.assertCount(0);\n-  // //     });\n-\n-  // //     it('should keep footer on completed selection', () => {\n-  // //       filter.link('completed').click();\n-  // //       filter.assertVisible();\n-  // //     });\n-\n-  // //     it('should keep todos counter on completed selection', () => {\n-  // //       filter.link('completed').click();\n-  // //       page.todosCounter().should('have.text', '5 items left');\n-  // //     });\n-  // //   });\n-\n-  // //   describe('with completed todos only', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-  // //   });\n-  // // });\n-\n-  // // describe('Adding a todo', () => {\n-  // //   beforeEach(() => {\n-  // //     page.mockLoad().as('loadRequest');\n-  // //     page.visit();\n-  // //     cy.wait('@loadRequest');\n-  // //   });\n-\n-  // //   it('should focus text field by default', () => {\n-  // //     page.newTodoField().should('be.focused');\n-  // //   });\n-\n-  // //   describe('if title is empty', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockCreate();\n-  // //       page.newTodoField().type('{enter}');\n-  // //     });\n-\n-  // //     it('should not send a request', () => {\n-  // //       cy.get('@createCallback').should('not.be.called');\n-  // //     });\n-\n-  // //     it('should keep text field focused', () => {\n-  // //       page.newTodoField().should('be.focused');\n-  // //     });\n-\n-  // //     it('should display an error message', () => {\n-  // //       errorMessage.assertVisible();\n-  // //       errorMessage.assertText('Title should not be empty');\n-  // //     });\n-\n-  // //     it('should hide an error message after 3 seconds', () => {\n-  // //       // just in case\n-  // //       cy.wait(50);\n-\n-  // //       cy.clock();\n-  // //       cy.tick(3000);\n-  // //       errorMessage.assertHidden();\n-  // //     });\n-  // //   });\n-\n-  // //   describe('if title title has only whitespaces', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockCreate();\n-  // //       page.newTodoField().type('     {enter}');\n-  // //     });\n-\n-  // //     it('should not send a request', () => {\n-  // //       cy.get('@createCallback').should('not.be.called');\n-  // //     });\n-\n-  // //     it('should keep text field focused', () => {\n-  // //       page.newTodoField().should('be.focused');\n-  // //     });\n-\n-  // //     it('should display an error message', () => {\n-  // //       errorMessage.assertVisible();\n-  // //       errorMessage.assertText('Title should not be empty');\n-  // //     });\n-\n-  // //     it('should hide an error message after 3 seconds', () => {\n-  // //       // just in case\n-  // //       cy.wait(50);\n-\n-  // //       cy.clock();\n-  // //       cy.tick(3000);\n-  // //       errorMessage.assertHidden();\n-  // //     });\n-  // //   });\n-\n-  // //   describe('after form submition before response is received', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockCreate();\n-  // //       page.pauseTimers();\n-  // //       page.newTodoField().type('Test Todo{enter}');\n-  // //     });\n-\n-  // //     it('should send a create request', () => {\n-  // //       cy.tick(1000);\n-  // //       cy.get('@createCallback').should('have.callCount', 1);\n-  // //     });\n-\n-  // //     it('should disable the input', () => {\n-  // //       page.newTodoField().should('be.disabled');\n-  // //     });\n-\n-  // //     it('should keep entered text', () => {\n-  // //       page.newTodoField().should('have.value', 'Test Todo');\n-  // //     });\n-\n-  // //     it('should create and show a temp TodoItem with Loader', () => {\n-  // //       todos.assertCount(6);\n-  // //       todos.assertLoading(5);\n-  // //     });\n-\n-  // //     it('should show a temp TodoItem with correct title', () => {\n-  // //       todos.assertTitle(5, 'Test Todo');\n-  // //     });\n-\n-  // //     it('should show a not completed temp TodoItem', () => {\n-  // //       todos.assertNotCompleted(5);\n-  // //     });\n-\n-  // //     it('should not show loaders for existing todos', () => {\n-  // //       todos.assertNotLoading(0);\n-  // //       todos.assertNotLoading(1);\n-  // //       todos.assertNotLoading(2);\n-  // //       todos.assertNotLoading(3);\n-  // //       todos.assertNotLoading(4);\n-  // //     });\n-\n-  // //     it('should not update active counter', () => {\n-  // //       page.todosCounter().should('have.text', '2 items left');\n-  // //     });\n-  // //   });\n-\n-  // //   describe('on success response', () => {\n-  // //     describe('', () => {\n-  // //       beforeEach(() => {\n-  // //         page.mockCreate().as('createRequest');\n-  // //         page.newTodoField().type('Test Todo{enter}');\n-\n-  // //         cy.wait('@createRequest');\n-  // //       });\n-\n-  // //       // this test may be flaky\n-  // //       it.skip('should replace loader with a created todo', () => {\n-  // //         page.flushJSTimers();\n-  // //         todos.assertCount(6);\n-  // //         todos.assertNotLoading(5);\n-  // //       });\n-\n-  // //       it('should add a todo with a correct title', () => {\n-  // //         todos.assertTitle(5, 'Test Todo');\n-  // //       });\n-\n-  // //       it('should add a not completed todo', () => {\n-  // //         todos.assertNotCompleted(5);\n-  // //       });\n-\n-  // //       it('should update active counter', () => {\n-  // //         page.todosCounter().should('have.text', '3 items left');\n-  // //       });\n-\n-  // //       it('should enable the text field', () => {\n-  // //         page.newTodoField().should('not.be.disabled');\n-  // //       });\n-\n-  // //       it('should not show error message', () => {\n-  // //         errorMessage.assertHidden();\n-  // //       });\n-\n-  // //       it('should clear text field', () => {\n-  // //         page.newTodoField().should('have.value', '');\n-  // //       });\n-\n-  // //       it('should focus text field', () => {\n-  // //         page.newTodoField().should('be.focused');\n-  // //       });\n-\n-  // //       it('should allow to add one more todo', () => {\n-  // //         page.mockCreate().as('createRequest2');\n-\n-  // //         page.newTodoField().type('Hello world{enter}');\n-  // //         cy.wait('@createRequest2');\n-  // //         page.flushJSTimers();\n-\n-  // //         todos.assertCount(7);\n-  // //         // todos.assertNotLoading(6);\n-  // //         todos.assertNotCompleted(6);\n-  // //         todos.assertTitle(6, 'Hello world');\n-  // //         page.todosCounter().should('have.text', '4 items left');\n-  // //       });\n-  // //     });\n-\n-  // //     it('should add trimmed title', () => {\n-  // //       page.mockCreate().as('createRequest');\n-\n-  // //       page.newTodoField().type('  Other Title    {enter}');\n-  // //       cy.wait('@createRequest');\n-\n-  // //       // just in case\n-  // //       page.flushJSTimers();\n-\n-  // //       todos.assertTitle(5, 'Other Title');\n-  // //     });\n-\n-  // //     it('should keep current filter', () => {\n-  // //       page.mockCreate().as('createRequest');\n-\n-  // //       filter.link('active').click();\n-  // //       page.newTodoField().type('Test Todo{enter}');\n-  // //       cy.wait('@createRequest');\n-\n-  // //       filter.assertSelected('active');\n-  // //     });\n-  // //   });\n-\n-  // //   describe('on request fail', () => {\n-  // //     beforeEach(() => {\n-  // //       // to prevent Cypress from failing the test on uncaught exception\n-  // //       cy.once('uncaught:exception', () => false);\n-\n-  // //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  // //         .as('createRequest');\n-\n-  // //       page.newTodoField().type('Test Todo{enter}');\n-\n-  // //       cy.wait('@createRequest');\n-  // //     });\n-\n-  // //     it('should show an error message', () => {\n-  // //       errorMessage.assertVisible();\n-  // //       errorMessage.assertText('Unable to add a todo');\n-  // //     });\n-\n-  // //     it('should hide an error message in 3 seconds', () => {\n-  // //       cy.clock();\n-  // //       cy.tick(2500);\n-\n-  // //       errorMessage.assertVisible();\n-\n-  // //       cy.tick(500);\n-  // //       errorMessage.assertHidden();\n-  // //     });\n-\n-  // //     it('should remove a temp TodoItem on request fail', () => {\n-  // //       todos.assertCount(5);\n-  // //       todos.assertTitle(4, 'React');\n-  // //     });\n-\n-  // //     it('should enable the text field on request fail', () => {\n-  // //       page.newTodoField().should('not.be.disabled');\n-  // //     });\n-\n-  // //     it('should keep the entered text on request fail', () => {\n-  // //       page.newTodoField().should('have.value', 'Test Todo');\n-  // //     });\n-\n-  // //     it('should focus text field', () => {\n-  // //       page.newTodoField().should('be.focused');\n-  // //     });\n-\n-  // //     it('should not update active counter', () => {\n-  // //       page.todosCounter().should('have.text', '2 items left');\n-  // //     });\n-\n-  // //     it('should immediately hide an error message on new request', () => {\n-  // //       page.newTodoField().type(`{enter}`);\n-  // //       errorMessage.assertHidden();\n-  // //     });\n-\n-  // //     it('should show an error message again on a next fail', () => {\n-  // //       // to prevent Cypress from failing the test on uncaught exception\n-  // //       cy.once('uncaught:exception', () => false);\n-\n-  // //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  // //         .as('createRequest2');\n-\n-  // //       page.newTodoField().type(`{enter}`);\n-  // //       cy.wait('@createRequest2');\n-\n-  // //       errorMessage.assertVisible();\n-  // //     });\n-\n-  // //     it('should keep an error message for 3s after the last fail', () => {\n-  // //       // to prevent Cypress from failing the test on uncaught exception\n-  // //       cy.once('uncaught:exception', () => false);\n-\n-  // //       page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-  // //         .as('createRequest2');\n-\n-  // //       cy.clock();\n-\n-  // //       cy.tick(2000);\n-  // //       page.newTodoField().type(`{enter}`);\n-  // //       cy.tick(500);\n-  // //       cy.wait('@createRequest2');\n-  // //       cy.tick(2000);\n-\n-  // //       errorMessage.assertVisible();\n-  // //     });\n-\n-  // //     it('should allow to add a todo', () => {\n-  // //       page.mockCreate().as('createRequest2');\n-  // //       page.newTodoField().type('{enter}');\n-\n-  // //       cy.wait('@createRequest2');\n-  // //       page.flushJSTimers();\n-\n-  // //       todos.assertCount(6);\n-  // //       // todos.assertNotLoading(5);\n-  // //       todos.assertNotCompleted(5);\n-  // //       todos.assertTitle(5, 'Test Todo');\n-\n-  // //       page.todosCounter().should('have.text', '3 items left');\n-  // //     });\n-  // //   });\n-  // // });\n-\n-  // // describe('Adding a first todo', () => {\n-  // //   beforeEach(() => {\n-  // //     page.mockLoad({ body: [] }).as('loadRequest');\n-  // //     page.visit();\n-  // //     cy.wait('@loadRequest');\n-\n-  // //     page.mockCreate().as('createRequest');\n-  // //     page.newTodoField().type('First todo{enter}');\n-\n-  // //     cy.wait('@createRequest');\n-  // //   });\n-\n-  // //   it('should show a new todos', () => {\n-  // //     todos.assertCount(1);\n-  // //     todos.assertTitle(0, 'First todo');\n-  // //     todos.assertNotCompleted(0);\n-  // //   });\n-\n-  // //   it('should show Filter', () => {\n-  // //     filter.assertVisible();\n-  // //   });\n-\n-  // //   it('should show todosCounter', () => {\n-  // //     page.todosCounter().should('contain.text', '1 item');\n-  // //   });\n-  // // });\n-\n-  // // describe('Individual Todo Deletion', () => {\n-  // //   describe('Default behavior', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad().as('loadRequest');\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-\n-  // //     it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n-  // //       page.mockDelete(257334);\n-  // //       page.pauseTimers();\n-  // //       todos.deleteButton(0).click();\n-\n-  // //       todos.assertLoading(0);\n-  // //     });\n-\n-  // //     it('should not delete a todo before successful response', () => {\n-  // //       page.mockDelete(257334);\n-  // //       page.pauseTimers();\n-  // //       todos.deleteButton(0).click();\n-\n-  // //       todos.assertCount(5);\n-  // //     });\n-\n-  // //     it('should remove the todo from the list on a successful API response', () => {\n-  // //       page.mockDelete(257334).as('deleteRequest');\n-\n-  // //       todos.deleteButton(0).click();\n-  // //       cy.wait('@deleteRequest');\n-\n-  // //       todos.assertCount(4);\n-  // //       todos.assertTitle(0, 'CSS');\n-  // //     });\n-\n-  // //     it('should focus text field after todo deletion', () => {\n-  // //       page.mockDelete(257334).as('deleteRequest');\n-\n-  // //       todos.deleteButton(0).click();\n-  // //       cy.wait('@deleteRequest');\n-\n-  // //       page.newTodoField().should('be.focused');\n-  // //     });\n-\n-  // //     it('should not remove the todo from the list on an API error', () => {\n-  // //       // to prevent Cypress from failing the test on uncaught exception\n-  // //       cy.once('uncaught:exception', () => false);\n-\n-  // //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n-\n-  // //       todos.deleteButton(0).click();\n-  // //       cy.wait('@deleteRequest');\n-\n-  // //       todos.assertCount(5);\n-  // //       todos.assertTitle(0, 'HTML');\n-  // //     });\n-\n-  // //     it('should show an error message on an API error', () => {\n-  // //       // to prevent Cypress from failing the test on uncaught exception\n-  // //       cy.once('uncaught:exception', () => false);\n-\n-  // //       page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n-\n-  // //       todos.deleteButton(0).click();\n-  // //       cy.wait('@deleteRequest');\n-\n-  // //       errorMessage.assertVisible();\n-  // //       errorMessage.assertText('Unable to delete a todo');\n-  // //     });\n-\n-  // //     it('should adjust the active todo count correctly after successful deletion', () => {\n-  // //       page.mockDelete(257338).as('deleteRequest');\n-  // //       todos.deleteButton(4).click();\n-  // //       cy.wait('@deleteRequest');\n-\n-  // //       page.todosCounter().should('contain.text', '1 item');\n-  // //     });\n-\n-  // //     it('should not adjust the active todo count after failed deletion', () => {\n-  // //       // to prevent Cypress from failing the test on uncaught exception\n-  // //       cy.once('uncaught:exception', () => false);\n-\n-  // //       page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n-  // //         .as('deleteRequest');\n-\n-  // //       todos.deleteButton(4).click();\n-  // //       cy.wait('@deleteRequest');\n-\n-  // //       page.todosCounter().should('have.text', '2 items left');\n-  // //     });\n-  // //   });\n-\n-  // //   describe('Last todo deletion', () => {\n-  // //     beforeEach(() => {\n-  // //       const todo = {\n-  // //         \"id\": 257334,\n-  // //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-  // //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-  // //         \"userId\": 1,\n-  // //         \"title\": \"HTML\",\n-  // //         \"completed\": false\n-  // //       };\n-\n-  // //       page.mockLoad({ body: [todo] }).as('loadRequest');\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-\n-  // //       page.mockDelete(257334);\n-  // //       todos.deleteButton(0).click();\n-  // //     });\n-\n-  // //     it('should hide todos', () => {\n-  // //       todos.assertCount(0);\n-  // //     });\n-\n-  // //     it('should hide footer', () => {\n-  // //       filter.assertHidden();\n-  // //       page.clearCompletedButton().should('not.exist');\n-  // //       page.todosCounter().should('not.exist');\n-  // //     });\n-\n-  // //     it('should focus text field after todo deletion', () => {\n-  // //       page.newTodoField().should('be.focused');\n-  // //     });\n-  // //   });\n-  // // });\n-\n-  // // describe('Group Todo Deletion', () => {\n-  // //   describe('with no completed todos', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-\n-  // //     it('should not have active ClearCompleted button', () => {\n-  // //       page.clearCompletedButton().should('be.disabled');\n-  // //     });\n-  // //   });\n-\n-  // //   describe('with some completed todos', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad().as('loadRequest');\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-\n-  // //     it('should have ClearCompleted button enabled', () => {\n-  // //       page.clearCompletedButton().should('not.be.disabled');\n-  // //     });\n-\n-  // //     it('should send individual deletion request for each completed todo', () => {\n-  // //       page.mockDelete(257334).as('deleteRequest1');\n-  // //       page.mockDelete(257335).as('deleteRequest2');\n-  // //       page.mockDelete(257336).as('deleteRequest3');\n-\n-  // //       page.clearCompletedButton().click();\n-\n-  // //       cy.wait('@deleteRequest1');\n-  // //       cy.wait('@deleteRequest2');\n-  // //       cy.wait('@deleteRequest3');\n-  // //     });\n-\n-  // //     describe('on success', () => {\n-  // //       beforeEach(() => {\n-  // //         page.mockDelete(257334).as('deleteRequest1');\n-  // //         page.mockDelete(257335).as('deleteRequest2');\n-  // //         page.mockDelete(257336).as('deleteRequest3');\n-\n-  // //         page.clearCompletedButton().click();\n-\n-  // //         cy.wait('@deleteRequest1');\n-  // //         cy.wait('@deleteRequest2');\n-  // //         cy.wait('@deleteRequest3');\n-  // //       });\n-\n-  // //       it('should remove all completed todos from the list', () => {\n-  // //         todos.assertCount(2);\n-  // //         todos.assertTitle(0, 'TypeScript');\n-  // //         todos.assertTitle(1, 'React');\n-  // //       });\n-\n-  // //       it('should disable ClearCompleted button', () => {\n-  // //         page.clearCompletedButton().should('be.disabled');\n-  // //       });\n-\n-  // //       it('should focus the text field', () => {\n-  // //         page.newTodoField().should('be.focused');\n-  // //       });\n-  // //     });\n-\n-  // //     describe('on a single fail', () => {\n-  // //       beforeEach(() => {\n-  // //         // to prevent Cypress from failing the test on uncaught exception\n-  // //         cy.once('uncaught:exception', () => false);\n-\n-  // //         page.mockDelete(257334).as('deleteRequest1');\n-  // //         page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n-  // //         page.mockDelete(257336).as('deleteRequest3');\n-\n-  // //         page.clearCompletedButton().click();\n-\n-  // //         cy.wait('@deleteRequest1');\n-  // //         cy.wait('@deleteRequest2');\n-  // //         cy.wait('@deleteRequest3');\n-  // //       });\n-\n-  // //       it('should show an error message if any of the group deletions fails', () => {\n-  // //         errorMessage.assertVisible();\n-  // //         errorMessage.assertText('Unable to delete a todo');\n-  // //       });\n-\n-  // //       it('should remove todos with success responses and keep todos with errors', () => {\n-  // //         todos.assertCount(3);\n-  // //         todos.assertTitle(0, 'CSS');\n-  // //         todos.assertTitle(1, 'TypeScript');\n-  // //       });\n-\n-  // //       it('should not disable ClearCompleted button', () => {\n-  // //         page.clearCompletedButton().should('not.be.disabled');\n-  // //       });\n-  // //     });\n-  // //   });\n-\n-  // //   describe('with all todos completed', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-\n-  // //       page.mockDelete(257334).as('deleteRequest1');\n-  // //       page.mockDelete(257335).as('deleteRequest2');\n-  // //       page.mockDelete(257336).as('deleteRequest3');\n-  // //       page.mockDelete(257337).as('deleteRequest4');\n-  // //       page.mockDelete(257338).as('deleteRequest5');\n-\n-  // //       page.clearCompletedButton().click();\n-\n-  // //       cy.wait('@deleteRequest1');\n-  // //       cy.wait('@deleteRequest2');\n-  // //       cy.wait('@deleteRequest3');\n-  // //       cy.wait('@deleteRequest4');\n-  // //       cy.wait('@deleteRequest5');\n-  // //     });\n-\n-  // //     it('should hide todos after clearing all completed todos', () => {\n-  // //       todos.assertCount(0);\n-  // //     });\n-\n-  // //     it('should hide footer after clearing all completed todos', () => {\n-  // //       filter.assertHidden();\n-  // //       page.clearCompletedButton().should('not.exist');\n-  // //       page.todosCounter().should('not.exist');\n-  // //     });\n-  // //   });\n-  // // });\n-\n-  // // describe('Todo Toggling', () => {\n-  // //   beforeEach(() => {\n-  // //     page.mockLoad().as('loadRequest');\n-  // //     page.visit();\n-  // //     cy.wait('@loadRequest');\n-  // //   });\n-\n-  // //   describe('before receving response', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockUpdate(257334).as('updateRequest');\n-  // //     });\n-\n-  // //     it('should send an update request', () => {\n-  // //       todos.statusToggler(0).click();\n-  // //       cy.wait('@updateRequest');\n-  // //     });\n-\n-  // //     it('should show loader after click', () => {\n-  // //       page.pauseTimers();\n-  // //       todos.statusToggler(0).click();\n-\n-  // //       todos.assertLoading(0);\n-  // //     });\n-\n-  // //     it('should not show error message after click', () => {\n-  // //       page.pauseTimers();\n-  // //       todos.statusToggler(0).click();\n-\n-  // //       errorMessage.assertHidden();\n-  // //     });\n-\n-  // //     it('should not hide a todo if filtered', () => {\n-  // //       filter.link('completed').click();\n-  // //       page.pauseTimers();\n-  // //       cy.tick(1000); // flush JS animation\n-  // //       todos.statusToggler(0).click();\n-\n-  // //       todos.assertCount(3);\n-  // //       todos.assertTitle(0, 'HTML');\n-  // //     });\n-  // //   });\n-\n-  // //   describe('on success', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockUpdate(257334).as('updateRequest');\n-\n-  // //       todos.statusToggler(0).click();\n-  // //       cy.wait('@updateRequest');\n-  // //     });\n-\n-  // //     it('should toggle a todo', () => {\n-  // //       todos.assertNotCompleted(0);\n-  // //       todos.statusToggler(0).should('not.be.checked');\n-  // //     });\n-\n-  // //     it('should cancel loading', () => {\n-  // //       page.flushJSTimers();\n-  // //       todos.assertNotLoading(0);\n-  // //     });\n-\n-  // //     it('should update the counter', () => {\n-  // //       page.todosCounter().should('have.text', '3 items left');\n-  // //     });\n-\n-  // //     it('should not show an error message', () => {\n-  // //       errorMessage.assertHidden();\n-  // //     });\n-  // //   });\n-\n-  // //   describe('on fail', () => {\n-  // //     beforeEach(() => {\n-  // //       // to prevent Cypress from failing the test on uncaught exception\n-  // //       cy.once('uncaught:exception', () => false);\n-\n-  // //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-  // //         .as('updateRequest');\n-\n-  // //       todos.statusToggler(0).click();\n-  // //       cy.wait('@updateRequest');\n-  // //     });\n-\n-  // //     it('should show an error', () => {\n-  // //       errorMessage.assertVisible();\n-  // //       errorMessage.assertText('Unable to update a todo');\n-  // //     });\n-\n-  // //     it('should not toggle a todo', () => {\n-  // //       todos.assertCompleted(0);\n-  // //       todos.statusToggler(0).should('be.checked');\n-  // //     });\n-\n-  // //     it('should cancel loading', () => {\n-  // //       page.flushJSTimers();\n-  // //       todos.assertNotLoading(0);\n-  // //     });\n-\n-  // //     it('should not update the counter', () => {\n-  // //       page.todosCounter().should('have.text', '2 items left');\n-  // //     });\n-\n-  // //     it('should allow to toggle again', () => {\n-  // //       page.mockUpdate(257334).as('updateRequest2');\n-\n-  // //       todos.statusToggler(0).click();\n-  // //       cy.wait('@updateRequest2');\n-\n-  // //       todos.assertNotCompleted(0);\n-  // //     });\n-  // //   });\n-\n-  // //   describe('if filtered', () => {\n-  // //     beforeEach(() => {\n-  // //       filter.link('completed').click();\n-  // //     });\n-\n-  // //     it('should hide a todo on success', () => {\n-  // //       page.mockUpdate(257334).as('updateRequest');\n-\n-  // //       todos.statusToggler(0).click();\n-  // //       cy.wait('@updateRequest');\n-\n-  // //       todos.assertCount(2);\n-  // //       todos.assertTitle(0, 'CSS');\n-  // //     });\n-\n-  // //     it('should show a todo on success when selected an oposite filter', () => {\n-  // //       page.mockUpdate(257334).as('updateRequest');\n-\n-  // //       todos.statusToggler(0).click();\n-  // //       filter.link('active').click();\n-  // //       cy.wait('@updateRequest');\n-\n-  // //       todos.assertCount(3);\n-  // //       todos.assertTitle(0, 'HTML');\n-  // //     });\n-\n-  // //     it('should not hide a todo on fail', () => {\n-  // //       // to prevent Cypress from failing the test on uncaught exception\n-  // //       cy.once('uncaught:exception', () => false);\n-\n-  // //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-  // //         .as('updateRequest');\n-\n-  // //       todos.statusToggler(0).click();\n-  // //       cy.wait('@updateRequest');\n-\n-  // //       todos.assertCount(3);\n-  // //       todos.assertTitle(0, 'HTML');\n-  // //     });\n-  // //   });\n-  // // });\n-\n-\n-\n-\n-\n-\n-\n-  // // describe('Toggle All Button', () => {\n-  // //   describe('if there are no todos', () => {\n-  // //     it('should not be visible while loading todos', () => {\n-  // //       page.mockLoad({ body: [] }).as('loadRequest');\n-\n-  // //       page.pauseTimers();\n-  // //       page.visit();\n-\n-  // //       page.toggleAllButton().should('not.exist');\n-  // //     });\n-\n-  // //     it('should not be visible when loaded', () => {\n-  // //       page.mockLoad({ body: [] }).as('loadRequest');\n-\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-\n-  // //       page.toggleAllButton().should('not.exist');\n-  // //     });\n-\n-  // //     it('should appear after adding a todo', () => {\n-  // //       page.mockLoad({ body: [] }).as('loadRequest');\n-  // //       page.mockCreate().as('createRequest');\n-\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-\n-  // //       page.newTodoField().type('First todo{enter}');\n-  // //       cy.wait('@createRequest');\n-\n-  // //       page.toggleAllButton().should('exist');\n-  // //     });\n-\n-  // //     it('should disappear after removing the last todo', () => {\n-  // //       const todo = {\n-  // //         \"id\": 257334,\n-  // //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-  // //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-  // //         \"userId\": 1,\n-  // //         \"title\": \"HTML\",\n-  // //         \"completed\": false\n-  // //       };\n-\n-  // //       page.mockLoad({ body: [todo] }).as('loadRequest');\n-  // //       page.mockDelete(257334).as('deleteRequest');\n-\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-\n-  // //       todos.deleteButton(0).click();\n-  // //       cy.wait('@deleteRequest');\n-\n-  // //       page.toggleAllButton().should('not.exist');\n-  // //     });\n-  // //   });\n-\n-  // //   describe('if all todos are completed', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-\n-  // //     it('should be visible', () => {\n-  // //       page.toggleAllButton().should('exist');\n-  // //     });\n-\n-  // //     it('should stay visible after filtering out all the todos', () => {\n-  // //       filter.link('active').click();\n-\n-  // //       page.toggleAllButton().should('exist');\n-  // //     });\n-\n-  // //     it('should be active', () => {\n-  // //       page.toggleAllButton().should('have.class', 'active');\n-  // //     });\n-\n-  // //     it('should become not active after toggling a todo', () => {\n-  // //       page.mockUpdate(257335).as('updateRequest');\n-  // //       todos.statusToggler(1).click();\n-  // //       cy.wait('@updateRequest');\n-\n-  // //       page.toggleAllButton().should('not.have.class', 'active');\n-  // //     });\n-\n-  // //     it('should stay active after a todo toggling fail', () => {\n-  // //       // to prevent Cypress from failing the test on uncaught exception\n-  // //       cy.once('uncaught:exception', () => false);\n-\n-  // //       page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n-  // //       todos.statusToggler(1).click();\n-  // //       cy.wait('@updateRequest');\n-\n-  // //       page.toggleAllButton().should('have.class', 'active');\n-  // //     });\n-\n-  // //     describe('on click', () => {\n-  // //       beforeEach(() => {\n-  // //         page.mockUpdate(257334).as('updateRequest4');\n-  // //         page.mockUpdate(257335).as('updateRequest5');\n-  // //         page.mockUpdate(257336).as('updateRequest6');\n-  // //         page.mockUpdate(257337).as('updateRequest7');\n-  // //         page.mockUpdate(257338).as('updateRequest8');\n-\n-  // //         page.toggleAllButton().click();\n-\n-  // //         cy.wait('@updateRequest4');\n-  // //         cy.wait('@updateRequest5');\n-  // //         cy.wait('@updateRequest6');\n-  // //         cy.wait('@updateRequest7');\n-  // //         cy.wait('@updateRequest8');\n-  // //       });\n-\n-  // //       it('should send requests for all todos', () => {\n-  // //         // if before each pass\n-  // //       });\n-\n-  // //       it('should make all todos active', () => {\n-  // //         todos.assertNotCompleted(0);\n-  // //         todos.assertNotCompleted(1);\n-  // //         todos.assertNotCompleted(2);\n-  // //         todos.assertNotCompleted(3);\n-  // //         todos.assertNotCompleted(4);\n-  // //       });\n-\n-  // //       it('should become not active', () => {\n-  // //         page.toggleAllButton().should('not.have.class', 'active');\n-  // //       });\n-  // //     });\n-  // //   });\n-\n-  // //   describe('if all todos are active', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-\n-  // //     it('should be visible', () => {\n-  // //       page.toggleAllButton().should('exist');\n-  // //     });\n-\n-  // //     it('should not be active', () => {\n-  // //       page.toggleAllButton().should('not.have.class', 'active');\n-  // //     });\n-\n-  // //     it('should not become active after toggling a todo', () => {\n-  // //       page.mockUpdate(257335).as('updateRequest');\n-  // //       todos.statusToggler(1).click();\n-  // //       cy.wait('@updateRequest');\n-\n-  // //       page.toggleAllButton().should('not.have.class', 'active');\n-  // //     });\n-\n-  // //     describe('on click', () => {\n-  // //       beforeEach(() => {\n-  // //         page.mockUpdate(257334).as('updateRequest4');\n-  // //         page.mockUpdate(257335).as('updateRequest5');\n-  // //         page.mockUpdate(257336).as('updateRequest6');\n-  // //         page.mockUpdate(257337).as('updateRequest7');\n-  // //         page.mockUpdate(257338).as('updateRequest8');\n-\n-  // //         page.toggleAllButton().click();\n-\n-  // //         cy.wait('@updateRequest4');\n-  // //         cy.wait('@updateRequest5');\n-  // //         cy.wait('@updateRequest6');\n-  // //         cy.wait('@updateRequest7');\n-  // //         cy.wait('@updateRequest8');\n-  // //       });\n-\n-  // //       it('should send requests for all todos', () => {\n-  // //         // if before each pass\n-  // //       });\n-\n-  // //       it('should make all todos completed', () => {\n-  // //         todos.assertCompleted(0);\n-  // //         todos.assertCompleted(1);\n-  // //         todos.assertCompleted(2);\n-  // //         todos.assertCompleted(3);\n-  // //         todos.assertCompleted(4);\n-  // //       });\n-\n-  // //       it('should become active', () => {\n-  // //         page.toggleAllButton().should('have.class', 'active');\n-  // //       });\n-  // //     });\n-  // //   });\n-\n-  // //   describe('if there are some mixed todos', () => {\n-  // //     beforeEach(() => {\n-  // //       page.mockLoad().as('loadRequest');\n-\n-  // //       page.visit();\n-  // //       cy.wait('@loadRequest');\n-  // //     });\n-\n-  // //     it('should be visible', () => {\n-  // //       page.toggleAllButton().should('exist');\n-  // //     });\n-\n-  // //     it('should not be active', () => {\n-  // //       page.toggleAllButton().should('not.have.class', 'active');\n-  // //     });\n-\n-  // //     it('should become active after completing all todos', () => {\n-  // //       page.mockUpdate(257337).as('updateRequest1');\n-  // //       page.mockUpdate(257338).as('updateRequest2');\n-\n-  // //       todos.statusToggler(3).click();\n-  // //       cy.wait('@updateRequest1');\n-  // //       todos.statusToggler(4).click();\n-  // //       cy.wait('@updateRequest2');\n-\n-  // //       page.toggleAllButton().should('have.class', 'active');\n-  // //     });\n-\n-  // //     describe('on click', () => {\n-  // //       beforeEach(() => {\n-  // //         page.mockUpdate(257334, cy.stub().as('update4'));\n-  // //         page.mockUpdate(257335, cy.stub().as('update5'));\n-  // //         page.mockUpdate(257336, cy.stub().as('update6'));\n-  // //         page.mockUpdate(257337).as('updateRequest7');\n-  // //         page.mockUpdate(257338).as('updateRequest8');\n-\n-  // //         page.toggleAllButton().click();\n-\n-  // //         cy.wait('@updateRequest7');\n-  // //         cy.wait('@updateRequest8');\n-  // //       });\n-\n-  // //       it('should send requests only for not completed todos', () => {\n-  // //         cy.get('@update4').should('not.be.called');\n-  // //         cy.get('@update5').should('not.be.called');\n-  // //         cy.get('@update6').should('not.be.called');\n-  // //       });\n-\n-  // //       it('should make all todos completed', () => {\n-  // //         todos.assertCompleted(0);\n-  // //         todos.assertCompleted(1);\n-  // //         todos.assertCompleted(2);\n-  // //         todos.assertCompleted(3);\n-  // //         todos.assertCompleted(4);\n-  // //       });\n-\n-  // //       it('should become active', () => {\n-  // //         page.toggleAllButton().should('have.class', 'active');\n-  // //       });\n-  // //     });\n-  // //   });\n-  // // });\n-\n-  // describe('Renaming', () => {\n-  //   beforeEach(() => {\n-  //     page.mockLoad().as('loadRequest');\n-  //     page.visit();\n-  //     cy.wait('@loadRequest');\n-  //   });\n-\n-  //   it('should not show forms by default', () => {\n-  //     todos.titleField(0).should('not.exist');\n-  //     todos.titleField(1).should('not.exist');\n-  //     todos.titleField(2).should('not.exist');\n-  //     todos.titleField(3).should('not.exist');\n-  //     todos.titleField(4).should('not.exist');\n-  //   });\n-\n-  //   describe('Edit Form', () => {\n-  //     // describe('by default', () => {\n-  //     //   it('should be opened on dblclick', () => {\n-  //     //     todos.title(0).trigger('dblclick');\n-\n-  //     //     todos.titleField(0).should('exist');\n-  //     //   });\n-\n-  //     //   it('should have current value', () => {\n-  //     //     todos.title(0).trigger('dblclick');\n-\n-  //     //     todos.titleField(0).should('have.value', 'HTML');\n-  //     //   });\n-\n-  //     //   it('should be focused', () => {\n-  //     //     todos.title(0).trigger('dblclick');\n-\n-  //     //     todos.titleField(0).should('be.focused');\n-  //     //   });\n-\n-  //     //   it('should hide a title', () => {\n-  //     //     todos.title(0).trigger('dblclick');\n-\n-  //     //     todos.title(0).should('not.exist');\n-  //     //   });\n-\n-  //     //   it('should hide DeleteButton', () => {\n-  //     //     todos.title(0).trigger('dblclick');\n-\n-  //     //     todos.deleteButton(0).should('not.exist');\n-  //     //   });\n-\n-  //     //   it('should keep StatusToggler', () => {\n-  //     //     todos.title(0).trigger('dblclick');\n-\n-  //     //     todos.statusToggler(0).should('exist');\n-  //     //   });\n-\n-  //     //   it('should not open forms for other todos', () => {\n-  //     //     todos.title(0).trigger('dblclick');\n-\n-  //     //     todos.titleField(1).should('not.exist');\n-  //     //     todos.titleField(2).should('not.exist');\n-  //     //     todos.titleField(3).should('not.exist');\n-  //     //     todos.titleField(4).should('not.exist');\n-  //     //   });\n-\n-  //     //   it('should not send a request on change', () => {\n-  //     //     const spy = cy.stub()\n-  //     //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-  //     //       .as('renameCallback');\n-\n-  //     //     page.mockUpdate(257334, spy);\n-\n-  //     //     todos.title(0).trigger('dblclick');\n-  //     //     todos.titleField(0).type('123');\n-\n-  //     //     cy.get('@renameCallback').should('not.be.called');\n-  //     //   });\n-  //     // });\n-\n-  //     // describe('on Escape', () => {\n-  //     //   it('should be closed', () => {\n-  //     //     todos.title(0).trigger('dblclick');\n-  //     //     todos.titleField(0).type('123123{esc}');\n-\n-  //     //     todos.titleField(0).should('not.exist');\n-  //     //   });\n-\n-  //     //   it('should keep current title', () => {\n-  //     //     todos.title(0).trigger('dblclick');\n-  //     //     todos.titleField(0).type('123123{esc}');\n-\n-  //     //     todos.assertTitle(0, 'HTML');\n-  //     //   });\n-\n-  //     //   it('should not send a request', () => {\n-  //     //     const spy = cy.stub()\n-  //     //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-  //     //       .as('renameCallback');\n-\n-  //     //     page.mockUpdate(257334, spy);\n-\n-  //     //     todos.title(0).trigger('dblclick');\n-  //     //     todos.titleField(0).type('123123{esc}');\n-\n-  //     //     cy.get('@renameCallback').should('not.be.called');\n-  //     //   });\n-  //     // });\n-\n-  //     // describe('on enter before recieved a response', () => {\n-  //     //   it('should send a request', () => {\n-  //     //     const spy = cy.stub()\n-  //     //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-  //     //       .as('renameCallback');\n-\n-  //     //     page.mockUpdate(257334, spy);\n-\n-  //     //     todos.title(0).trigger('dblclick');\n-  //     //     todos.titleField(0).type('123{enter}');\n-\n-  //     //     cy.get('@renameCallback').should('have.callCount', 1);\n-  //     //   });\n-\n-  //     //   it('should show loader', () => {\n-  //     //     page.mockUpdate(257334);\n-\n-  //     //     todos.title(0).trigger('dblclick');\n-  //     //     page.pauseTimers();\n-  //     //     todos.titleField(0).type('123{enter}');\n-\n-  //     //     todos.assertLoading(0);\n-  //     //   });\n-\n-  //     //   // It depend on your implementation\n-  //     //   it.skip('should stay while waiting', () => {\n-  //     //     page.mockUpdate(257334);\n-\n-  //     //     todos.title(0).trigger('dblclick');\n-  //     //     page.pauseTimers();\n-  //     //     todos.titleField(0).type('123{enter}');\n-\n-  //     //     todos.titleField(0).should('exist');\n-  //     //   });\n-  //     // });\n-\n-  //     // describe('on success', () => {\n-  //     //   beforeEach(() => {\n-  //     //     page.mockUpdate(257334).as('renameRequest');\n-\n-  //     //     todos.title(0).trigger('dblclick');\n-  //     //     todos.titleField(0).clear()\n-  //     //   });\n-\n-  //     //   it('should cancel loading', () => {\n-  //     //     todos.titleField(0).type('123{enter}');\n-  //     //     cy.wait('@renameRequest');\n-  //     //     page.flushJSTimers();\n-\n-  //     //     todos.assertNotLoading(0);\n-  //     //   });\n-\n-  //     //   it('should be closed', () => {\n-  //     //     todos.titleField(0).type('123{enter}');\n-  //     //     cy.wait('@renameRequest');\n-  //     //     page.flushJSTimers();\n-\n-  //     //     todos.titleField(0).should('not.exist');\n-  //     //   });\n-\n-  //     //   it('should show the updated title', () => {\n-  //     //     todos.titleField(0).type('Something{enter}');\n-  //     //     cy.wait('@renameRequest');\n-  //     //     page.flushJSTimers();\n-\n-  //     //     todos.assertTitle(0, 'Something');\n-  //     //   });\n-\n-  //     //   it('should show trim the new title', () => {\n-  //     //     todos.titleField(0).type('   Some new title      {enter}');\n-  //     //     cy.wait('@renameRequest');\n-  //     //     page.flushJSTimers();\n-\n-  //     //     todos.assertTitle(0, 'Some new title');\n-  //     //   });\n-  //     // });\n-\n-  //     describe('on fail', () => {\n-  //       beforeEach(() => {\n-  //         // to prevent Cypress from failing the test on uncaught exception\n-  //         cy.once('uncaught:exception', () => false);\n-\n-  //         page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n-\n-  //         todos.title(0).trigger('dblclick');\n-  //         todos.titleField(0).type('123{enter}');\n-  //         cy.wait('@renameRequest');\n-  //       });\n-\n-  //       it('should cancel loading on fail', () => {\n-  //         page.flushJSTimers();\n-  //         todos.assertNotLoading(0);\n-  //       });\n-\n-  //       it('should stay open on fail', () => {\n-  //         todos.titleField(0).should('exist');\n-  //       });\n-\n-  //       it('should show error message', () => {\n-  //         errorMessage.assertVisible();\n-  //         errorMessage.assertText('Unable to update a todo');\n-  //       });\n-\n-  //       it('should hide error message in 3s', () => {\n-  //         page.flushJSTimers(3000);\n-\n-  //         errorMessage.assertHidden();\n-  //       });\n-  //     });\n-\n-  //     describe('if title was not changed', () => {\n-  //       it('should not send a request on enter', () => {\n-  //         const spy = cy.stub()\n-  //           .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-  //           .as('renameCallback');\n-\n-  //         page.mockUpdate(257334, spy);\n-\n-  //         todos.title(0).trigger('dblclick');\n-  //         todos.titleField(0).type('{enter}');\n-\n-  //         cy.get('@renameCallback').should('not.be.called');\n-  //       });\n-\n-  //       it('should be close on enter', () => {\n-  //         todos.title(0).trigger('dblclick');\n-  //         todos.titleField(0).type('{enter}');\n-\n-  //         todos.titleField(0).should('not.exist');\n-  //       });\n-\n-  //       it('should be closed on Escape', () => {\n-  //         todos.title(0).trigger('dblclick');\n-  //         todos.titleField(0).type('{esc}');\n-\n-  //         todos.titleField(0).should('not.exist');\n-  //       });\n-\n-  //       it('should preserve current title on save', () => {\n-  //         todos.title(0).trigger('dblclick');\n-  //         todos.titleField(0).type('{enter}');\n-\n-  //         todos.assertTitle(0, 'HTML');\n-  //       });\n-  //     });\n-\n-  //     describe('if title became empty', () => {\n-  //       beforeEach(() => {\n-  //         const spy = cy.stub()\n-  //           .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-  //           .as('renameCallback');\n-\n-  //         page.mockUpdate(257334, spy);\n-\n-  //         todos.title(0).trigger('dblclick');\n-  //         todos.titleField(0).clear();\n-  //       });\n-\n-  //       it('should not send an update request on enter', () => {\n-  //         page.mockDelete(257334).as('deleteRequest');\n-  //         todos.titleField(0).type('{enter}');\n-\n-  //         cy.get('@renameCallback').should('not.be.called');\n-  //       });\n-\n-  //       it('should send a delete request on enter', () => {\n-  //         page.mockDelete(257334).as('deleteRequest');\n-  //         todos.titleField(0).type('{enter}');\n-\n-  //         cy.wait('@deleteRequest');\n-  //       });\n-\n-  //       it('should show loading on enter', () => {\n-  //         page.mockDelete(257334).as('deleteRequest');\n-\n-  //         page.pauseTimers();\n-  //         todos.titleField(0).type('{enter}');\n-\n-  //         todos.assertLoading(0);\n-  //       });\n-\n-  //       it('should delete a todo on success', () => {\n-  //         page.mockDelete(257334).as('deleteRequest');\n-  //         todos.titleField(0).type('{enter}');\n-  //         cy.wait('@deleteRequest');\n-\n-  //         todos.assertCount(4);\n-  //         todos.assertTitle(0, 'CSS');\n-  //       });\n-\n-  //       it('should show deleting error message on fail', () => {\n-  //         // to prevent Cypress from failing the test on uncaught exception\n-  //         cy.once('uncaught:exception', () => false);\n-\n-  //         page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-  //         todos.titleField(0).type('{enter}');\n-  //         cy.wait('@deleteRequest');\n-\n-  //         errorMessage.assertVisible();\n-  //         errorMessage.assertText('Unable to delete a todo')\n-  //       });\n-\n-  //       // this test may be unstable\n-  //       it.skip('should hide loader on fail', () => {\n-  //         // to prevent Cypress from failing the test on uncaught exception\n-  //         cy.once('uncaught:exception', () => false);\n-\n-  //         page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-  //         todos.titleField(0).type('{enter}');\n-  //         cy.wait('@deleteRequest');\n-  //         page.flushJSTimers();\n-\n-  //         todos.assertNotLoading(0);\n-  //       });\n-\n-  //       it('should stay open on fail', () => {\n-  //         // to prevent Cypress from failing the test on uncaught exception\n-  //         cy.once('uncaught:exception', () => false);\n-\n-  //         page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-  //         todos.titleField(0).type('{enter}');\n-  //         cy.wait('@deleteRequest');\n-\n-  //         todos.titleField(0).should('exist');\n-  //       });\n-\n-  //       it('should be closed on Escape', () => {\n-  //         todos.titleField(0).type('{esc}');\n-\n-  //         todos.titleField(0).should('not.exist');\n-  //       });\n-\n-  //       it('should preserve current title on close', () => {\n-  //         todos.titleField(0).type('{esc}');\n-\n-  //         todos.title(0).should('have.text', 'HTML');\n-  //       });\n-  //     });\n-\n-  //     describe('on Blur', () => {\n-  //       // it('should save', () => {\n-  //       //   page.mockUpdate(257334).as('renameRequest');\n-\n-  //       //   todos.title(0).trigger('dblclick');\n-  //       //   todos.titleField(0).clear()\n-  //       //   todos.titleField(0).type('New title');\n-  //       //   todos.titleField(0).blur();\n-  //       //   cy.wait('@renameRequest');\n-\n-  //       //   // just in case\n-  //       //   page.flushJSTimers();\n-\n-  //       //   todos.assertTitle(0, 'New title');\n-  //       // });\n-\n-  //       // it('should cancel if title was not changed', () => {\n-  //       //   const spy = cy.stub()\n-  //       //     .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-  //       //     .as('renameCallback');\n-\n-  //       //   page.mockUpdate(257334, spy);\n-\n-  //       //   todos.title(0).trigger('dblclick');\n-  //       //   todos.titleField(0).blur();\n-\n-  //       //   cy.get('@renameCallback').should('not.be.called');\n-  //       //   page.flushJSTimers();\n-  //       //   todos.titleField(0).should('not.exist');\n-  //       //   todos.assertTitle(0, 'HTML');\n-  //       // });\n-\n-        it('should delete if title is empty', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear();\n-          todos.titleField(0).blur();\n-          cy.wait('@deleteRequest');\n-\n-          todos.assertCount(4);\n-          todos.assertTitle(0, 'CSS');\n-        })\n-      });\n-    });\n-  });\n-});\n"
                },
                {
                    "date": 1715618896893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -967,42 +967,42 @@\n       page.visit();\n       cy.wait('@loadRequest');\n     });\n \n-  //   describe('before receving response', () => {\n-  //     beforeEach(() => {\n-  //       page.mockUpdate(257334).as('updateRequest');\n-  //     });\n+    describe('before receving response', () => {\n+      beforeEach(() => {\n+        page.mockUpdate(257334).as('updateRequest');\n+      });\n \n-  //     it('should send an update request', () => {\n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest');\n-  //     });\n+      it('should send an update request', () => {\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n \n-  //     it('should show loader after click', () => {\n-  //       page.pauseTimers();\n-  //       todos.statusToggler(0).click();\n+      it('should show loader after click', () => {\n+        page.pauseTimers();\n+        todos.statusToggler(0).click();\n \n-  //       todos.assertLoading(0);\n-  //     });\n+        todos.assertLoading(0);\n+      });\n \n-  //     it('should not show error message after click', () => {\n-  //       page.pauseTimers();\n-  //       todos.statusToggler(0).click();\n+      it('should not show error message after click', () => {\n+        page.pauseTimers();\n+        todos.statusToggler(0).click();\n \n-  //       errorMessage.assertHidden();\n-  //     });\n+        errorMessage.assertHidden();\n+      });\n \n-  //     it('should not hide a todo if filtered', () => {\n-  //       filter.link('completed').click();\n-  //       page.pauseTimers();\n-  //       cy.tick(1000); // flush JS animation\n-  //       todos.statusToggler(0).click();\n+      it('should not hide a todo if filtered', () => {\n+        filter.link('completed').click();\n+        page.pauseTimers();\n+        cy.tick(1000); // flush JS animation\n+        todos.statusToggler(0).click();\n \n-  //       todos.assertCount(3);\n-  //       todos.assertTitle(0, 'HTML');\n-  //     });\n-  //   });\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+    });\n \n   //   describe('on success', () => {\n   //     beforeEach(() => {\n   //       page.mockUpdate(257334).as('updateRequest');\n"
                },
                {
                    "date": 1715618902139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1002,75 +1002,75 @@\n         todos.assertTitle(0, 'HTML');\n       });\n     });\n \n-  //   describe('on success', () => {\n-  //     beforeEach(() => {\n-  //       page.mockUpdate(257334).as('updateRequest');\n+    describe('on success', () => {\n+      beforeEach(() => {\n+        page.mockUpdate(257334).as('updateRequest');\n \n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest');\n-  //     });\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n \n-  //     it('should toggle a todo', () => {\n-  //       todos.assertNotCompleted(0);\n-  //       todos.statusToggler(0).should('not.be.checked');\n-  //     });\n+      it('should toggle a todo', () => {\n+        todos.assertNotCompleted(0);\n+        todos.statusToggler(0).should('not.be.checked');\n+      });\n \n-  //     it('should cancel loading', () => {\n-  //       page.flushJSTimers();\n-  //       todos.assertNotLoading(0);\n-  //     });\n+      it('should cancel loading', () => {\n+        page.flushJSTimers();\n+        todos.assertNotLoading(0);\n+      });\n \n-  //     it('should update the counter', () => {\n-  //       page.todosCounter().should('have.text', '3 items left');\n-  //     });\n+      it('should update the counter', () => {\n+        page.todosCounter().should('have.text', '3 items left');\n+      });\n \n-  //     it('should not show an error message', () => {\n-  //       errorMessage.assertHidden();\n-  //     });\n-  //   });\n+      it('should not show an error message', () => {\n+        errorMessage.assertHidden();\n+      });\n+    });\n \n-  //   describe('on fail', () => {\n-  //     beforeEach(() => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+    describe('on fail', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n \n-  //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('updateRequest');\n+        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+          .as('updateRequest');\n \n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest');\n-  //     });\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n \n-  //     it('should show an error', () => {\n-  //       errorMessage.assertVisible();\n-  //       errorMessage.assertText('Unable to update a todo');\n-  //     });\n+      it('should show an error', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to update a todo');\n+      });\n \n-  //     it('should not toggle a todo', () => {\n-  //       todos.assertCompleted(0);\n-  //       todos.statusToggler(0).should('be.checked');\n-  //     });\n+      it('should not toggle a todo', () => {\n+        todos.assertCompleted(0);\n+        todos.statusToggler(0).should('be.checked');\n+      });\n \n-  //     it('should cancel loading', () => {\n-  //       page.flushJSTimers();\n-  //       todos.assertNotLoading(0);\n-  //     });\n+      it('should cancel loading', () => {\n+        page.flushJSTimers();\n+        todos.assertNotLoading(0);\n+      });\n \n-  //     it('should not update the counter', () => {\n-  //       page.todosCounter().should('have.text', '2 items left');\n-  //     });\n+      it('should not update the counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n \n-  //     it('should allow to toggle again', () => {\n-  //       page.mockUpdate(257334).as('updateRequest2');\n+      it('should allow to toggle again', () => {\n+        page.mockUpdate(257334).as('updateRequest2');\n \n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest2');\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest2');\n \n-  //       todos.assertNotCompleted(0);\n-  //     });\n-  //   });\n+        todos.assertNotCompleted(0);\n+      });\n+    });\n \n   //   describe('if filtered', () => {\n   //     beforeEach(() => {\n   //       filter.link('completed').click();\n"
                },
                {
                    "date": 1715618910986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1070,98 +1070,98 @@\n         todos.assertNotCompleted(0);\n       });\n     });\n \n-  //   describe('if filtered', () => {\n-  //     beforeEach(() => {\n-  //       filter.link('completed').click();\n-  //     });\n+    describe('if filtered', () => {\n+      beforeEach(() => {\n+        filter.link('completed').click();\n+      });\n \n-  //     it('should hide a todo on success', () => {\n-  //       page.mockUpdate(257334).as('updateRequest');\n+      it('should hide a todo on success', () => {\n+        page.mockUpdate(257334).as('updateRequest');\n \n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest');\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n \n-  //       todos.assertCount(2);\n-  //       todos.assertTitle(0, 'CSS');\n-  //     });\n+        todos.assertCount(2);\n+        todos.assertTitle(0, 'CSS');\n+      });\n \n-  //     it('should show a todo on success when selected an oposite filter', () => {\n-  //       page.mockUpdate(257334).as('updateRequest');\n+      it('should show a todo on success when selected an oposite filter', () => {\n+        page.mockUpdate(257334).as('updateRequest');\n \n-  //       todos.statusToggler(0).click();\n-  //       filter.link('active').click();\n-  //       cy.wait('@updateRequest');\n+        todos.statusToggler(0).click();\n+        filter.link('active').click();\n+        cy.wait('@updateRequest');\n \n-  //       todos.assertCount(3);\n-  //       todos.assertTitle(0, 'HTML');\n-  //     });\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n \n-  //     it('should not hide a todo on fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n+      it('should not hide a todo on fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n \n-  //       page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-  //         .as('updateRequest');\n+        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+          .as('updateRequest');\n \n-  //       todos.statusToggler(0).click();\n-  //       cy.wait('@updateRequest');\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n \n-  //       todos.assertCount(3);\n-  //       todos.assertTitle(0, 'HTML');\n-  //     });\n-  //   });\n-  // });\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+    });\n+  });\n \n \n \n \n \n \n \n-  // describe('Toggle All Button', () => {\n-  //   describe('if there are no todos', () => {\n-  //     it('should not be visible while loading todos', () => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n+  describe('Toggle All Button', () => {\n+    describe('if there are no todos', () => {\n+      it('should not be visible while loading todos', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n \n-  //       page.pauseTimers();\n-  //       page.visit();\n+        page.pauseTimers();\n+        page.visit();\n \n-  //       page.toggleAllButton().should('not.exist');\n-  //     });\n+        page.toggleAllButton().should('not.exist');\n+      });\n \n-  //     it('should not be visible when loaded', () => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n+      it('should not be visible when loaded', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n \n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n \n-  //       page.toggleAllButton().should('not.exist');\n-  //     });\n+        page.toggleAllButton().should('not.exist');\n+      });\n \n-  //     it('should appear after adding a todo', () => {\n-  //       page.mockLoad({ body: [] }).as('loadRequest');\n-  //       page.mockCreate().as('createRequest');\n+      it('should appear after adding a todo', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+        page.mockCreate().as('createRequest');\n \n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n \n-  //       page.newTodoField().type('First todo{enter}');\n-  //       cy.wait('@createRequest');\n+        page.newTodoField().type('First todo{enter}');\n+        cy.wait('@createRequest');\n \n-  //       page.toggleAllButton().should('exist');\n-  //     });\n+        page.toggleAllButton().should('exist');\n+      });\n \n-  //     it('should disappear after removing the last todo', () => {\n-  //       const todo = {\n-  //         \"id\": 257334,\n-  //         \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-  //         \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-  //         \"userId\": 1,\n-  //         \"title\": \"HTML\",\n-  //         \"completed\": false\n-  //       };\n+      it('should disappear after removing the last todo', () => {\n+        const todo = {\n+          \"id\": 257334,\n+          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+          \"userId\": 1,\n+          \"title\": \"HTML\",\n+          \"completed\": false\n+        };\n \n   //       page.mockLoad({ body: [todo] }).as('loadRequest');\n   //       page.mockDelete(257334).as('deleteRequest');\n \n"
                },
                {
                    "date": 1715618916394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1769 @@\n+/// <reference types='cypress' />\n+/// <reference types='../support' />\n+\n+import mixedTodos from '../fixtures/todos.json';\n+\n+//#region Page Objects\n+const page = {\n+  toggleAllButton: () => cy.byDataCy('ToggleAllButton'),\n+  newTodoField: () => cy.byDataCy('NewTodoField'),\n+  todosCounter: () => cy.byDataCy('TodosCounter'),\n+  clearCompletedButton: () => cy.byDataCy('ClearCompletedButton'),\n+\n+  visit: (url = '/') => {\n+    cy.visit(url, {\n+      onBeforeLoad: win => win.localStorage.setItem('user', '{ \"id\": 1 }'),\n+    });\n+\n+    // to wait until React App is loaded\n+    cy.get('.todoapp__title').should('exist');\n+  },\n+  pauseTimers: () => cy.clock(),\n+\n+  flushJSTimers: (delay = 1000) => {\n+    cy.clock().then(clock => {\n+      clock.tick(delay);\n+      clock.restore();\n+    });\n+\n+    cy.wait(50);\n+  },\n+\n+  /**\n+   * @param {*} response - can be a valid response object or stub\n+   *\n+   * { body: [] }\n+   * { statusCode: 503: body: 'Service Unavailable' }\n+   * spy = cy.stub().callsFake(req => req.reply(response)).as('alias')\n+   */\n+  mockLoad: (response = { fixture: 'todos' }) => {\n+    return cy.intercept('**/todos?userId=*', response);\n+  },\n+  mockCreate: (response) => {\n+    const options = { method: 'POST', url: '**/todos' };\n+\n+    const spy = cy.stub()\n+      .callsFake(req => req.reply({\n+        statusCode: 201,\n+        body: { ...req.body, id: Math.random() },\n+      }))\n+      .as('createCallback');\n+\n+    return cy.intercept(options, response || spy);\n+  },\n+  mockDelete: (id, response) => {\n+    const options = { method: 'DELETE', url: `**/todos/${id}` };\n+\n+    return cy.intercept(options, response || { body: '1' });\n+  },\n+  mockUpdate: (id, response) => {\n+    const todo = mixedTodos.find(todo => todo.id === id) || {};\n+    const options = { method: 'PATCH', url: `**/todos/${id}` };\n+\n+    const spy = cy.stub()\n+      .callsFake(req => req.reply({ body: { ...todo, ...req.body, id } }))\n+      .as('updateCallback');\n+\n+    return cy.intercept(options, response || spy);\n+  },\n+};\n+\n+const todos = {\n+  el: index => cy.byDataCy('Todo').eq(index),\n+  deleteButton: index => todos.el(index).byDataCy('TodoDelete'),\n+  statusToggler: index => todos.el(index).byDataCy('TodoStatus'),\n+  title: index => todos.el(index).byDataCy('TodoTitle'),\n+  titleField: index => todos.el(index).byDataCy('TodoTitleField'),\n+\n+  assertCount: length => cy.byDataCy('Todo').should('have.length', length),\n+  assertTitle: (index, title) => todos.title(index).should('have.text', title),\n+  assertLoading: index => todos.el(index).byDataCy('TodoLoader').should('have.class', 'is-active'),\n+  assertNotLoading: index => todos.el(index).byDataCy('TodoLoader').should('not.have.class', 'is-active'),\n+  assertCompleted: index => todos.el(index).should('have.class', 'completed'),\n+  assertNotCompleted: index => todos.el(index).should('not.have.class', 'completed'),\n+};\n+\n+const errorMessage = {\n+  el: () => cy.byDataCy('ErrorNotification'),\n+  closeButton: () => errorMessage.el().byDataCy('HideErrorButton'),\n+  assertVisible: () => errorMessage.el().should('not.have.class', 'hidden'),\n+  assertHidden: () => errorMessage.el().should('have.class', 'hidden'),\n+  assertText: text => errorMessage.el().should('have.text', text),\n+};\n+\n+const FilterLinkKeys = {\n+  all: 'FilterLinkAll',\n+  active: 'FilterLinkActive',\n+  completed: 'FilterLinkCompleted',\n+};\n+\n+const filter = {\n+  el: () => cy.byDataCy('Filter'),\n+  link: type => cy.byDataCy(FilterLinkKeys[type]),\n+  assertVisible: () => filter.el().should('exist'),\n+  assertHidden: () => filter.el().should('not.exist'),\n+  assertSelected: type => filter.link(type).should('have.class', 'selected'),\n+  assertNotSelected: type => filter.link(type).should('not.have.class', 'selected'),\n+};\n+//#endregion\n+\n+let failed = false;\n+\n+Cypress.on('fail', (e) => {\n+  failed = true;\n+  throw e;\n+});\n+\n+describe('', () => {\n+  beforeEach(() => {\n+    if (failed) Cypress.runner.stop();\n+  });\n+\n+  describe('Page with no todos', () => {\n+    it('should send 1 todos request', () => {\n+      const spy = cy.stub()\n+        .callsFake(req => req.reply({ body: [] }))\n+        .as('loadCallback')\n+\n+      page.mockLoad(spy).as('loadRequest');\n+      page.visit();\n+\n+      cy.wait('@loadRequest');\n+      cy.wait(500);\n+\n+      cy.get('@loadCallback').should('have.callCount', 1);\n+    });\n+\n+    describe('', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have NewTodoField', () => {\n+        page.newTodoField().should('exist');\n+      });\n+\n+      it('should not have Todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+      it('should not have Footer', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+\n+      it('should not show error message', () => {\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('on loading error', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should show error', () => {\n+        errorMessage.assertVisible();\n+      });\n+\n+      it('should show correct message', () => {\n+        errorMessage.assertText('Unable to load todos');\n+      });\n+\n+      it('should hide error after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n+\n+        cy.clock();\n+        cy.tick(2500);\n+        errorMessage.assertVisible();\n+\n+        cy.tick(500);\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should hide error on close button click', () => {\n+        errorMessage.closeButton().click();\n+        errorMessage.assertHidden();\n+      });\n+    });\n+  });\n+\n+  describe('Page with mixed todos', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should have NewTodoField', () => {\n+      page.newTodoField().should('exist');\n+    });\n+\n+    it('should have all loaded todos', () => {\n+      todos.assertCount(5);\n+    });\n+\n+    it('should have delete buttons for every todo', () => {\n+      todos.deleteButton(0).should('exist');\n+    });\n+\n+    it('should not have loaders', () => {\n+      todos.assertNotLoading(0);\n+      todos.assertNotLoading(1);\n+      todos.assertNotLoading(2);\n+      todos.assertNotLoading(3);\n+      todos.assertNotLoading(4);\n+    })\n+\n+    it('should have correct todo titles', () => {\n+      todos.assertTitle(0, 'HTML');\n+      todos.assertTitle(1, 'CSS');\n+      todos.assertTitle(2, 'JS');\n+      todos.assertTitle(3, 'TypeScript');\n+      todos.assertTitle(4, 'React');\n+    });\n+\n+    it('should higlight all completed todos', () => {\n+      todos.assertCompleted(0);\n+      todos.assertCompleted(1);\n+      todos.assertCompleted(2);\n+    });\n+\n+    it('should not higlight not completed todos', () => {\n+      todos.assertNotCompleted(3);\n+      todos.assertNotCompleted(4);\n+    });\n+\n+    it('should have correct completed statuses', () => {\n+      todos.statusToggler(0).should('be.checked');\n+      todos.statusToggler(1).should('be.checked');\n+      todos.statusToggler(2).should('be.checked');\n+      todos.statusToggler(3).should('not.be.checked');\n+      todos.statusToggler(4).should('not.be.checked');\n+    });\n+\n+    it('should have Filter', () => {\n+      filter.assertVisible();\n+    });\n+\n+    it('should have todosCounter with a number of not completed todos', () => {\n+      page.todosCounter().should('have.text', '2 items left');\n+    });\n+\n+    it('should have clearCompletedButton', () => {\n+      page.clearCompletedButton().should('exist');\n+    });\n+\n+    it('should have Filter', () => {\n+      filter.assertVisible();\n+    });\n+\n+    it('should not show error message', () => {\n+      errorMessage.assertHidden();\n+    });\n+  });\n+\n+  describe('Filtering', () => {\n+    describe('with mixed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have only filterLinkAll active', () => {\n+        filter.assertSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n+\n+      it('should allow to select the active filter', () => {\n+        filter.link('active').click();\n+\n+        filter.assertNotSelected('all');\n+        filter.assertSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n+\n+      it('should show only active todos when active filter is selected', () => {\n+        filter.link('active').click();\n+\n+        todos.assertCount(2);\n+        todos.assertTitle(0, 'TypeScript');\n+        todos.assertTitle(1, 'React');\n+      });\n+\n+      it('should keep footer when active todos are shown', () => {\n+        filter.link('active').click();\n+\n+        page.todosCounter().should('have.text', '2 items left');\n+        filter.assertVisible();\n+        page.clearCompletedButton().should('exist');\n+      });\n+\n+      it('should allow to select the completed filter', () => {\n+        filter.link('completed').click();\n+\n+        filter.assertNotSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertSelected('completed');\n+      });\n+\n+      it('should show only completed todos when completed filter is selected', () => {\n+        filter.link('completed').click();\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+        todos.assertTitle(1, 'CSS');\n+        todos.assertTitle(2, 'JS');\n+      });\n+\n+      it('should keep footer when completed todos are shown', () => {\n+        filter.link('completed').click();\n+\n+        page.todosCounter().should('have.text', '2 items left');\n+        filter.assertVisible();\n+        page.clearCompletedButton().should('exist');\n+      });\n+\n+      it('should allow to reset filter', () => {\n+        filter.link('completed').click();\n+        filter.link('all').click();\n+\n+        todos.assertCount(5);\n+        filter.assertSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n+    });\n+\n+    describe('with active todos only', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should hide todos on completed selection', () => {\n+        filter.link('completed').click();\n+\n+        todos.assertCount(0);\n+      });\n+\n+      it('should keep footer on completed selection', () => {\n+        filter.link('completed').click();\n+        filter.assertVisible();\n+      });\n+\n+      it('should keep todos counter on completed selection', () => {\n+        filter.link('completed').click();\n+        page.todosCounter().should('have.text', '5 items left');\n+      });\n+    });\n+\n+    describe('with completed todos only', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+    });\n+  });\n+\n+  describe('Adding a todo', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should focus text field by default', () => {\n+      page.newTodoField().should('be.focused');\n+    });\n+\n+    describe('if title is empty', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.newTodoField().type('{enter}');\n+      });\n+\n+      it('should not send a request', () => {\n+        cy.get('@createCallback').should('not.be.called');\n+      });\n+\n+      it('should keep text field focused', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should display an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Title should not be empty');\n+      });\n+\n+      it('should hide an error message after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n+\n+        cy.clock();\n+        cy.tick(3000);\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('if title title has only whitespaces', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.newTodoField().type('     {enter}');\n+      });\n+\n+      it('should not send a request', () => {\n+        cy.get('@createCallback').should('not.be.called');\n+      });\n+\n+      it('should keep text field focused', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should display an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Title should not be empty');\n+      });\n+\n+      it('should hide an error message after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n+\n+        cy.clock();\n+        cy.tick(3000);\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('after form submition before response is received', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.pauseTimers();\n+        page.newTodoField().type('Test Todo{enter}');\n+      });\n+\n+      it('should send a create request', () => {\n+        cy.tick(1000);\n+        cy.get('@createCallback').should('have.callCount', 1);\n+      });\n+\n+      it('should disable the input', () => {\n+        page.newTodoField().should('be.disabled');\n+      });\n+\n+      it('should keep entered text', () => {\n+        page.newTodoField().should('have.value', 'Test Todo');\n+      });\n+\n+      it('should create and show a temp TodoItem with Loader', () => {\n+        todos.assertCount(6);\n+        todos.assertLoading(5);\n+      });\n+\n+      it('should show a temp TodoItem with correct title', () => {\n+        todos.assertTitle(5, 'Test Todo');\n+      });\n+\n+      it('should show a not completed temp TodoItem', () => {\n+        todos.assertNotCompleted(5);\n+      });\n+\n+      it('should not show loaders for existing todos', () => {\n+        todos.assertNotLoading(0);\n+        todos.assertNotLoading(1);\n+        todos.assertNotLoading(2);\n+        todos.assertNotLoading(3);\n+        todos.assertNotLoading(4);\n+      });\n+\n+      it('should not update active counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+    });\n+\n+    describe('on success response', () => {\n+      describe('', () => {\n+        beforeEach(() => {\n+          page.mockCreate().as('createRequest');\n+          page.newTodoField().type('Test Todo{enter}');\n+\n+          cy.wait('@createRequest');\n+        });\n+\n+        // this test may be flaky\n+        it.skip('should replace loader with a created todo', () => {\n+          page.flushJSTimers();\n+          todos.assertCount(6);\n+          todos.assertNotLoading(5);\n+        });\n+\n+        it('should add a todo with a correct title', () => {\n+          todos.assertTitle(5, 'Test Todo');\n+        });\n+\n+        it('should add a not completed todo', () => {\n+          todos.assertNotCompleted(5);\n+        });\n+\n+        it('should update active counter', () => {\n+          page.todosCounter().should('have.text', '3 items left');\n+        });\n+\n+        it('should enable the text field', () => {\n+          page.newTodoField().should('not.be.disabled');\n+        });\n+\n+        it('should not show error message', () => {\n+          errorMessage.assertHidden();\n+        });\n+\n+        it('should clear text field', () => {\n+          page.newTodoField().should('have.value', '');\n+        });\n+\n+        it('should focus text field', () => {\n+          page.newTodoField().should('be.focused');\n+        });\n+\n+        it('should allow to add one more todo', () => {\n+          page.mockCreate().as('createRequest2');\n+\n+          page.newTodoField().type('Hello world{enter}');\n+          cy.wait('@createRequest2');\n+          page.flushJSTimers();\n+\n+          todos.assertCount(7);\n+          // todos.assertNotLoading(6);\n+          todos.assertNotCompleted(6);\n+          todos.assertTitle(6, 'Hello world');\n+          page.todosCounter().should('have.text', '4 items left');\n+        });\n+      });\n+\n+      it('should add trimmed title', () => {\n+        page.mockCreate().as('createRequest');\n+\n+        page.newTodoField().type('  Other Title    {enter}');\n+        cy.wait('@createRequest');\n+\n+        // just in case\n+        page.flushJSTimers();\n+\n+        todos.assertTitle(5, 'Other Title');\n+      });\n+\n+      it('should keep current filter', () => {\n+        page.mockCreate().as('createRequest');\n+\n+        filter.link('active').click();\n+        page.newTodoField().type('Test Todo{enter}');\n+        cy.wait('@createRequest');\n+\n+        filter.assertSelected('active');\n+      });\n+    });\n+\n+    describe('on request fail', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest');\n+\n+        page.newTodoField().type('Test Todo{enter}');\n+\n+        cy.wait('@createRequest');\n+      });\n+\n+      it('should show an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to add a todo');\n+      });\n+\n+      it('should hide an error message in 3 seconds', () => {\n+        cy.clock();\n+        cy.tick(2500);\n+\n+        errorMessage.assertVisible();\n+\n+        cy.tick(500);\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should remove a temp TodoItem on request fail', () => {\n+        todos.assertCount(5);\n+        todos.assertTitle(4, 'React');\n+      });\n+\n+      it('should enable the text field on request fail', () => {\n+        page.newTodoField().should('not.be.disabled');\n+      });\n+\n+      it('should keep the entered text on request fail', () => {\n+        page.newTodoField().should('have.value', 'Test Todo');\n+      });\n+\n+      it('should focus text field', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should not update active counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+\n+      it('should immediately hide an error message on new request', () => {\n+        page.newTodoField().type(`{enter}`);\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should show an error message again on a next fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest2');\n+\n+        page.newTodoField().type(`{enter}`);\n+        cy.wait('@createRequest2');\n+\n+        errorMessage.assertVisible();\n+      });\n+\n+      it('should keep an error message for 3s after the last fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest2');\n+\n+        cy.clock();\n+\n+        cy.tick(2000);\n+        page.newTodoField().type(`{enter}`);\n+        cy.tick(500);\n+        cy.wait('@createRequest2');\n+        cy.tick(2000);\n+\n+        errorMessage.assertVisible();\n+      });\n+\n+      it('should allow to add a todo', () => {\n+        page.mockCreate().as('createRequest2');\n+        page.newTodoField().type('{enter}');\n+\n+        cy.wait('@createRequest2');\n+        page.flushJSTimers();\n+\n+        todos.assertCount(6);\n+        // todos.assertNotLoading(5);\n+        todos.assertNotCompleted(5);\n+        todos.assertTitle(5, 'Test Todo');\n+\n+        page.todosCounter().should('have.text', '3 items left');\n+      });\n+    });\n+  });\n+\n+  describe('Adding a first todo', () => {\n+    beforeEach(() => {\n+      page.mockLoad({ body: [] }).as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+\n+      page.mockCreate().as('createRequest');\n+      page.newTodoField().type('First todo{enter}');\n+\n+      cy.wait('@createRequest');\n+    });\n+\n+    it('should show a new todos', () => {\n+      todos.assertCount(1);\n+      todos.assertTitle(0, 'First todo');\n+      todos.assertNotCompleted(0);\n+    });\n+\n+    it('should show Filter', () => {\n+      filter.assertVisible();\n+    });\n+\n+    it('should show todosCounter', () => {\n+      page.todosCounter().should('contain.text', '1 item');\n+    });\n+  });\n+\n+  describe('Individual Todo Deletion', () => {\n+    describe('Default behavior', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n+        page.mockDelete(257334);\n+        page.pauseTimers();\n+        todos.deleteButton(0).click();\n+\n+        todos.assertLoading(0);\n+      });\n+\n+      it('should not delete a todo before successful response', () => {\n+        page.mockDelete(257334);\n+        page.pauseTimers();\n+        todos.deleteButton(0).click();\n+\n+        todos.assertCount(5);\n+      });\n+\n+      it('should remove the todo from the list on a successful API response', () => {\n+        page.mockDelete(257334).as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        todos.assertCount(4);\n+        todos.assertTitle(0, 'CSS');\n+      });\n+\n+      it('should focus text field after todo deletion', () => {\n+        page.mockDelete(257334).as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should not remove the todo from the list on an API error', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        todos.assertCount(5);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+\n+      it('should show an error message on an API error', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to delete a todo');\n+      });\n+\n+      it('should adjust the active todo count correctly after successful deletion', () => {\n+        page.mockDelete(257338).as('deleteRequest');\n+        todos.deleteButton(4).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.todosCounter().should('contain.text', '1 item');\n+      });\n+\n+      it('should not adjust the active todo count after failed deletion', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n+          .as('deleteRequest');\n+\n+        todos.deleteButton(4).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+    });\n+\n+    describe('Last todo deletion', () => {\n+      beforeEach(() => {\n+        const todo = {\n+          \"id\": 257334,\n+          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+          \"userId\": 1,\n+          \"title\": \"HTML\",\n+          \"completed\": false\n+        };\n+\n+        page.mockLoad({ body: [todo] }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.mockDelete(257334);\n+        todos.deleteButton(0).click();\n+      });\n+\n+      it('should hide todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+      it('should hide footer', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+\n+      it('should focus text field after todo deletion', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+    });\n+  });\n+\n+  describe('Group Todo Deletion', () => {\n+    describe('with no completed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should not have active ClearCompleted button', () => {\n+        page.clearCompletedButton().should('be.disabled');\n+      });\n+    });\n+\n+    describe('with some completed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have ClearCompleted button enabled', () => {\n+        page.clearCompletedButton().should('not.be.disabled');\n+      });\n+\n+      it('should send individual deletion request for each completed todo', () => {\n+        page.mockDelete(257334).as('deleteRequest1');\n+        page.mockDelete(257335).as('deleteRequest2');\n+        page.mockDelete(257336).as('deleteRequest3');\n+\n+        page.clearCompletedButton().click();\n+\n+        cy.wait('@deleteRequest1');\n+        cy.wait('@deleteRequest2');\n+        cy.wait('@deleteRequest3');\n+      });\n+\n+      describe('on success', () => {\n+        beforeEach(() => {\n+          page.mockDelete(257334).as('deleteRequest1');\n+          page.mockDelete(257335).as('deleteRequest2');\n+          page.mockDelete(257336).as('deleteRequest3');\n+\n+          page.clearCompletedButton().click();\n+\n+          cy.wait('@deleteRequest1');\n+          cy.wait('@deleteRequest2');\n+          cy.wait('@deleteRequest3');\n+        });\n+\n+        it('should remove all completed todos from the list', () => {\n+          todos.assertCount(2);\n+          todos.assertTitle(0, 'TypeScript');\n+          todos.assertTitle(1, 'React');\n+        });\n+\n+        it('should disable ClearCompleted button', () => {\n+          page.clearCompletedButton().should('be.disabled');\n+        });\n+\n+        it('should focus the text field', () => {\n+          page.newTodoField().should('be.focused');\n+        });\n+      });\n+\n+      describe('on a single fail', () => {\n+        beforeEach(() => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334).as('deleteRequest1');\n+          page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n+          page.mockDelete(257336).as('deleteRequest3');\n+\n+          page.clearCompletedButton().click();\n+\n+          cy.wait('@deleteRequest1');\n+          cy.wait('@deleteRequest2');\n+          cy.wait('@deleteRequest3');\n+        });\n+\n+        it('should show an error message if any of the group deletions fails', () => {\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to delete a todo');\n+        });\n+\n+        it('should remove todos with success responses and keep todos with errors', () => {\n+          todos.assertCount(3);\n+          todos.assertTitle(0, 'CSS');\n+          todos.assertTitle(1, 'TypeScript');\n+        });\n+\n+        it('should not disable ClearCompleted button', () => {\n+          page.clearCompletedButton().should('not.be.disabled');\n+        });\n+      });\n+    });\n+\n+    describe('with all todos completed', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.mockDelete(257334).as('deleteRequest1');\n+        page.mockDelete(257335).as('deleteRequest2');\n+        page.mockDelete(257336).as('deleteRequest3');\n+        page.mockDelete(257337).as('deleteRequest4');\n+        page.mockDelete(257338).as('deleteRequest5');\n+\n+        page.clearCompletedButton().click();\n+\n+        cy.wait('@deleteRequest1');\n+        cy.wait('@deleteRequest2');\n+        cy.wait('@deleteRequest3');\n+        cy.wait('@deleteRequest4');\n+        cy.wait('@deleteRequest5');\n+      });\n+\n+      it('should hide todos after clearing all completed todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+      it('should hide footer after clearing all completed todos', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+    });\n+  });\n+\n+  describe('Todo Toggling', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    describe('before receving response', () => {\n+      beforeEach(() => {\n+        page.mockUpdate(257334).as('updateRequest');\n+      });\n+\n+      it('should send an update request', () => {\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n+\n+      it('should show loader after click', () => {\n+        page.pauseTimers();\n+        todos.statusToggler(0).click();\n+\n+        todos.assertLoading(0);\n+      });\n+\n+      it('should not show error message after click', () => {\n+        page.pauseTimers();\n+        todos.statusToggler(0).click();\n+\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should not hide a todo if filtered', () => {\n+        filter.link('completed').click();\n+        page.pauseTimers();\n+        cy.tick(1000); // flush JS animation\n+        todos.statusToggler(0).click();\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+    });\n+\n+    describe('on success', () => {\n+      beforeEach(() => {\n+        page.mockUpdate(257334).as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n+\n+      it('should toggle a todo', () => {\n+        todos.assertNotCompleted(0);\n+        todos.statusToggler(0).should('not.be.checked');\n+      });\n+\n+      it('should cancel loading', () => {\n+        page.flushJSTimers();\n+        todos.assertNotLoading(0);\n+      });\n+\n+      it('should update the counter', () => {\n+        page.todosCounter().should('have.text', '3 items left');\n+      });\n+\n+      it('should not show an error message', () => {\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('on fail', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+          .as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n+\n+      it('should show an error', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to update a todo');\n+      });\n+\n+      it('should not toggle a todo', () => {\n+        todos.assertCompleted(0);\n+        todos.statusToggler(0).should('be.checked');\n+      });\n+\n+      it('should cancel loading', () => {\n+        page.flushJSTimers();\n+        todos.assertNotLoading(0);\n+      });\n+\n+      it('should not update the counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+\n+      it('should allow to toggle again', () => {\n+        page.mockUpdate(257334).as('updateRequest2');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest2');\n+\n+        todos.assertNotCompleted(0);\n+      });\n+    });\n+\n+    describe('if filtered', () => {\n+      beforeEach(() => {\n+        filter.link('completed').click();\n+      });\n+\n+      it('should hide a todo on success', () => {\n+        page.mockUpdate(257334).as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+\n+        todos.assertCount(2);\n+        todos.assertTitle(0, 'CSS');\n+      });\n+\n+      it('should show a todo on success when selected an oposite filter', () => {\n+        page.mockUpdate(257334).as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        filter.link('active').click();\n+        cy.wait('@updateRequest');\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+\n+      it('should not hide a todo on fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+          .as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+    });\n+  });\n+\n+\n+\n+\n+\n+\n+\n+  describe('Toggle All Button', () => {\n+    describe('if there are no todos', () => {\n+      it('should not be visible while loading todos', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+\n+        page.pauseTimers();\n+        page.visit();\n+\n+        page.toggleAllButton().should('not.exist');\n+      });\n+\n+      it('should not be visible when loaded', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.toggleAllButton().should('not.exist');\n+      });\n+\n+      it('should appear after adding a todo', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+        page.mockCreate().as('createRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.newTodoField().type('First todo{enter}');\n+        cy.wait('@createRequest');\n+\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should disappear after removing the last todo', () => {\n+        const todo = {\n+          \"id\": 257334,\n+          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n+          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n+          \"userId\": 1,\n+          \"title\": \"HTML\",\n+          \"completed\": false\n+        };\n+\n+        page.mockLoad({ body: [todo] }).as('loadRequest');\n+        page.mockDelete(257334).as('deleteRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.toggleAllButton().should('not.exist');\n+      });\n+    });\n+\n+    describe('if all todos are completed', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should be visible', () => {\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should stay visible after filtering out all the todos', () => {\n+        filter.link('active').click();\n+\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should be active', () => {\n+        page.toggleAllButton().should('have.class', 'active');\n+      });\n+\n+      it('should become not active after toggling a todo', () => {\n+        page.mockUpdate(257335).as('updateRequest');\n+        todos.statusToggler(1).click();\n+        cy.wait('@updateRequest');\n+\n+        page.toggleAllButton().should('not.have.class', 'active');\n+      });\n+\n+      it('should stay active after a todo toggling fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n+        todos.statusToggler(1).click();\n+        cy.wait('@updateRequest');\n+\n+        page.toggleAllButton().should('have.class', 'active');\n+      });\n+\n+      describe('on click', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334).as('updateRequest4');\n+          page.mockUpdate(257335).as('updateRequest5');\n+          page.mockUpdate(257336).as('updateRequest6');\n+          page.mockUpdate(257337).as('updateRequest7');\n+          page.mockUpdate(257338).as('updateRequest8');\n+\n+          page.toggleAllButton().click();\n+\n+          cy.wait('@updateRequest4');\n+          cy.wait('@updateRequest5');\n+          cy.wait('@updateRequest6');\n+          cy.wait('@updateRequest7');\n+          cy.wait('@updateRequest8');\n+        });\n+\n+  //       it('should send requests for all todos', () => {\n+  //         // if before each pass\n+  //       });\n+\n+  //       it('should make all todos active', () => {\n+  //         todos.assertNotCompleted(0);\n+  //         todos.assertNotCompleted(1);\n+  //         todos.assertNotCompleted(2);\n+  //         todos.assertNotCompleted(3);\n+  //         todos.assertNotCompleted(4);\n+  //       });\n+\n+  //       it('should become not active', () => {\n+  //         page.toggleAllButton().should('not.have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n+\n+  //   describe('if all todos are active', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should not be active', () => {\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     it('should not become active after toggling a todo', () => {\n+  //       page.mockUpdate(257335).as('updateRequest');\n+  //       todos.statusToggler(1).click();\n+  //       cy.wait('@updateRequest');\n+\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334).as('updateRequest4');\n+  //         page.mockUpdate(257335).as('updateRequest5');\n+  //         page.mockUpdate(257336).as('updateRequest6');\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n+\n+  //         page.toggleAllButton().click();\n+\n+  //         cy.wait('@updateRequest4');\n+  //         cy.wait('@updateRequest5');\n+  //         cy.wait('@updateRequest6');\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n+\n+  //       it('should send requests for all todos', () => {\n+  //         // if before each pass\n+  //       });\n+\n+  //       it('should make all todos completed', () => {\n+  //         todos.assertCompleted(0);\n+  //         todos.assertCompleted(1);\n+  //         todos.assertCompleted(2);\n+  //         todos.assertCompleted(3);\n+  //         todos.assertCompleted(4);\n+  //       });\n+\n+  //       it('should become active', () => {\n+  //         page.toggleAllButton().should('have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n+\n+  //   describe('if there are some mixed todos', () => {\n+  //     beforeEach(() => {\n+  //       page.mockLoad().as('loadRequest');\n+\n+  //       page.visit();\n+  //       cy.wait('@loadRequest');\n+  //     });\n+\n+  //     it('should be visible', () => {\n+  //       page.toggleAllButton().should('exist');\n+  //     });\n+\n+  //     it('should not be active', () => {\n+  //       page.toggleAllButton().should('not.have.class', 'active');\n+  //     });\n+\n+  //     it('should become active after completing all todos', () => {\n+  //       page.mockUpdate(257337).as('updateRequest1');\n+  //       page.mockUpdate(257338).as('updateRequest2');\n+\n+  //       todos.statusToggler(3).click();\n+  //       cy.wait('@updateRequest1');\n+  //       todos.statusToggler(4).click();\n+  //       cy.wait('@updateRequest2');\n+\n+  //       page.toggleAllButton().should('have.class', 'active');\n+  //     });\n+\n+  //     describe('on click', () => {\n+  //       beforeEach(() => {\n+  //         page.mockUpdate(257334, cy.stub().as('update4'));\n+  //         page.mockUpdate(257335, cy.stub().as('update5'));\n+  //         page.mockUpdate(257336, cy.stub().as('update6'));\n+  //         page.mockUpdate(257337).as('updateRequest7');\n+  //         page.mockUpdate(257338).as('updateRequest8');\n+\n+  //         page.toggleAllButton().click();\n+\n+  //         cy.wait('@updateRequest7');\n+  //         cy.wait('@updateRequest8');\n+  //       });\n+\n+  //       it('should send requests only for not completed todos', () => {\n+  //         cy.get('@update4').should('not.be.called');\n+  //         cy.get('@update5').should('not.be.called');\n+  //         cy.get('@update6').should('not.be.called');\n+  //       });\n+\n+  //       it('should make all todos completed', () => {\n+  //         todos.assertCompleted(0);\n+  //         todos.assertCompleted(1);\n+  //         todos.assertCompleted(2);\n+  //         todos.assertCompleted(3);\n+  //         todos.assertCompleted(4);\n+  //       });\n+\n+  //       it('should become active', () => {\n+  //         page.toggleAllButton().should('have.class', 'active');\n+  //       });\n+  //     });\n+  //   });\n+  // });\n+\n+  describe('Renaming', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should not show forms by default', () => {\n+      todos.titleField(0).should('not.exist');\n+      todos.titleField(1).should('not.exist');\n+      todos.titleField(2).should('not.exist');\n+      todos.titleField(3).should('not.exist');\n+      todos.titleField(4).should('not.exist');\n+    });\n+\n+    describe('Edit Form', () => {\n+      // describe('by default', () => {\n+      //   it('should be opened on dblclick', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(0).should('exist');\n+      //   });\n+\n+      //   it('should have current value', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(0).should('have.value', 'HTML');\n+      //   });\n+\n+      //   it('should be focused', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(0).should('be.focused');\n+      //   });\n+\n+      //   it('should hide a title', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.title(0).should('not.exist');\n+      //   });\n+\n+      //   it('should hide DeleteButton', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.deleteButton(0).should('not.exist');\n+      //   });\n+\n+      //   it('should keep StatusToggler', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.statusToggler(0).should('exist');\n+      //   });\n+\n+      //   it('should not open forms for other todos', () => {\n+      //     todos.title(0).trigger('dblclick');\n+\n+      //     todos.titleField(1).should('not.exist');\n+      //     todos.titleField(2).should('not.exist');\n+      //     todos.titleField(3).should('not.exist');\n+      //     todos.titleField(4).should('not.exist');\n+      //   });\n+\n+      //   it('should not send a request on change', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n+\n+      //     page.mockUpdate(257334, spy);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123');\n+\n+      //     cy.get('@renameCallback').should('not.be.called');\n+      //   });\n+      // });\n+\n+      // describe('on Escape', () => {\n+      //   it('should be closed', () => {\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n+\n+      //     todos.titleField(0).should('not.exist');\n+      //   });\n+\n+      //   it('should keep current title', () => {\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n+\n+      //     todos.assertTitle(0, 'HTML');\n+      //   });\n+\n+      //   it('should not send a request', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n+\n+      //     page.mockUpdate(257334, spy);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123123{esc}');\n+\n+      //     cy.get('@renameCallback').should('not.be.called');\n+      //   });\n+      // });\n+\n+      // describe('on enter before recieved a response', () => {\n+      //   it('should send a request', () => {\n+      //     const spy = cy.stub()\n+      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+      //       .as('renameCallback');\n+\n+      //     page.mockUpdate(257334, spy);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).type('123{enter}');\n+\n+      //     cy.get('@renameCallback').should('have.callCount', 1);\n+      //   });\n+\n+      //   it('should show loader', () => {\n+      //     page.mockUpdate(257334);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     page.pauseTimers();\n+      //     todos.titleField(0).type('123{enter}');\n+\n+      //     todos.assertLoading(0);\n+      //   });\n+\n+      //   // It depend on your implementation\n+      //   it.skip('should stay while waiting', () => {\n+      //     page.mockUpdate(257334);\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     page.pauseTimers();\n+      //     todos.titleField(0).type('123{enter}');\n+\n+      //     todos.titleField(0).should('exist');\n+      //   });\n+      // });\n+\n+      // describe('on success', () => {\n+      //   beforeEach(() => {\n+      //     page.mockUpdate(257334).as('renameRequest');\n+\n+      //     todos.title(0).trigger('dblclick');\n+      //     todos.titleField(0).clear()\n+      //   });\n+\n+      //   it('should cancel loading', () => {\n+      //     todos.titleField(0).type('123{enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n+\n+      //     todos.assertNotLoading(0);\n+      //   });\n+\n+      //   it('should be closed', () => {\n+      //     todos.titleField(0).type('123{enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n+\n+      //     todos.titleField(0).should('not.exist');\n+      //   });\n+\n+      //   it('should show the updated title', () => {\n+      //     todos.titleField(0).type('Something{enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n+\n+      //     todos.assertTitle(0, 'Something');\n+      //   });\n+\n+      //   it('should show trim the new title', () => {\n+      //     todos.titleField(0).type('   Some new title      {enter}');\n+      //     cy.wait('@renameRequest');\n+      //     page.flushJSTimers();\n+\n+      //     todos.assertTitle(0, 'Some new title');\n+      //   });\n+      // });\n+\n+      describe('on fail', () => {\n+        beforeEach(() => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+        });\n+\n+        it('should cancel loading on fail', () => {\n+          page.flushJSTimers();\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should stay open on fail', () => {\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should show error message', () => {\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to update a todo');\n+        });\n+\n+        it('should hide error message in 3s', () => {\n+          page.flushJSTimers(3000);\n+\n+          errorMessage.assertHidden();\n+        });\n+      });\n+\n+      describe('if title was not changed', () => {\n+        it('should not send a request on enter', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+\n+        it('should be close on enter', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should be closed on Escape', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should preserve current title on save', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.assertTitle(0, 'HTML');\n+        });\n+      });\n+\n+      describe('if title became empty', () => {\n+        beforeEach(() => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+        });\n+\n+        it('should not send an update request on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+\n+        it('should send a delete request on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.wait('@deleteRequest');\n+        });\n+\n+        it('should show loading on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+\n+          page.pauseTimers();\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.assertLoading(0);\n+        });\n+\n+        it('should delete a todo on success', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          todos.assertCount(4);\n+          todos.assertTitle(0, 'CSS');\n+        });\n+\n+        it('should show deleting error message on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to delete a todo')\n+        });\n+\n+        // this test may be unstable\n+        it.skip('should hide loader on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should stay open on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should be closed on Escape', () => {\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should preserve current title on close', () => {\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.title(0).should('have.text', 'HTML');\n+        });\n+      });\n+\n+      describe('on Blur', () => {\n+        // it('should save', () => {\n+        //   page.mockUpdate(257334).as('renameRequest');\n+\n+        //   todos.title(0).trigger('dblclick');\n+        //   todos.titleField(0).clear()\n+        //   todos.titleField(0).type('New title');\n+        //   todos.titleField(0).blur();\n+        //   cy.wait('@renameRequest');\n+\n+        //   // just in case\n+        //   page.flushJSTimers();\n+\n+        //   todos.assertTitle(0, 'New title');\n+        // });\n+\n+        // it('should cancel if title was not changed', () => {\n+        //   const spy = cy.stub()\n+        //     .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+        //     .as('renameCallback');\n+\n+        //   page.mockUpdate(257334, spy);\n+\n+        //   todos.title(0).trigger('dblclick');\n+        //   todos.titleField(0).blur();\n+\n+        //   cy.get('@renameCallback').should('not.be.called');\n+        //   page.flushJSTimers();\n+        //   todos.titleField(0).should('not.exist');\n+        //   todos.assertTitle(0, 'HTML');\n+        // });\n+\n+        it('should delete if title is empty', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+          todos.titleField(0).blur();\n+          cy.wait('@deleteRequest');\n+\n+          todos.assertCount(4);\n+          todos.assertTitle(0, 'CSS');\n+        })\n+      });\n+    });\n+  });\n+});\n"
                },
                {
                    "date": 1715618922650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1232,1870 +1232,101 @@\n           cy.wait('@updateRequest7');\n           cy.wait('@updateRequest8');\n         });\n \n-  //       it('should send requests for all todos', () => {\n-  //         // if before each pass\n-  //       });\n-\n-  //       it('should make all todos active', () => {\n-  //         todos.assertNotCompleted(0);\n-  //         todos.assertNotCompleted(1);\n-  //         todos.assertNotCompleted(2);\n-  //         todos.assertNotCompleted(3);\n-  //         todos.assertNotCompleted(4);\n-  //       });\n-\n-  //       it('should become not active', () => {\n-  //         page.toggleAllButton().should('not.have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n-\n-  //   describe('if all todos are active', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n-  //     it('should not be active', () => {\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n-\n-  //     it('should not become active after toggling a todo', () => {\n-  //       page.mockUpdate(257335).as('updateRequest');\n-  //       todos.statusToggler(1).click();\n-  //       cy.wait('@updateRequest');\n-\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n-\n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334).as('updateRequest4');\n-  //         page.mockUpdate(257335).as('updateRequest5');\n-  //         page.mockUpdate(257336).as('updateRequest6');\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n-\n-  //         page.toggleAllButton().click();\n-\n-  //         cy.wait('@updateRequest4');\n-  //         cy.wait('@updateRequest5');\n-  //         cy.wait('@updateRequest6');\n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n-\n-  //       it('should send requests for all todos', () => {\n-  //         // if before each pass\n-  //       });\n-\n-  //       it('should make all todos completed', () => {\n-  //         todos.assertCompleted(0);\n-  //         todos.assertCompleted(1);\n-  //         todos.assertCompleted(2);\n-  //         todos.assertCompleted(3);\n-  //         todos.assertCompleted(4);\n-  //       });\n-\n-  //       it('should become active', () => {\n-  //         page.toggleAllButton().should('have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n-\n-  //   describe('if there are some mixed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n-  //     it('should not be active', () => {\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n-\n-  //     it('should become active after completing all todos', () => {\n-  //       page.mockUpdate(257337).as('updateRequest1');\n-  //       page.mockUpdate(257338).as('updateRequest2');\n-\n-  //       todos.statusToggler(3).click();\n-  //       cy.wait('@updateRequest1');\n-  //       todos.statusToggler(4).click();\n-  //       cy.wait('@updateRequest2');\n-\n-  //       page.toggleAllButton().should('have.class', 'active');\n-  //     });\n-\n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334, cy.stub().as('update4'));\n-  //         page.mockUpdate(257335, cy.stub().as('update5'));\n-  //         page.mockUpdate(257336, cy.stub().as('update6'));\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n-\n-  //         page.toggleAllButton().click();\n-\n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n-\n-  //       it('should send requests only for not completed todos', () => {\n-  //         cy.get('@update4').should('not.be.called');\n-  //         cy.get('@update5').should('not.be.called');\n-  //         cy.get('@update6').should('not.be.called');\n-  //       });\n-\n-  //       it('should make all todos completed', () => {\n-  //         todos.assertCompleted(0);\n-  //         todos.assertCompleted(1);\n-  //         todos.assertCompleted(2);\n-  //         todos.assertCompleted(3);\n-  //         todos.assertCompleted(4);\n-  //       });\n-\n-  //       it('should become active', () => {\n-  //         page.toggleAllButton().should('have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n-  // });\n-\n-  describe('Renaming', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n-\n-    it('should not show forms by default', () => {\n-      todos.titleField(0).should('not.exist');\n-      todos.titleField(1).should('not.exist');\n-      todos.titleField(2).should('not.exist');\n-      todos.titleField(3).should('not.exist');\n-      todos.titleField(4).should('not.exist');\n-    });\n-\n-    describe('Edit Form', () => {\n-      // describe('by default', () => {\n-      //   it('should be opened on dblclick', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.titleField(0).should('exist');\n-      //   });\n-\n-      //   it('should have current value', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.titleField(0).should('have.value', 'HTML');\n-      //   });\n-\n-      //   it('should be focused', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.titleField(0).should('be.focused');\n-      //   });\n-\n-      //   it('should hide a title', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.title(0).should('not.exist');\n-      //   });\n-\n-      //   it('should hide DeleteButton', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.deleteButton(0).should('not.exist');\n-      //   });\n-\n-      //   it('should keep StatusToggler', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.statusToggler(0).should('exist');\n-      //   });\n-\n-      //   it('should not open forms for other todos', () => {\n-      //     todos.title(0).trigger('dblclick');\n-\n-      //     todos.titleField(1).should('not.exist');\n-      //     todos.titleField(2).should('not.exist');\n-      //     todos.titleField(3).should('not.exist');\n-      //     todos.titleField(4).should('not.exist');\n-      //   });\n-\n-      //   it('should not send a request on change', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n-\n-      //     page.mockUpdate(257334, spy);\n-\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123');\n-\n-      //     cy.get('@renameCallback').should('not.be.called');\n-      //   });\n-      // });\n-\n-      // describe('on Escape', () => {\n-      //   it('should be closed', () => {\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n-\n-      //     todos.titleField(0).should('not.exist');\n-      //   });\n-\n-      //   it('should keep current title', () => {\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n-\n-      //     todos.assertTitle(0, 'HTML');\n-      //   });\n-\n-      //   it('should not send a request', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n-\n-      //     page.mockUpdate(257334, spy);\n-\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n-\n-      //     cy.get('@renameCallback').should('not.be.called');\n-      //   });\n-      // });\n-\n-      // describe('on enter before recieved a response', () => {\n-      //   it('should send a request', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n-\n-      //     page.mockUpdate(257334, spy);\n-\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123{enter}');\n-\n-      //     cy.get('@renameCallback').should('have.callCount', 1);\n-      //   });\n-\n-      //   it('should show loader', () => {\n-      //     page.mockUpdate(257334);\n-\n-      //     todos.title(0).trigger('dblclick');\n-      //     page.pauseTimers();\n-      //     todos.titleField(0).type('123{enter}');\n-\n-      //     todos.assertLoading(0);\n-      //   });\n-\n-      //   // It depend on your implementation\n-      //   it.skip('should stay while waiting', () => {\n-      //     page.mockUpdate(257334);\n-\n-      //     todos.title(0).trigger('dblclick');\n-      //     page.pauseTimers();\n-      //     todos.titleField(0).type('123{enter}');\n-\n-      //     todos.titleField(0).should('exist');\n-      //   });\n-      // });\n-\n-      // describe('on success', () => {\n-      //   beforeEach(() => {\n-      //     page.mockUpdate(257334).as('renameRequest');\n-\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).clear()\n-      //   });\n-\n-      //   it('should cancel loading', () => {\n-      //     todos.titleField(0).type('123{enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n-\n-      //     todos.assertNotLoading(0);\n-      //   });\n-\n-      //   it('should be closed', () => {\n-      //     todos.titleField(0).type('123{enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n-\n-      //     todos.titleField(0).should('not.exist');\n-      //   });\n-\n-      //   it('should show the updated title', () => {\n-      //     todos.titleField(0).type('Something{enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n-\n-      //     todos.assertTitle(0, 'Something');\n-      //   });\n-\n-      //   it('should show trim the new title', () => {\n-      //     todos.titleField(0).type('   Some new title      {enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n-\n-      //     todos.assertTitle(0, 'Some new title');\n-      //   });\n-      // });\n-\n-      describe('on fail', () => {\n-        beforeEach(() => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('123{enter}');\n-          cy.wait('@renameRequest');\n+        it('should send requests for all todos', () => {\n+          // if before each pass\n         });\n \n-        it('should cancel loading on fail', () => {\n-          page.flushJSTimers();\n-          todos.assertNotLoading(0);\n+        it('should make all todos active', () => {\n+          todos.assertNotCompleted(0);\n+          todos.assertNotCompleted(1);\n+          todos.assertNotCompleted(2);\n+          todos.assertNotCompleted(3);\n+          todos.assertNotCompleted(4);\n         });\n \n-        it('should stay open on fail', () => {\n-          todos.titleField(0).should('exist');\n+        it('should become not active', () => {\n+          page.toggleAllButton().should('not.have.class', 'active');\n         });\n-\n-        it('should show error message', () => {\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to update a todo');\n-        });\n-\n-        it('should hide error message in 3s', () => {\n-          page.flushJSTimers(3000);\n-\n-          errorMessage.assertHidden();\n-        });\n       });\n-\n-      describe('if title was not changed', () => {\n-        it('should not send a request on enter', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-\n-        it('should be close on enter', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should be closed on Escape', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{esc}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should preserve current title on save', () => {\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).type('{enter}');\n-\n-          todos.assertTitle(0, 'HTML');\n-        });\n-      });\n-\n-      describe('if title became empty', () => {\n-        beforeEach(() => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear();\n-        });\n-\n-        it('should not send an update request on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-        });\n-\n-        it('should send a delete request on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n-\n-          cy.wait('@deleteRequest');\n-        });\n-\n-        it('should show loading on enter', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-\n-          page.pauseTimers();\n-          todos.titleField(0).type('{enter}');\n-\n-          todos.assertLoading(0);\n-        });\n-\n-        it('should delete a todo on success', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-\n-          todos.assertCount(4);\n-          todos.assertTitle(0, 'CSS');\n-        });\n-\n-        it('should show deleting error message on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to delete a todo')\n-        });\n-\n-        // this test may be unstable\n-        it.skip('should hide loader on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-          page.flushJSTimers();\n-\n-          todos.assertNotLoading(0);\n-        });\n-\n-        it('should stay open on fail', () => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n-\n-          todos.titleField(0).type('{enter}');\n-          cy.wait('@deleteRequest');\n-\n-          todos.titleField(0).should('exist');\n-        });\n-\n-        it('should be closed on Escape', () => {\n-          todos.titleField(0).type('{esc}');\n-\n-          todos.titleField(0).should('not.exist');\n-        });\n-\n-        it('should preserve current title on close', () => {\n-          todos.titleField(0).type('{esc}');\n-\n-          todos.title(0).should('have.text', 'HTML');\n-        });\n-      });\n-\n-      describe('on Blur', () => {\n-        // it('should save', () => {\n-        //   page.mockUpdate(257334).as('renameRequest');\n-\n-        //   todos.title(0).trigger('dblclick');\n-        //   todos.titleField(0).clear()\n-        //   todos.titleField(0).type('New title');\n-        //   todos.titleField(0).blur();\n-        //   cy.wait('@renameRequest');\n-\n-        //   // just in case\n-        //   page.flushJSTimers();\n-\n-        //   todos.assertTitle(0, 'New title');\n-        // });\n-\n-        // it('should cancel if title was not changed', () => {\n-        //   const spy = cy.stub()\n-        //     .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-        //     .as('renameCallback');\n-\n-        //   page.mockUpdate(257334, spy);\n-\n-        //   todos.title(0).trigger('dblclick');\n-        //   todos.titleField(0).blur();\n-\n-        //   cy.get('@renameCallback').should('not.be.called');\n-        //   page.flushJSTimers();\n-        //   todos.titleField(0).should('not.exist');\n-        //   todos.assertTitle(0, 'HTML');\n-        // });\n-\n-        it('should delete if title is empty', () => {\n-          page.mockDelete(257334).as('deleteRequest');\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear();\n-          todos.titleField(0).blur();\n-          cy.wait('@deleteRequest');\n-\n-          todos.assertCount(4);\n-          todos.assertTitle(0, 'CSS');\n-        })\n-      });\n     });\n-  });\n-});\n-/// <reference types='cypress' />\n-/// <reference types='../support' />\n \n-import mixedTodos from '../fixtures/todos.json';\n-\n-//#region Page Objects\n-const page = {\n-  toggleAllButton: () => cy.byDataCy('ToggleAllButton'),\n-  newTodoField: () => cy.byDataCy('NewTodoField'),\n-  todosCounter: () => cy.byDataCy('TodosCounter'),\n-  clearCompletedButton: () => cy.byDataCy('ClearCompletedButton'),\n-\n-  visit: (url = '/') => {\n-    cy.visit(url, {\n-      onBeforeLoad: win => win.localStorage.setItem('user', '{ \"id\": 1 }'),\n-    });\n-\n-    // to wait until React App is loaded\n-    cy.get('.todoapp__title').should('exist');\n-  },\n-  pauseTimers: () => cy.clock(),\n-\n-  flushJSTimers: (delay = 1000) => {\n-    cy.clock().then(clock => {\n-      clock.tick(delay);\n-      clock.restore();\n-    });\n-\n-    cy.wait(50);\n-  },\n-\n-  /**\n-   * @param {*} response - can be a valid response object or stub\n-   *\n-   * { body: [] }\n-   * { statusCode: 503: body: 'Service Unavailable' }\n-   * spy = cy.stub().callsFake(req => req.reply(response)).as('alias')\n-   */\n-  mockLoad: (response = { fixture: 'todos' }) => {\n-    return cy.intercept('**/todos?userId=*', response);\n-  },\n-  mockCreate: (response) => {\n-    const options = { method: 'POST', url: '**/todos' };\n-\n-    const spy = cy.stub()\n-      .callsFake(req => req.reply({\n-        statusCode: 201,\n-        body: { ...req.body, id: Math.random() },\n-      }))\n-      .as('createCallback');\n-\n-    return cy.intercept(options, response || spy);\n-  },\n-  mockDelete: (id, response) => {\n-    const options = { method: 'DELETE', url: `**/todos/${id}` };\n-\n-    return cy.intercept(options, response || { body: '1' });\n-  },\n-  mockUpdate: (id, response) => {\n-    const todo = mixedTodos.find(todo => todo.id === id) || {};\n-    const options = { method: 'PATCH', url: `**/todos/${id}` };\n-\n-    const spy = cy.stub()\n-      .callsFake(req => req.reply({ body: { ...todo, ...req.body, id } }))\n-      .as('updateCallback');\n-\n-    return cy.intercept(options, response || spy);\n-  },\n-};\n-\n-const todos = {\n-  el: index => cy.byDataCy('Todo').eq(index),\n-  deleteButton: index => todos.el(index).byDataCy('TodoDelete'),\n-  statusToggler: index => todos.el(index).byDataCy('TodoStatus'),\n-  title: index => todos.el(index).byDataCy('TodoTitle'),\n-  titleField: index => todos.el(index).byDataCy('TodoTitleField'),\n-\n-  assertCount: length => cy.byDataCy('Todo').should('have.length', length),\n-  assertTitle: (index, title) => todos.title(index).should('have.text', title),\n-  assertLoading: index => todos.el(index).byDataCy('TodoLoader').should('have.class', 'is-active'),\n-  assertNotLoading: index => todos.el(index).byDataCy('TodoLoader').should('not.have.class', 'is-active'),\n-  assertCompleted: index => todos.el(index).should('have.class', 'completed'),\n-  assertNotCompleted: index => todos.el(index).should('not.have.class', 'completed'),\n-};\n-\n-const errorMessage = {\n-  el: () => cy.byDataCy('ErrorNotification'),\n-  closeButton: () => errorMessage.el().byDataCy('HideErrorButton'),\n-  assertVisible: () => errorMessage.el().should('not.have.class', 'hidden'),\n-  assertHidden: () => errorMessage.el().should('have.class', 'hidden'),\n-  assertText: text => errorMessage.el().should('have.text', text),\n-};\n-\n-const FilterLinkKeys = {\n-  all: 'FilterLinkAll',\n-  active: 'FilterLinkActive',\n-  completed: 'FilterLinkCompleted',\n-};\n-\n-const filter = {\n-  el: () => cy.byDataCy('Filter'),\n-  link: type => cy.byDataCy(FilterLinkKeys[type]),\n-  assertVisible: () => filter.el().should('exist'),\n-  assertHidden: () => filter.el().should('not.exist'),\n-  assertSelected: type => filter.link(type).should('have.class', 'selected'),\n-  assertNotSelected: type => filter.link(type).should('not.have.class', 'selected'),\n-};\n-//#endregion\n-\n-let failed = false;\n-\n-Cypress.on('fail', (e) => {\n-  failed = true;\n-  throw e;\n-});\n-\n-describe('', () => {\n-  beforeEach(() => {\n-    if (failed) Cypress.runner.stop();\n-  });\n-\n-  describe('Page with no todos', () => {\n-    it('should send 1 todos request', () => {\n-      const spy = cy.stub()\n-        .callsFake(req => req.reply({ body: [] }))\n-        .as('loadCallback')\n-\n-      page.mockLoad(spy).as('loadRequest');\n-      page.visit();\n-\n-      cy.wait('@loadRequest');\n-      cy.wait(500);\n-\n-      cy.get('@loadCallback').should('have.callCount', 1);\n-    });\n-\n-    describe('', () => {\n+    describe('if all todos are active', () => {\n       beforeEach(() => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should have NewTodoField', () => {\n-        page.newTodoField().should('exist');\n-      });\n-\n-      it('should not have Todos', () => {\n-        todos.assertCount(0);\n-      });\n-\n-      it('should not have Footer', () => {\n-        filter.assertHidden();\n-        page.clearCompletedButton().should('not.exist');\n-        page.todosCounter().should('not.exist');\n-      });\n-\n-      it('should not show error message', () => {\n-        errorMessage.assertHidden();\n-      });\n-    });\n-\n-    describe('on loading error', () => {\n-      beforeEach(() => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should show error', () => {\n-        errorMessage.assertVisible();\n-      });\n-\n-      it('should show correct message', () => {\n-        errorMessage.assertText('Unable to load todos');\n-      });\n-\n-      it('should hide error after 3 seconds', () => {\n-        // just in case\n-        cy.wait(50);\n-\n-        cy.clock();\n-        cy.tick(2500);\n-        errorMessage.assertVisible();\n-\n-        cy.tick(500);\n-        errorMessage.assertHidden();\n-      });\n-\n-      it('should hide error on close button click', () => {\n-        errorMessage.closeButton().click();\n-        errorMessage.assertHidden();\n-      });\n-    });\n-  });\n-\n-  describe('Page with mixed todos', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n-\n-    it('should have NewTodoField', () => {\n-      page.newTodoField().should('exist');\n-    });\n-\n-    it('should have all loaded todos', () => {\n-      todos.assertCount(5);\n-    });\n-\n-    it('should have delete buttons for every todo', () => {\n-      todos.deleteButton(0).should('exist');\n-    });\n-\n-    it('should not have loaders', () => {\n-      todos.assertNotLoading(0);\n-      todos.assertNotLoading(1);\n-      todos.assertNotLoading(2);\n-      todos.assertNotLoading(3);\n-      todos.assertNotLoading(4);\n-    })\n-\n-    it('should have correct todo titles', () => {\n-      todos.assertTitle(0, 'HTML');\n-      todos.assertTitle(1, 'CSS');\n-      todos.assertTitle(2, 'JS');\n-      todos.assertTitle(3, 'TypeScript');\n-      todos.assertTitle(4, 'React');\n-    });\n-\n-    it('should higlight all completed todos', () => {\n-      todos.assertCompleted(0);\n-      todos.assertCompleted(1);\n-      todos.assertCompleted(2);\n-    });\n-\n-    it('should not higlight not completed todos', () => {\n-      todos.assertNotCompleted(3);\n-      todos.assertNotCompleted(4);\n-    });\n-\n-    it('should have correct completed statuses', () => {\n-      todos.statusToggler(0).should('be.checked');\n-      todos.statusToggler(1).should('be.checked');\n-      todos.statusToggler(2).should('be.checked');\n-      todos.statusToggler(3).should('not.be.checked');\n-      todos.statusToggler(4).should('not.be.checked');\n-    });\n-\n-    it('should have Filter', () => {\n-      filter.assertVisible();\n-    });\n-\n-    it('should have todosCounter with a number of not completed todos', () => {\n-      page.todosCounter().should('have.text', '2 items left');\n-    });\n-\n-    it('should have clearCompletedButton', () => {\n-      page.clearCompletedButton().should('exist');\n-    });\n-\n-    it('should have Filter', () => {\n-      filter.assertVisible();\n-    });\n-\n-    it('should not show error message', () => {\n-      errorMessage.assertHidden();\n-    });\n-  });\n-\n-  describe('Filtering', () => {\n-    describe('with mixed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should have only filterLinkAll active', () => {\n-        filter.assertSelected('all');\n-        filter.assertNotSelected('active');\n-        filter.assertNotSelected('completed');\n-      });\n-\n-      it('should allow to select the active filter', () => {\n-        filter.link('active').click();\n-\n-        filter.assertNotSelected('all');\n-        filter.assertSelected('active');\n-        filter.assertNotSelected('completed');\n-      });\n-\n-      it('should show only active todos when active filter is selected', () => {\n-        filter.link('active').click();\n-\n-        todos.assertCount(2);\n-        todos.assertTitle(0, 'TypeScript');\n-        todos.assertTitle(1, 'React');\n-      });\n-\n-      it('should keep footer when active todos are shown', () => {\n-        filter.link('active').click();\n-\n-        page.todosCounter().should('have.text', '2 items left');\n-        filter.assertVisible();\n-        page.clearCompletedButton().should('exist');\n-      });\n-\n-      it('should allow to select the completed filter', () => {\n-        filter.link('completed').click();\n-\n-        filter.assertNotSelected('all');\n-        filter.assertNotSelected('active');\n-        filter.assertSelected('completed');\n-      });\n-\n-      it('should show only completed todos when completed filter is selected', () => {\n-        filter.link('completed').click();\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-        todos.assertTitle(1, 'CSS');\n-        todos.assertTitle(2, 'JS');\n-      });\n-\n-      it('should keep footer when completed todos are shown', () => {\n-        filter.link('completed').click();\n-\n-        page.todosCounter().should('have.text', '2 items left');\n-        filter.assertVisible();\n-        page.clearCompletedButton().should('exist');\n-      });\n-\n-      it('should allow to reset filter', () => {\n-        filter.link('completed').click();\n-        filter.link('all').click();\n-\n-        todos.assertCount(5);\n-        filter.assertSelected('all');\n-        filter.assertNotSelected('active');\n-        filter.assertNotSelected('completed');\n-      });\n-    });\n-\n-    describe('with active todos only', () => {\n-      beforeEach(() => {\n         page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n \n-      it('should hide todos on completed selection', () => {\n-        filter.link('completed').click();\n-\n-        todos.assertCount(0);\n-      });\n-\n-      it('should keep footer on completed selection', () => {\n-        filter.link('completed').click();\n-        filter.assertVisible();\n-      });\n-\n-      it('should keep todos counter on completed selection', () => {\n-        filter.link('completed').click();\n-        page.todosCounter().should('have.text', '5 items left');\n-      });\n-    });\n-\n-    describe('with completed todos only', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n         page.visit();\n         cy.wait('@loadRequest');\n       });\n-    });\n-  });\n \n-  describe('Adding a todo', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n-\n-    it('should focus text field by default', () => {\n-      page.newTodoField().should('be.focused');\n-    });\n-\n-    describe('if title is empty', () => {\n-      beforeEach(() => {\n-        page.mockCreate();\n-        page.newTodoField().type('{enter}');\n+      it('should be visible', () => {\n+        page.toggleAllButton().should('exist');\n       });\n \n-      it('should not send a request', () => {\n-        cy.get('@createCallback').should('not.be.called');\n+      it('should not be active', () => {\n+        page.toggleAllButton().should('not.have.class', 'active');\n       });\n \n-      it('should keep text field focused', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n+      it('should not become active after toggling a todo', () => {\n+        page.mockUpdate(257335).as('updateRequest');\n+        todos.statusToggler(1).click();\n+        cy.wait('@updateRequest');\n \n-      it('should display an error message', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Title should not be empty');\n+        page.toggleAllButton().should('not.have.class', 'active');\n       });\n \n-      it('should hide an error message after 3 seconds', () => {\n-        // just in case\n-        cy.wait(50);\n-\n-        cy.clock();\n-        cy.tick(3000);\n-        errorMessage.assertHidden();\n-      });\n-    });\n-\n-    describe('if title title has only whitespaces', () => {\n-      beforeEach(() => {\n-        page.mockCreate();\n-        page.newTodoField().type('     {enter}');\n-      });\n-\n-      it('should not send a request', () => {\n-        cy.get('@createCallback').should('not.be.called');\n-      });\n-\n-      it('should keep text field focused', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n-\n-      it('should display an error message', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Title should not be empty');\n-      });\n-\n-      it('should hide an error message after 3 seconds', () => {\n-        // just in case\n-        cy.wait(50);\n-\n-        cy.clock();\n-        cy.tick(3000);\n-        errorMessage.assertHidden();\n-      });\n-    });\n-\n-    describe('after form submition before response is received', () => {\n-      beforeEach(() => {\n-        page.mockCreate();\n-        page.pauseTimers();\n-        page.newTodoField().type('Test Todo{enter}');\n-      });\n-\n-      it('should send a create request', () => {\n-        cy.tick(1000);\n-        cy.get('@createCallback').should('have.callCount', 1);\n-      });\n-\n-      it('should disable the input', () => {\n-        page.newTodoField().should('be.disabled');\n-      });\n-\n-      it('should keep entered text', () => {\n-        page.newTodoField().should('have.value', 'Test Todo');\n-      });\n-\n-      it('should create and show a temp TodoItem with Loader', () => {\n-        todos.assertCount(6);\n-        todos.assertLoading(5);\n-      });\n-\n-      it('should show a temp TodoItem with correct title', () => {\n-        todos.assertTitle(5, 'Test Todo');\n-      });\n-\n-      it('should show a not completed temp TodoItem', () => {\n-        todos.assertNotCompleted(5);\n-      });\n-\n-      it('should not show loaders for existing todos', () => {\n-        todos.assertNotLoading(0);\n-        todos.assertNotLoading(1);\n-        todos.assertNotLoading(2);\n-        todos.assertNotLoading(3);\n-        todos.assertNotLoading(4);\n-      });\n-\n-      it('should not update active counter', () => {\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-    });\n-\n-    describe('on success response', () => {\n-      describe('', () => {\n+      describe('on click', () => {\n         beforeEach(() => {\n-          page.mockCreate().as('createRequest');\n-          page.newTodoField().type('Test Todo{enter}');\n+          page.mockUpdate(257334).as('updateRequest4');\n+          page.mockUpdate(257335).as('updateRequest5');\n+          page.mockUpdate(257336).as('updateRequest6');\n+          page.mockUpdate(257337).as('updateRequest7');\n+          page.mockUpdate(257338).as('updateRequest8');\n \n-          cy.wait('@createRequest');\n-        });\n+          page.toggleAllButton().click();\n \n-        // this test may be flaky\n-        it.skip('should replace loader with a created todo', () => {\n-          page.flushJSTimers();\n-          todos.assertCount(6);\n-          todos.assertNotLoading(5);\n+          cy.wait('@updateRequest4');\n+          cy.wait('@updateRequest5');\n+          cy.wait('@updateRequest6');\n+          cy.wait('@updateRequest7');\n+          cy.wait('@updateRequest8');\n         });\n \n-        it('should add a todo with a correct title', () => {\n-          todos.assertTitle(5, 'Test Todo');\n+        it('should send requests for all todos', () => {\n+          // if before each pass\n         });\n \n-        it('should add a not completed todo', () => {\n-          todos.assertNotCompleted(5);\n+        it('should make all todos completed', () => {\n+          todos.assertCompleted(0);\n+          todos.assertCompleted(1);\n+          todos.assertCompleted(2);\n+          todos.assertCompleted(3);\n+          todos.assertCompleted(4);\n         });\n \n-        it('should update active counter', () => {\n-          page.todosCounter().should('have.text', '3 items left');\n+        it('should become active', () => {\n+          page.toggleAllButton().should('have.class', 'active');\n         });\n-\n-        it('should enable the text field', () => {\n-          page.newTodoField().should('not.be.disabled');\n-        });\n-\n-        it('should not show error message', () => {\n-          errorMessage.assertHidden();\n-        });\n-\n-        it('should clear text field', () => {\n-          page.newTodoField().should('have.value', '');\n-        });\n-\n-        it('should focus text field', () => {\n-          page.newTodoField().should('be.focused');\n-        });\n-\n-        it('should allow to add one more todo', () => {\n-          page.mockCreate().as('createRequest2');\n-\n-          page.newTodoField().type('Hello world{enter}');\n-          cy.wait('@createRequest2');\n-          page.flushJSTimers();\n-\n-          todos.assertCount(7);\n-          // todos.assertNotLoading(6);\n-          todos.assertNotCompleted(6);\n-          todos.assertTitle(6, 'Hello world');\n-          page.todosCounter().should('have.text', '4 items left');\n-        });\n       });\n-\n-      it('should add trimmed title', () => {\n-        page.mockCreate().as('createRequest');\n-\n-        page.newTodoField().type('  Other Title    {enter}');\n-        cy.wait('@createRequest');\n-\n-        // just in case\n-        page.flushJSTimers();\n-\n-        todos.assertTitle(5, 'Other Title');\n-      });\n-\n-      it('should keep current filter', () => {\n-        page.mockCreate().as('createRequest');\n-\n-        filter.link('active').click();\n-        page.newTodoField().type('Test Todo{enter}');\n-        cy.wait('@createRequest');\n-\n-        filter.assertSelected('active');\n-      });\n     });\n \n-    describe('on request fail', () => {\n+    describe('if there are some mixed todos', () => {\n       beforeEach(() => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-          .as('createRequest');\n-\n-        page.newTodoField().type('Test Todo{enter}');\n-\n-        cy.wait('@createRequest');\n-      });\n-\n-      it('should show an error message', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Unable to add a todo');\n-      });\n-\n-      it('should hide an error message in 3 seconds', () => {\n-        cy.clock();\n-        cy.tick(2500);\n-\n-        errorMessage.assertVisible();\n-\n-        cy.tick(500);\n-        errorMessage.assertHidden();\n-      });\n-\n-      it('should remove a temp TodoItem on request fail', () => {\n-        todos.assertCount(5);\n-        todos.assertTitle(4, 'React');\n-      });\n-\n-      it('should enable the text field on request fail', () => {\n-        page.newTodoField().should('not.be.disabled');\n-      });\n-\n-      it('should keep the entered text on request fail', () => {\n-        page.newTodoField().should('have.value', 'Test Todo');\n-      });\n-\n-      it('should focus text field', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n-\n-      it('should not update active counter', () => {\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-\n-      it('should immediately hide an error message on new request', () => {\n-        page.newTodoField().type(`{enter}`);\n-        errorMessage.assertHidden();\n-      });\n-\n-      it('should show an error message again on a next fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-          .as('createRequest2');\n-\n-        page.newTodoField().type(`{enter}`);\n-        cy.wait('@createRequest2');\n-\n-        errorMessage.assertVisible();\n-      });\n-\n-      it('should keep an error message for 3s after the last fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n-          .as('createRequest2');\n-\n-        cy.clock();\n-\n-        cy.tick(2000);\n-        page.newTodoField().type(`{enter}`);\n-        cy.tick(500);\n-        cy.wait('@createRequest2');\n-        cy.tick(2000);\n-\n-        errorMessage.assertVisible();\n-      });\n-\n-      it('should allow to add a todo', () => {\n-        page.mockCreate().as('createRequest2');\n-        page.newTodoField().type('{enter}');\n-\n-        cy.wait('@createRequest2');\n-        page.flushJSTimers();\n-\n-        todos.assertCount(6);\n-        // todos.assertNotLoading(5);\n-        todos.assertNotCompleted(5);\n-        todos.assertTitle(5, 'Test Todo');\n-\n-        page.todosCounter().should('have.text', '3 items left');\n-      });\n-    });\n-  });\n-\n-  describe('Adding a first todo', () => {\n-    beforeEach(() => {\n-      page.mockLoad({ body: [] }).as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-\n-      page.mockCreate().as('createRequest');\n-      page.newTodoField().type('First todo{enter}');\n-\n-      cy.wait('@createRequest');\n-    });\n-\n-    it('should show a new todos', () => {\n-      todos.assertCount(1);\n-      todos.assertTitle(0, 'First todo');\n-      todos.assertNotCompleted(0);\n-    });\n-\n-    it('should show Filter', () => {\n-      filter.assertVisible();\n-    });\n-\n-    it('should show todosCounter', () => {\n-      page.todosCounter().should('contain.text', '1 item');\n-    });\n-  });\n-\n-  describe('Individual Todo Deletion', () => {\n-    describe('Default behavior', () => {\n-      beforeEach(() => {\n         page.mockLoad().as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n \n-      it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n-        page.mockDelete(257334);\n-        page.pauseTimers();\n-        todos.deleteButton(0).click();\n-\n-        todos.assertLoading(0);\n-      });\n-\n-      it('should not delete a todo before successful response', () => {\n-        page.mockDelete(257334);\n-        page.pauseTimers();\n-        todos.deleteButton(0).click();\n-\n-        todos.assertCount(5);\n-      });\n-\n-      it('should remove the todo from the list on a successful API response', () => {\n-        page.mockDelete(257334).as('deleteRequest');\n-\n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n-\n-        todos.assertCount(4);\n-        todos.assertTitle(0, 'CSS');\n-      });\n-\n-      it('should focus text field after todo deletion', () => {\n-        page.mockDelete(257334).as('deleteRequest');\n-\n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n-\n-        page.newTodoField().should('be.focused');\n-      });\n-\n-      it('should not remove the todo from the list on an API error', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n-\n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n-\n-        todos.assertCount(5);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-\n-      it('should show an error message on an API error', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n-\n-        todos.deleteButton(0).click();\n-        cy.wait('@deleteRequest');\n-\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Unable to delete a todo');\n-      });\n-\n-      it('should adjust the active todo count correctly after successful deletion', () => {\n-        page.mockDelete(257338).as('deleteRequest');\n-        todos.deleteButton(4).click();\n-        cy.wait('@deleteRequest');\n-\n-        page.todosCounter().should('contain.text', '1 item');\n-      });\n-\n-      it('should not adjust the active todo count after failed deletion', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n-          .as('deleteRequest');\n-\n-        todos.deleteButton(4).click();\n-        cy.wait('@deleteRequest');\n-\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-    });\n-\n-    describe('Last todo deletion', () => {\n-      beforeEach(() => {\n-        const todo = {\n-          \"id\": 257334,\n-          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-          \"userId\": 1,\n-          \"title\": \"HTML\",\n-          \"completed\": false\n-        };\n-\n-        page.mockLoad({ body: [todo] }).as('loadRequest');\n         page.visit();\n         cy.wait('@loadRequest');\n-\n-        page.mockDelete(257334);\n-        todos.deleteButton(0).click();\n       });\n \n-      it('should hide todos', () => {\n-        todos.assertCount(0);\n-      });\n-\n-      it('should hide footer', () => {\n-        filter.assertHidden();\n-        page.clearCompletedButton().should('not.exist');\n-        page.todosCounter().should('not.exist');\n-      });\n-\n-      it('should focus text field after todo deletion', () => {\n-        page.newTodoField().should('be.focused');\n-      });\n-    });\n-  });\n-\n-  describe('Group Todo Deletion', () => {\n-    describe('with no completed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should not have active ClearCompleted button', () => {\n-        page.clearCompletedButton().should('be.disabled');\n-      });\n-    });\n-\n-    describe('with some completed todos', () => {\n-      beforeEach(() => {\n-        page.mockLoad().as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-      });\n-\n-      it('should have ClearCompleted button enabled', () => {\n-        page.clearCompletedButton().should('not.be.disabled');\n-      });\n-\n-      it('should send individual deletion request for each completed todo', () => {\n-        page.mockDelete(257334).as('deleteRequest1');\n-        page.mockDelete(257335).as('deleteRequest2');\n-        page.mockDelete(257336).as('deleteRequest3');\n-\n-        page.clearCompletedButton().click();\n-\n-        cy.wait('@deleteRequest1');\n-        cy.wait('@deleteRequest2');\n-        cy.wait('@deleteRequest3');\n-      });\n-\n-      describe('on success', () => {\n-        beforeEach(() => {\n-          page.mockDelete(257334).as('deleteRequest1');\n-          page.mockDelete(257335).as('deleteRequest2');\n-          page.mockDelete(257336).as('deleteRequest3');\n-\n-          page.clearCompletedButton().click();\n-\n-          cy.wait('@deleteRequest1');\n-          cy.wait('@deleteRequest2');\n-          cy.wait('@deleteRequest3');\n-        });\n-\n-        it('should remove all completed todos from the list', () => {\n-          todos.assertCount(2);\n-          todos.assertTitle(0, 'TypeScript');\n-          todos.assertTitle(1, 'React');\n-        });\n-\n-        it('should disable ClearCompleted button', () => {\n-          page.clearCompletedButton().should('be.disabled');\n-        });\n-\n-        it('should focus the text field', () => {\n-          page.newTodoField().should('be.focused');\n-        });\n-      });\n-\n-      describe('on a single fail', () => {\n-        beforeEach(() => {\n-          // to prevent Cypress from failing the test on uncaught exception\n-          cy.once('uncaught:exception', () => false);\n-\n-          page.mockDelete(257334).as('deleteRequest1');\n-          page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n-          page.mockDelete(257336).as('deleteRequest3');\n-\n-          page.clearCompletedButton().click();\n-\n-          cy.wait('@deleteRequest1');\n-          cy.wait('@deleteRequest2');\n-          cy.wait('@deleteRequest3');\n-        });\n-\n-        it('should show an error message if any of the group deletions fails', () => {\n-          errorMessage.assertVisible();\n-          errorMessage.assertText('Unable to delete a todo');\n-        });\n-\n-        it('should remove todos with success responses and keep todos with errors', () => {\n-          todos.assertCount(3);\n-          todos.assertTitle(0, 'CSS');\n-          todos.assertTitle(1, 'TypeScript');\n-        });\n-\n-        it('should not disable ClearCompleted button', () => {\n-          page.clearCompletedButton().should('not.be.disabled');\n-        });\n-      });\n-    });\n-\n-    describe('with all todos completed', () => {\n-      beforeEach(() => {\n-        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-        page.visit();\n-        cy.wait('@loadRequest');\n-\n-        page.mockDelete(257334).as('deleteRequest1');\n-        page.mockDelete(257335).as('deleteRequest2');\n-        page.mockDelete(257336).as('deleteRequest3');\n-        page.mockDelete(257337).as('deleteRequest4');\n-        page.mockDelete(257338).as('deleteRequest5');\n-\n-        page.clearCompletedButton().click();\n-\n-        cy.wait('@deleteRequest1');\n-        cy.wait('@deleteRequest2');\n-        cy.wait('@deleteRequest3');\n-        cy.wait('@deleteRequest4');\n-        cy.wait('@deleteRequest5');\n-      });\n-\n-      it('should hide todos after clearing all completed todos', () => {\n-        todos.assertCount(0);\n-      });\n-\n-      it('should hide footer after clearing all completed todos', () => {\n-        filter.assertHidden();\n-        page.clearCompletedButton().should('not.exist');\n-        page.todosCounter().should('not.exist');\n-      });\n-    });\n-  });\n-\n-  describe('Todo Toggling', () => {\n-    beforeEach(() => {\n-      page.mockLoad().as('loadRequest');\n-      page.visit();\n-      cy.wait('@loadRequest');\n-    });\n-\n-    describe('before receving response', () => {\n-      beforeEach(() => {\n-        page.mockUpdate(257334).as('updateRequest');\n-      });\n-\n-      it('should send an update request', () => {\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-      });\n-\n-      it('should show loader after click', () => {\n-        page.pauseTimers();\n-        todos.statusToggler(0).click();\n-\n-        todos.assertLoading(0);\n-      });\n-\n-      it('should not show error message after click', () => {\n-        page.pauseTimers();\n-        todos.statusToggler(0).click();\n-\n-        errorMessage.assertHidden();\n-      });\n-\n-      it('should not hide a todo if filtered', () => {\n-        filter.link('completed').click();\n-        page.pauseTimers();\n-        cy.tick(1000); // flush JS animation\n-        todos.statusToggler(0).click();\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-    });\n-\n-    describe('on success', () => {\n-      beforeEach(() => {\n-        page.mockUpdate(257334).as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-      });\n-\n-      it('should toggle a todo', () => {\n-        todos.assertNotCompleted(0);\n-        todos.statusToggler(0).should('not.be.checked');\n-      });\n-\n-      it('should cancel loading', () => {\n-        page.flushJSTimers();\n-        todos.assertNotLoading(0);\n-      });\n-\n-      it('should update the counter', () => {\n-        page.todosCounter().should('have.text', '3 items left');\n-      });\n-\n-      it('should not show an error message', () => {\n-        errorMessage.assertHidden();\n-      });\n-    });\n-\n-    describe('on fail', () => {\n-      beforeEach(() => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-          .as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-      });\n-\n-      it('should show an error', () => {\n-        errorMessage.assertVisible();\n-        errorMessage.assertText('Unable to update a todo');\n-      });\n-\n-      it('should not toggle a todo', () => {\n-        todos.assertCompleted(0);\n-        todos.statusToggler(0).should('be.checked');\n-      });\n-\n-      it('should cancel loading', () => {\n-        page.flushJSTimers();\n-        todos.assertNotLoading(0);\n-      });\n-\n-      it('should not update the counter', () => {\n-        page.todosCounter().should('have.text', '2 items left');\n-      });\n-\n-      it('should allow to toggle again', () => {\n-        page.mockUpdate(257334).as('updateRequest2');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest2');\n-\n-        todos.assertNotCompleted(0);\n-      });\n-    });\n-\n-    describe('if filtered', () => {\n-      beforeEach(() => {\n-        filter.link('completed').click();\n-      });\n-\n-      it('should hide a todo on success', () => {\n-        page.mockUpdate(257334).as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-\n-        todos.assertCount(2);\n-        todos.assertTitle(0, 'CSS');\n-      });\n-\n-      it('should show a todo on success when selected an oposite filter', () => {\n-        page.mockUpdate(257334).as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        filter.link('active').click();\n-        cy.wait('@updateRequest');\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-\n-      it('should not hide a todo on fail', () => {\n-        // to prevent Cypress from failing the test on uncaught exception\n-        cy.once('uncaught:exception', () => false);\n-\n-        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n-          .as('updateRequest');\n-\n-        todos.statusToggler(0).click();\n-        cy.wait('@updateRequest');\n-\n-        todos.assertCount(3);\n-        todos.assertTitle(0, 'HTML');\n-      });\n-    });\n-  });\n-\n-\n-\n-\n-\n-\n-\n-  describe('Toggle All Button', () => {\n-    describe('if there are no todos', () => {\n-      it('should not be visible while loading todos', () => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n-\n-        page.pauseTimers();\n-        page.visit();\n-\n-        page.toggleAllButton().should('not.exist');\n-      });\n-\n-      it('should not be visible when loaded', () => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n-\n-        page.visit();\n-        cy.wait('@loadRequest');\n-\n-        page.toggleAllButton().should('not.exist');\n-      });\n-\n-      it('should appear after adding a todo', () => {\n-        page.mockLoad({ body: [] }).as('loadRequest');\n-        page.mockCreate().as('createRequest');\n-\n-        page.visit();\n-        cy.wait('@loadRequest');\n-\n-        page.newTodoField().type('First todo{enter}');\n-        cy.wait('@createRequest');\n-\n+      it('should be visible', () => {\n         page.toggleAllButton().should('exist');\n       });\n \n-      it('should disappear after removing the last todo', () => {\n-        const todo = {\n-          \"id\": 257334,\n-          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n-          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n-          \"userId\": 1,\n-          \"title\": \"HTML\",\n-          \"completed\": false\n-        };\n-\n-  //       page.mockLoad({ body: [todo] }).as('loadRequest');\n-  //       page.mockDelete(257334).as('deleteRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-\n-  //       todos.deleteButton(0).click();\n-  //       cy.wait('@deleteRequest');\n-\n-  //       page.toggleAllButton().should('not.exist');\n-  //     });\n-  //   });\n-\n-  //   describe('if all todos are completed', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n-  //     it('should stay visible after filtering out all the todos', () => {\n-  //       filter.link('active').click();\n-\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n-  //     it('should be active', () => {\n-  //       page.toggleAllButton().should('have.class', 'active');\n-  //     });\n-\n-  //     it('should become not active after toggling a todo', () => {\n-  //       page.mockUpdate(257335).as('updateRequest');\n-  //       todos.statusToggler(1).click();\n-  //       cy.wait('@updateRequest');\n-\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n-\n-  //     it('should stay active after a todo toggling fail', () => {\n-  //       // to prevent Cypress from failing the test on uncaught exception\n-  //       cy.once('uncaught:exception', () => false);\n-\n-  //       page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n-  //       todos.statusToggler(1).click();\n-  //       cy.wait('@updateRequest');\n-\n-  //       page.toggleAllButton().should('have.class', 'active');\n-  //     });\n-\n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334).as('updateRequest4');\n-  //         page.mockUpdate(257335).as('updateRequest5');\n-  //         page.mockUpdate(257336).as('updateRequest6');\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n-\n-  //         page.toggleAllButton().click();\n-\n-  //         cy.wait('@updateRequest4');\n-  //         cy.wait('@updateRequest5');\n-  //         cy.wait('@updateRequest6');\n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n-\n-  //       it('should send requests for all todos', () => {\n-  //         // if before each pass\n-  //       });\n-\n-  //       it('should make all todos active', () => {\n-  //         todos.assertNotCompleted(0);\n-  //         todos.assertNotCompleted(1);\n-  //         todos.assertNotCompleted(2);\n-  //         todos.assertNotCompleted(3);\n-  //         todos.assertNotCompleted(4);\n-  //       });\n-\n-  //       it('should become not active', () => {\n-  //         page.toggleAllButton().should('not.have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n-\n-  //   describe('if all todos are active', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n   //     it('should not be active', () => {\n   //       page.toggleAllButton().should('not.have.class', 'active');\n   //     });\n \n-  //     it('should not become active after toggling a todo', () => {\n-  //       page.mockUpdate(257335).as('updateRequest');\n-  //       todos.statusToggler(1).click();\n-  //       cy.wait('@updateRequest');\n-\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n-\n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334).as('updateRequest4');\n-  //         page.mockUpdate(257335).as('updateRequest5');\n-  //         page.mockUpdate(257336).as('updateRequest6');\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n-\n-  //         page.toggleAllButton().click();\n-\n-  //         cy.wait('@updateRequest4');\n-  //         cy.wait('@updateRequest5');\n-  //         cy.wait('@updateRequest6');\n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n-\n-  //       it('should send requests for all todos', () => {\n-  //         // if before each pass\n-  //       });\n-\n-  //       it('should make all todos completed', () => {\n-  //         todos.assertCompleted(0);\n-  //         todos.assertCompleted(1);\n-  //         todos.assertCompleted(2);\n-  //         todos.assertCompleted(3);\n-  //         todos.assertCompleted(4);\n-  //       });\n-\n-  //       it('should become active', () => {\n-  //         page.toggleAllButton().should('have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n-\n-  //   describe('if there are some mixed todos', () => {\n-  //     beforeEach(() => {\n-  //       page.mockLoad().as('loadRequest');\n-\n-  //       page.visit();\n-  //       cy.wait('@loadRequest');\n-  //     });\n-\n-  //     it('should be visible', () => {\n-  //       page.toggleAllButton().should('exist');\n-  //     });\n-\n-  //     it('should not be active', () => {\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n-\n   //     it('should become active after completing all todos', () => {\n   //       page.mockUpdate(257337).as('updateRequest1');\n   //       page.mockUpdate(257338).as('updateRequest2');\n \n"
                },
                {
                    "date": 1715618935123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1321,58 +1321,58 @@\n       it('should be visible', () => {\n         page.toggleAllButton().should('exist');\n       });\n \n-  //     it('should not be active', () => {\n-  //       page.toggleAllButton().should('not.have.class', 'active');\n-  //     });\n+      it('should not be active', () => {\n+        page.toggleAllButton().should('not.have.class', 'active');\n+      });\n \n-  //     it('should become active after completing all todos', () => {\n-  //       page.mockUpdate(257337).as('updateRequest1');\n-  //       page.mockUpdate(257338).as('updateRequest2');\n+      it('should become active after completing all todos', () => {\n+        page.mockUpdate(257337).as('updateRequest1');\n+        page.mockUpdate(257338).as('updateRequest2');\n \n-  //       todos.statusToggler(3).click();\n-  //       cy.wait('@updateRequest1');\n-  //       todos.statusToggler(4).click();\n-  //       cy.wait('@updateRequest2');\n+        todos.statusToggler(3).click();\n+        cy.wait('@updateRequest1');\n+        todos.statusToggler(4).click();\n+        cy.wait('@updateRequest2');\n \n-  //       page.toggleAllButton().should('have.class', 'active');\n-  //     });\n+        page.toggleAllButton().should('have.class', 'active');\n+      });\n \n-  //     describe('on click', () => {\n-  //       beforeEach(() => {\n-  //         page.mockUpdate(257334, cy.stub().as('update4'));\n-  //         page.mockUpdate(257335, cy.stub().as('update5'));\n-  //         page.mockUpdate(257336, cy.stub().as('update6'));\n-  //         page.mockUpdate(257337).as('updateRequest7');\n-  //         page.mockUpdate(257338).as('updateRequest8');\n+      describe('on click', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334, cy.stub().as('update4'));\n+          page.mockUpdate(257335, cy.stub().as('update5'));\n+          page.mockUpdate(257336, cy.stub().as('update6'));\n+          page.mockUpdate(257337).as('updateRequest7');\n+          page.mockUpdate(257338).as('updateRequest8');\n \n-  //         page.toggleAllButton().click();\n+          page.toggleAllButton().click();\n \n-  //         cy.wait('@updateRequest7');\n-  //         cy.wait('@updateRequest8');\n-  //       });\n+          cy.wait('@updateRequest7');\n+          cy.wait('@updateRequest8');\n+        });\n \n-  //       it('should send requests only for not completed todos', () => {\n-  //         cy.get('@update4').should('not.be.called');\n-  //         cy.get('@update5').should('not.be.called');\n-  //         cy.get('@update6').should('not.be.called');\n-  //       });\n+        it('should send requests only for not completed todos', () => {\n+          cy.get('@update4').should('not.be.called');\n+          cy.get('@update5').should('not.be.called');\n+          cy.get('@update6').should('not.be.called');\n+        });\n \n-  //       it('should make all todos completed', () => {\n-  //         todos.assertCompleted(0);\n-  //         todos.assertCompleted(1);\n-  //         todos.assertCompleted(2);\n-  //         todos.assertCompleted(3);\n-  //         todos.assertCompleted(4);\n-  //       });\n+        it('should make all todos completed', () => {\n+          todos.assertCompleted(0);\n+          todos.assertCompleted(1);\n+          todos.assertCompleted(2);\n+          todos.assertCompleted(3);\n+          todos.assertCompleted(4);\n+        });\n \n-  //       it('should become active', () => {\n-  //         page.toggleAllButton().should('have.class', 'active');\n-  //       });\n-  //     });\n-  //   });\n-  // });\n+        it('should become active', () => {\n+          page.toggleAllButton().should('have.class', 'active');\n+        });\n+      });\n+    });\n+  });\n \n   describe('Renaming', () => {\n     beforeEach(() => {\n       page.mockLoad().as('loadRequest');\n@@ -1388,173 +1388,173 @@\n       todos.titleField(4).should('not.exist');\n     });\n \n     describe('Edit Form', () => {\n-      // describe('by default', () => {\n-      //   it('should be opened on dblclick', () => {\n-      //     todos.title(0).trigger('dblclick');\n+      describe('by default', () => {\n+        it('should be opened on dblclick', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.titleField(0).should('exist');\n-      //   });\n+          todos.titleField(0).should('exist');\n+        });\n \n-      //   it('should have current value', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should have current value', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.titleField(0).should('have.value', 'HTML');\n-      //   });\n+          todos.titleField(0).should('have.value', 'HTML');\n+        });\n \n-      //   it('should be focused', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should be focused', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.titleField(0).should('be.focused');\n-      //   });\n+          todos.titleField(0).should('be.focused');\n+        });\n \n-      //   it('should hide a title', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should hide a title', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.title(0).should('not.exist');\n-      //   });\n+          todos.title(0).should('not.exist');\n+        });\n \n-      //   it('should hide DeleteButton', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should hide DeleteButton', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.deleteButton(0).should('not.exist');\n-      //   });\n+          todos.deleteButton(0).should('not.exist');\n+        });\n \n-      //   it('should keep StatusToggler', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should keep StatusToggler', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.statusToggler(0).should('exist');\n-      //   });\n+          todos.statusToggler(0).should('exist');\n+        });\n \n-      //   it('should not open forms for other todos', () => {\n-      //     todos.title(0).trigger('dblclick');\n+        it('should not open forms for other todos', () => {\n+          todos.title(0).trigger('dblclick');\n \n-      //     todos.titleField(1).should('not.exist');\n-      //     todos.titleField(2).should('not.exist');\n-      //     todos.titleField(3).should('not.exist');\n-      //     todos.titleField(4).should('not.exist');\n-      //   });\n+          todos.titleField(1).should('not.exist');\n+          todos.titleField(2).should('not.exist');\n+          todos.titleField(3).should('not.exist');\n+          todos.titleField(4).should('not.exist');\n+        });\n \n-      //   it('should not send a request on change', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n+        it('should not send a request on change', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n \n-      //     page.mockUpdate(257334, spy);\n+          page.mockUpdate(257334, spy);\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123');\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123');\n \n-      //     cy.get('@renameCallback').should('not.be.called');\n-      //   });\n-      // });\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+      });\n \n-      // describe('on Escape', () => {\n-      //   it('should be closed', () => {\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n+      describe('on Escape', () => {\n+        it('should be closed', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n \n-      //     todos.titleField(0).should('not.exist');\n-      //   });\n+          todos.titleField(0).should('not.exist');\n+        });\n \n-      //   it('should keep current title', () => {\n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n+        it('should keep current title', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n \n-      //     todos.assertTitle(0, 'HTML');\n-      //   });\n+          todos.assertTitle(0, 'HTML');\n+        });\n \n-      //   it('should not send a request', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n+        it('should not send a request', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n \n-      //     page.mockUpdate(257334, spy);\n+          page.mockUpdate(257334, spy);\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123123{esc}');\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n \n-      //     cy.get('@renameCallback').should('not.be.called');\n-      //   });\n-      // });\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+      });\n \n-      // describe('on enter before recieved a response', () => {\n-      //   it('should send a request', () => {\n-      //     const spy = cy.stub()\n-      //       .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-      //       .as('renameCallback');\n+      describe('on enter before recieved a response', () => {\n+        it('should send a request', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n \n-      //     page.mockUpdate(257334, spy);\n+          page.mockUpdate(257334, spy);\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).type('123{enter}');\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123{enter}');\n \n-      //     cy.get('@renameCallback').should('have.callCount', 1);\n-      //   });\n+          cy.get('@renameCallback').should('have.callCount', 1);\n+        });\n \n-      //   it('should show loader', () => {\n-      //     page.mockUpdate(257334);\n+        it('should show loader', () => {\n+          page.mockUpdate(257334);\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     page.pauseTimers();\n-      //     todos.titleField(0).type('123{enter}');\n+          todos.title(0).trigger('dblclick');\n+          page.pauseTimers();\n+          todos.titleField(0).type('123{enter}');\n \n-      //     todos.assertLoading(0);\n-      //   });\n+          todos.assertLoading(0);\n+        });\n \n-      //   // It depend on your implementation\n-      //   it.skip('should stay while waiting', () => {\n-      //     page.mockUpdate(257334);\n+        // It depend on your implementation\n+        it.skip('should stay while waiting', () => {\n+          page.mockUpdate(257334);\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     page.pauseTimers();\n-      //     todos.titleField(0).type('123{enter}');\n+          todos.title(0).trigger('dblclick');\n+          page.pauseTimers();\n+          todos.titleField(0).type('123{enter}');\n \n-      //     todos.titleField(0).should('exist');\n-      //   });\n-      // });\n+          todos.titleField(0).should('exist');\n+        });\n+      });\n \n-      // describe('on success', () => {\n-      //   beforeEach(() => {\n-      //     page.mockUpdate(257334).as('renameRequest');\n+      describe('on success', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334).as('renameRequest');\n \n-      //     todos.title(0).trigger('dblclick');\n-      //     todos.titleField(0).clear()\n-      //   });\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear()\n+        });\n \n-      //   it('should cancel loading', () => {\n-      //     todos.titleField(0).type('123{enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n+        it('should cancel loading', () => {\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n \n-      //     todos.assertNotLoading(0);\n-      //   });\n+          todos.assertNotLoading(0);\n+        });\n \n-      //   it('should be closed', () => {\n-      //     todos.titleField(0).type('123{enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n+        it('should be closed', () => {\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n \n-      //     todos.titleField(0).should('not.exist');\n-      //   });\n+          todos.titleField(0).should('not.exist');\n+        });\n \n-      //   it('should show the updated title', () => {\n-      //     todos.titleField(0).type('Something{enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n+        it('should show the updated title', () => {\n+          todos.titleField(0).type('Something{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n \n-      //     todos.assertTitle(0, 'Something');\n-      //   });\n+          todos.assertTitle(0, 'Something');\n+        });\n \n-      //   it('should show trim the new title', () => {\n-      //     todos.titleField(0).type('   Some new title      {enter}');\n-      //     cy.wait('@renameRequest');\n-      //     page.flushJSTimers();\n+        it('should show trim the new title', () => {\n+          todos.titleField(0).type('   Some new title      {enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n \n-      //     todos.assertTitle(0, 'Some new title');\n-      //   });\n-      // });\n+          todos.assertTitle(0, 'Some new title');\n+        });\n+      });\n \n       describe('on fail', () => {\n         beforeEach(() => {\n           // to prevent Cypress from failing the test on uncaught exception\n"
                },
                {
                    "date": 1715618956748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1720,38 +1720,38 @@\n         });\n       });\n \n       describe('on Blur', () => {\n-        // it('should save', () => {\n-        //   page.mockUpdate(257334).as('renameRequest');\n+        it('should save', () => {\n+          page.mockUpdate(257334).as('renameRequest');\n \n-        //   todos.title(0).trigger('dblclick');\n-        //   todos.titleField(0).clear()\n-        //   todos.titleField(0).type('New title');\n-        //   todos.titleField(0).blur();\n-        //   cy.wait('@renameRequest');\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear()\n+          todos.titleField(0).type('New title');\n+          todos.titleField(0).blur();\n+          cy.wait('@renameRequest');\n \n-        //   // just in case\n-        //   page.flushJSTimers();\n+          // just in case\n+          page.flushJSTimers();\n \n-        //   todos.assertTitle(0, 'New title');\n-        // });\n+          todos.assertTitle(0, 'New title');\n+        });\n \n-        // it('should cancel if title was not changed', () => {\n-        //   const spy = cy.stub()\n-        //     .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-        //     .as('renameCallback');\n+        it('should cancel if title was not changed', () => {\n+          const spy = cy.stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n \n-        //   page.mockUpdate(257334, spy);\n+          page.mockUpdate(257334, spy);\n \n-        //   todos.title(0).trigger('dblclick');\n-        //   todos.titleField(0).blur();\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).blur();\n \n-        //   cy.get('@renameCallback').should('not.be.called');\n-        //   page.flushJSTimers();\n-        //   todos.titleField(0).should('not.exist');\n-        //   todos.assertTitle(0, 'HTML');\n-        // });\n+          cy.get('@renameCallback').should('not.be.called');\n+          page.flushJSTimers();\n+          todos.titleField(0).should('not.exist');\n+          todos.assertTitle(0, 'HTML');\n+        });\n \n         it('should delete if title is empty', () => {\n           page.mockDelete(257334).as('deleteRequest');\n \n"
                },
                {
                    "date": 1715620320111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1571,11 +1571,11 @@\n           page.flushJSTimers();\n           todos.assertNotLoading(0);\n         });\n \n-        it('should stay open on fail', () => {\n-          todos.titleField(0).should('exist');\n-        });\n+        // it('should stay open on fail', () => {\n+        //   todos.titleField(0).should('exist');\n+        // });\n \n         it('should show error message', () => {\n           errorMessage.assertVisible();\n           errorMessage.assertText('Unable to update a todo');\n@@ -1720,39 +1720,11 @@\n         });\n       });\n \n       describe('on Blur', () => {\n-        it('should save', () => {\n-          page.mockUpdate(257334).as('renameRequest');\n \n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).clear()\n-          todos.titleField(0).type('New title');\n-          todos.titleField(0).blur();\n-          cy.wait('@renameRequest');\n \n-          // just in case\n-          page.flushJSTimers();\n \n-          todos.assertTitle(0, 'New title');\n-        });\n-\n-        it('should cancel if title was not changed', () => {\n-          const spy = cy.stub()\n-            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n-            .as('renameCallback');\n-\n-          page.mockUpdate(257334, spy);\n-\n-          todos.title(0).trigger('dblclick');\n-          todos.titleField(0).blur();\n-\n-          cy.get('@renameCallback').should('not.be.called');\n-          page.flushJSTimers();\n-          todos.titleField(0).should('not.exist');\n-          todos.assertTitle(0, 'HTML');\n-        });\n-\n         it('should delete if title is empty', () => {\n           page.mockDelete(257334).as('deleteRequest');\n \n           todos.title(0).trigger('dblclick');\n"
                },
                {
                    "date": 1715620557816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1773 @@\n+/// <reference types='cypress' />\n+/// <reference types='../support' />\n+\n+import mixedTodos from '../fixtures/todos.json';\n+\n+//#region Page Objects\n+const page = {\n+  toggleAllButton: () => cy.byDataCy('ToggleAllButton'),\n+  newTodoField: () => cy.byDataCy('NewTodoField'),\n+  todosCounter: () => cy.byDataCy('TodosCounter'),\n+  clearCompletedButton: () => cy.byDataCy('ClearCompletedButton'),\n+\n+  visit: (url = '/') => {\n+    cy.visit(url, {\n+      onBeforeLoad: win => win.localStorage.setItem('user', '{ \"id\": 1 }'),\n+    });\n+\n+    // to wait until React App is loaded\n+    cy.get('.todoapp__title').should('exist');\n+  },\n+  pauseTimers: () => cy.clock(),\n+\n+  flushJSTimers: (delay = 1000) => {\n+    cy.clock().then(clock => {\n+      clock.tick(delay);\n+      clock.restore();\n+    });\n+\n+    cy.wait(50);\n+  },\n+\n+  /**\n+   * @param {*} response - can be a valid response object or stub\n+   *\n+   * { body: [] }\n+   * { statusCode: 503: body: 'Service Unavailable' }\n+   * spy = cy.stub().callsFake(req => req.reply(response)).as('alias')\n+   */\n+  mockLoad: (response = { fixture: 'todos' }) => {\n+    return cy.intercept('**/todos?userId=*', response);\n+  },\n+  mockCreate: response => {\n+    const options = { method: 'POST', url: '**/todos' };\n+\n+    const spy = cy\n+      .stub()\n+      .callsFake(req =>\n+        req.reply({\n+          statusCode: 201,\n+          body: { ...req.body, id: Math.random() },\n+        }),\n+      )\n+      .as('createCallback');\n+\n+    return cy.intercept(options, response || spy);\n+  },\n+  mockDelete: (id, response) => {\n+    const options = { method: 'DELETE', url: `**/todos/${id}` };\n+\n+    return cy.intercept(options, response || { body: '1' });\n+  },\n+  mockUpdate: (id, response) => {\n+    const todo = mixedTodos.find(todo => todo.id === id) || {};\n+    const options = { method: 'PATCH', url: `**/todos/${id}` };\n+\n+    const spy = cy\n+      .stub()\n+      .callsFake(req => req.reply({ body: { ...todo, ...req.body, id } }))\n+      .as('updateCallback');\n+\n+    return cy.intercept(options, response || spy);\n+  },\n+};\n+\n+const todos = {\n+  el: index => cy.byDataCy('Todo').eq(index),\n+  deleteButton: index => todos.el(index).byDataCy('TodoDelete'),\n+  statusToggler: index => todos.el(index).byDataCy('TodoStatus'),\n+  title: index => todos.el(index).byDataCy('TodoTitle'),\n+  titleField: index => todos.el(index).byDataCy('TodoTitleField'),\n+\n+  assertCount: length => cy.byDataCy('Todo').should('have.length', length),\n+  assertTitle: (index, title) => todos.title(index).should('have.text', title),\n+  assertLoading: index =>\n+    todos.el(index).byDataCy('TodoLoader').should('have.class', 'is-active'),\n+  assertNotLoading: index =>\n+    todos\n+      .el(index)\n+      .byDataCy('TodoLoader')\n+      .should('not.have.class', 'is-active'),\n+  assertCompleted: index => todos.el(index).should('have.class', 'completed'),\n+  assertNotCompleted: index =>\n+    todos.el(index).should('not.have.class', 'completed'),\n+};\n+\n+const errorMessage = {\n+  el: () => cy.byDataCy('ErrorNotification'),\n+  closeButton: () => errorMessage.el().byDataCy('HideErrorButton'),\n+  assertVisible: () => errorMessage.el().should('not.have.class', 'hidden'),\n+  assertHidden: () => errorMessage.el().should('have.class', 'hidden'),\n+  assertText: text => errorMessage.el().should('have.text', text),\n+};\n+\n+const FilterLinkKeys = {\n+  all: 'FilterLinkAll',\n+  active: 'FilterLinkActive',\n+  completed: 'FilterLinkCompleted',\n+};\n+\n+const filter = {\n+  el: () => cy.byDataCy('Filter'),\n+  link: type => cy.byDataCy(FilterLinkKeys[type]),\n+  assertVisible: () => filter.el().should('exist'),\n+  assertHidden: () => filter.el().should('not.exist'),\n+  assertSelected: type => filter.link(type).should('have.class', 'selected'),\n+  assertNotSelected: type =>\n+    filter.link(type).should('not.have.class', 'selected'),\n+};\n+//#endregion\n+\n+let failed = false;\n+\n+Cypress.on('fail', e => {\n+  failed = true;\n+  throw e;\n+});\n+\n+describe('', () => {\n+  beforeEach(() => {\n+    if (failed) Cypress.runner.stop();\n+  });\n+\n+  describe('Page with no todos', () => {\n+    it('should send 1 todos request', () => {\n+      const spy = cy\n+        .stub()\n+        .callsFake(req => req.reply({ body: [] }))\n+        .as('loadCallback');\n+\n+      page.mockLoad(spy).as('loadRequest');\n+      page.visit();\n+\n+      cy.wait('@loadRequest');\n+      cy.wait(500);\n+\n+      cy.get('@loadCallback').should('have.callCount', 1);\n+    });\n+\n+    describe('', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have NewTodoField', () => {\n+        page.newTodoField().should('exist');\n+      });\n+\n+      it('should not have Todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+      it('should not have Footer', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+\n+      it('should not show error message', () => {\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('on loading error', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should show error', () => {\n+        errorMessage.assertVisible();\n+      });\n+\n+      it('should show correct message', () => {\n+        errorMessage.assertText('Unable to load todos');\n+      });\n+\n+      it('should hide error after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n+\n+        cy.clock();\n+        cy.tick(2500);\n+        errorMessage.assertVisible();\n+\n+        cy.tick(500);\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should hide error on close button click', () => {\n+        errorMessage.closeButton().click();\n+        errorMessage.assertHidden();\n+      });\n+    });\n+  });\n+\n+  describe('Page with mixed todos', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should have NewTodoField', () => {\n+      page.newTodoField().should('exist');\n+    });\n+\n+    it('should have all loaded todos', () => {\n+      todos.assertCount(5);\n+    });\n+\n+    it('should have delete buttons for every todo', () => {\n+      todos.deleteButton(0).should('exist');\n+    });\n+\n+    it('should not have loaders', () => {\n+      todos.assertNotLoading(0);\n+      todos.assertNotLoading(1);\n+      todos.assertNotLoading(2);\n+      todos.assertNotLoading(3);\n+      todos.assertNotLoading(4);\n+    });\n+\n+    it('should have correct todo titles', () => {\n+      todos.assertTitle(0, 'HTML');\n+      todos.assertTitle(1, 'CSS');\n+      todos.assertTitle(2, 'JS');\n+      todos.assertTitle(3, 'TypeScript');\n+      todos.assertTitle(4, 'React');\n+    });\n+\n+    it('should higlight all completed todos', () => {\n+      todos.assertCompleted(0);\n+      todos.assertCompleted(1);\n+      todos.assertCompleted(2);\n+    });\n+\n+    it('should not higlight not completed todos', () => {\n+      todos.assertNotCompleted(3);\n+      todos.assertNotCompleted(4);\n+    });\n+\n+    it('should have correct completed statuses', () => {\n+      todos.statusToggler(0).should('be.checked');\n+      todos.statusToggler(1).should('be.checked');\n+      todos.statusToggler(2).should('be.checked');\n+      todos.statusToggler(3).should('not.be.checked');\n+      todos.statusToggler(4).should('not.be.checked');\n+    });\n+\n+    it('should have Filter', () => {\n+      filter.assertVisible();\n+    });\n+\n+    it('should have todosCounter with a number of not completed todos', () => {\n+      page.todosCounter().should('have.text', '2 items left');\n+    });\n+\n+    it('should have clearCompletedButton', () => {\n+      page.clearCompletedButton().should('exist');\n+    });\n+\n+    it('should have Filter', () => {\n+      filter.assertVisible();\n+    });\n+\n+    it('should not show error message', () => {\n+      errorMessage.assertHidden();\n+    });\n+  });\n+\n+  describe('Filtering', () => {\n+    describe('with mixed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have only filterLinkAll active', () => {\n+        filter.assertSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n+\n+      it('should allow to select the active filter', () => {\n+        filter.link('active').click();\n+\n+        filter.assertNotSelected('all');\n+        filter.assertSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n+\n+      it('should show only active todos when active filter is selected', () => {\n+        filter.link('active').click();\n+\n+        todos.assertCount(2);\n+        todos.assertTitle(0, 'TypeScript');\n+        todos.assertTitle(1, 'React');\n+      });\n+\n+      it('should keep footer when active todos are shown', () => {\n+        filter.link('active').click();\n+\n+        page.todosCounter().should('have.text', '2 items left');\n+        filter.assertVisible();\n+        page.clearCompletedButton().should('exist');\n+      });\n+\n+      it('should allow to select the completed filter', () => {\n+        filter.link('completed').click();\n+\n+        filter.assertNotSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertSelected('completed');\n+      });\n+\n+      it('should show only completed todos when completed filter is selected', () => {\n+        filter.link('completed').click();\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+        todos.assertTitle(1, 'CSS');\n+        todos.assertTitle(2, 'JS');\n+      });\n+\n+      it('should keep footer when completed todos are shown', () => {\n+        filter.link('completed').click();\n+\n+        page.todosCounter().should('have.text', '2 items left');\n+        filter.assertVisible();\n+        page.clearCompletedButton().should('exist');\n+      });\n+\n+      it('should allow to reset filter', () => {\n+        filter.link('completed').click();\n+        filter.link('all').click();\n+\n+        todos.assertCount(5);\n+        filter.assertSelected('all');\n+        filter.assertNotSelected('active');\n+        filter.assertNotSelected('completed');\n+      });\n+    });\n+\n+    describe('with active todos only', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should hide todos on completed selection', () => {\n+        filter.link('completed').click();\n+\n+        todos.assertCount(0);\n+      });\n+\n+      it('should keep footer on completed selection', () => {\n+        filter.link('completed').click();\n+        filter.assertVisible();\n+      });\n+\n+      it('should keep todos counter on completed selection', () => {\n+        filter.link('completed').click();\n+        page.todosCounter().should('have.text', '5 items left');\n+      });\n+    });\n+\n+    describe('with completed todos only', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+    });\n+  });\n+\n+  describe('Adding a todo', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should focus text field by default', () => {\n+      page.newTodoField().should('be.focused');\n+    });\n+\n+    describe('if title is empty', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.newTodoField().type('{enter}');\n+      });\n+\n+      it('should not send a request', () => {\n+        cy.get('@createCallback').should('not.be.called');\n+      });\n+\n+      it('should keep text field focused', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should display an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Title should not be empty');\n+      });\n+\n+      it('should hide an error message after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n+\n+        cy.clock();\n+        cy.tick(3000);\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('if title title has only whitespaces', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.newTodoField().type('     {enter}');\n+      });\n+\n+      it('should not send a request', () => {\n+        cy.get('@createCallback').should('not.be.called');\n+      });\n+\n+      it('should keep text field focused', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should display an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Title should not be empty');\n+      });\n+\n+      it('should hide an error message after 3 seconds', () => {\n+        // just in case\n+        cy.wait(50);\n+\n+        cy.clock();\n+        cy.tick(3000);\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('after form submition before response is received', () => {\n+      beforeEach(() => {\n+        page.mockCreate();\n+        page.pauseTimers();\n+        page.newTodoField().type('Test Todo{enter}');\n+      });\n+\n+      it('should send a create request', () => {\n+        cy.tick(1000);\n+        cy.get('@createCallback').should('have.callCount', 1);\n+      });\n+\n+      it('should disable the input', () => {\n+        page.newTodoField().should('be.disabled');\n+      });\n+\n+      it('should keep entered text', () => {\n+        page.newTodoField().should('have.value', 'Test Todo');\n+      });\n+\n+      it('should create and show a temp TodoItem with Loader', () => {\n+        todos.assertCount(6);\n+        todos.assertLoading(5);\n+      });\n+\n+      it('should show a temp TodoItem with correct title', () => {\n+        todos.assertTitle(5, 'Test Todo');\n+      });\n+\n+      it('should show a not completed temp TodoItem', () => {\n+        todos.assertNotCompleted(5);\n+      });\n+\n+      it('should not show loaders for existing todos', () => {\n+        todos.assertNotLoading(0);\n+        todos.assertNotLoading(1);\n+        todos.assertNotLoading(2);\n+        todos.assertNotLoading(3);\n+        todos.assertNotLoading(4);\n+      });\n+\n+      it('should not update active counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+    });\n+\n+    describe('on success response', () => {\n+      describe('', () => {\n+        beforeEach(() => {\n+          page.mockCreate().as('createRequest');\n+          page.newTodoField().type('Test Todo{enter}');\n+\n+          cy.wait('@createRequest');\n+        });\n+\n+        // this test may be flaky\n+        it.skip('should replace loader with a created todo', () => {\n+          page.flushJSTimers();\n+          todos.assertCount(6);\n+          todos.assertNotLoading(5);\n+        });\n+\n+        it('should add a todo with a correct title', () => {\n+          todos.assertTitle(5, 'Test Todo');\n+        });\n+\n+        it('should add a not completed todo', () => {\n+          todos.assertNotCompleted(5);\n+        });\n+\n+        it('should update active counter', () => {\n+          page.todosCounter().should('have.text', '3 items left');\n+        });\n+\n+        it('should enable the text field', () => {\n+          page.newTodoField().should('not.be.disabled');\n+        });\n+\n+        it('should not show error message', () => {\n+          errorMessage.assertHidden();\n+        });\n+\n+        it('should clear text field', () => {\n+          page.newTodoField().should('have.value', '');\n+        });\n+\n+        it('should focus text field', () => {\n+          page.newTodoField().should('be.focused');\n+        });\n+\n+        it('should allow to add one more todo', () => {\n+          page.mockCreate().as('createRequest2');\n+\n+          page.newTodoField().type('Hello world{enter}');\n+          cy.wait('@createRequest2');\n+          page.flushJSTimers();\n+\n+          todos.assertCount(7);\n+          // todos.assertNotLoading(6);\n+          todos.assertNotCompleted(6);\n+          todos.assertTitle(6, 'Hello world');\n+          page.todosCounter().should('have.text', '4 items left');\n+        });\n+      });\n+\n+      it('should add trimmed title', () => {\n+        page.mockCreate().as('createRequest');\n+\n+        page.newTodoField().type('  Other Title    {enter}');\n+        cy.wait('@createRequest');\n+\n+        // just in case\n+        page.flushJSTimers();\n+\n+        todos.assertTitle(5, 'Other Title');\n+      });\n+\n+      it('should keep current filter', () => {\n+        page.mockCreate().as('createRequest');\n+\n+        filter.link('active').click();\n+        page.newTodoField().type('Test Todo{enter}');\n+        cy.wait('@createRequest');\n+\n+        filter.assertSelected('active');\n+      });\n+    });\n+\n+    describe('on request fail', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page\n+          .mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest');\n+\n+        page.newTodoField().type('Test Todo{enter}');\n+\n+        cy.wait('@createRequest');\n+      });\n+\n+      it('should show an error message', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to add a todo');\n+      });\n+\n+      it('should hide an error message in 3 seconds', () => {\n+        cy.clock();\n+        cy.tick(2500);\n+\n+        errorMessage.assertVisible();\n+\n+        cy.tick(500);\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should remove a temp TodoItem on request fail', () => {\n+        todos.assertCount(5);\n+        todos.assertTitle(4, 'React');\n+      });\n+\n+      it('should enable the text field on request fail', () => {\n+        page.newTodoField().should('not.be.disabled');\n+      });\n+\n+      it('should keep the entered text on request fail', () => {\n+        page.newTodoField().should('have.value', 'Test Todo');\n+      });\n+\n+      it('should focus text field', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should not update active counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+\n+      it('should immediately hide an error message on new request', () => {\n+        page.newTodoField().type(`{enter}`);\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should show an error message again on a next fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page\n+          .mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest2');\n+\n+        page.newTodoField().type(`{enter}`);\n+        cy.wait('@createRequest2');\n+\n+        errorMessage.assertVisible();\n+      });\n+\n+      it('should keep an error message for 3s after the last fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page\n+          .mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n+          .as('createRequest2');\n+\n+        cy.clock();\n+\n+        cy.tick(2000);\n+        page.newTodoField().type(`{enter}`);\n+        cy.tick(500);\n+        cy.wait('@createRequest2');\n+        cy.tick(2000);\n+\n+        errorMessage.assertVisible();\n+      });\n+\n+      it('should allow to add a todo', () => {\n+        page.mockCreate().as('createRequest2');\n+        page.newTodoField().type('{enter}');\n+\n+        cy.wait('@createRequest2');\n+        page.flushJSTimers();\n+\n+        todos.assertCount(6);\n+        // todos.assertNotLoading(5);\n+        todos.assertNotCompleted(5);\n+        todos.assertTitle(5, 'Test Todo');\n+\n+        page.todosCounter().should('have.text', '3 items left');\n+      });\n+    });\n+  });\n+\n+  describe('Adding a first todo', () => {\n+    beforeEach(() => {\n+      page.mockLoad({ body: [] }).as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+\n+      page.mockCreate().as('createRequest');\n+      page.newTodoField().type('First todo{enter}');\n+\n+      cy.wait('@createRequest');\n+    });\n+\n+    it('should show a new todos', () => {\n+      todos.assertCount(1);\n+      todos.assertTitle(0, 'First todo');\n+      todos.assertNotCompleted(0);\n+    });\n+\n+    it('should show Filter', () => {\n+      filter.assertVisible();\n+    });\n+\n+    it('should show todosCounter', () => {\n+      page.todosCounter().should('contain.text', '1 item');\n+    });\n+  });\n+\n+  describe('Individual Todo Deletion', () => {\n+    describe('Default behavior', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n+        page.mockDelete(257334);\n+        page.pauseTimers();\n+        todos.deleteButton(0).click();\n+\n+        todos.assertLoading(0);\n+      });\n+\n+      it('should not delete a todo before successful response', () => {\n+        page.mockDelete(257334);\n+        page.pauseTimers();\n+        todos.deleteButton(0).click();\n+\n+        todos.assertCount(5);\n+      });\n+\n+      it('should remove the todo from the list on a successful API response', () => {\n+        page.mockDelete(257334).as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        todos.assertCount(4);\n+        todos.assertTitle(0, 'CSS');\n+      });\n+\n+      it('should focus text field after todo deletion', () => {\n+        page.mockDelete(257334).as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.newTodoField().should('be.focused');\n+      });\n+\n+      it('should not remove the todo from the list on an API error', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page\n+          .mockDelete(257334, {\n+            statusCode: 500,\n+            body: 'Internal Server Error',\n+          })\n+          .as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        todos.assertCount(5);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+\n+      it('should show an error message on an API error', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page\n+          .mockDelete(257334, {\n+            statusCode: 500,\n+            body: 'Internal Server Error',\n+          })\n+          .as('deleteRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to delete a todo');\n+      });\n+\n+      it('should adjust the active todo count correctly after successful deletion', () => {\n+        page.mockDelete(257338).as('deleteRequest');\n+        todos.deleteButton(4).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.todosCounter().should('contain.text', '1 item');\n+      });\n+\n+      it('should not adjust the active todo count after failed deletion', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page\n+          .mockDelete(257338, {\n+            statusCode: 500,\n+            body: 'Internal Server Error',\n+          })\n+          .as('deleteRequest');\n+\n+        todos.deleteButton(4).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+    });\n+\n+    describe('Last todo deletion', () => {\n+      beforeEach(() => {\n+        const todo = {\n+          id: 257334,\n+          createdAt: '2023-09-19T08:21:56.486Z',\n+          updatedAt: '2023-09-19T08:23:07.096Z',\n+          userId: 1,\n+          title: 'HTML',\n+          completed: false,\n+        };\n+\n+        page.mockLoad({ body: [todo] }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.mockDelete(257334);\n+        todos.deleteButton(0).click();\n+      });\n+\n+      it('should hide todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+      it('should hide footer', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+\n+      it('should focus text field after todo deletion', () => {\n+        page.newTodoField().should('be.focused');\n+      });\n+    });\n+  });\n+\n+  describe('Group Todo Deletion', () => {\n+    describe('with no completed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should not have active ClearCompleted button', () => {\n+        page.clearCompletedButton().should('be.disabled');\n+      });\n+    });\n+\n+    describe('with some completed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should have ClearCompleted button enabled', () => {\n+        page.clearCompletedButton().should('not.be.disabled');\n+      });\n+\n+      it('should send individual deletion request for each completed todo', () => {\n+        page.mockDelete(257334).as('deleteRequest1');\n+        page.mockDelete(257335).as('deleteRequest2');\n+        page.mockDelete(257336).as('deleteRequest3');\n+\n+        page.clearCompletedButton().click();\n+\n+        cy.wait('@deleteRequest1');\n+        cy.wait('@deleteRequest2');\n+        cy.wait('@deleteRequest3');\n+      });\n+\n+      describe('on success', () => {\n+        beforeEach(() => {\n+          page.mockDelete(257334).as('deleteRequest1');\n+          page.mockDelete(257335).as('deleteRequest2');\n+          page.mockDelete(257336).as('deleteRequest3');\n+\n+          page.clearCompletedButton().click();\n+\n+          cy.wait('@deleteRequest1');\n+          cy.wait('@deleteRequest2');\n+          cy.wait('@deleteRequest3');\n+        });\n+\n+        it('should remove all completed todos from the list', () => {\n+          todos.assertCount(2);\n+          todos.assertTitle(0, 'TypeScript');\n+          todos.assertTitle(1, 'React');\n+        });\n+\n+        it('should disable ClearCompleted button', () => {\n+          page.clearCompletedButton().should('be.disabled');\n+        });\n+\n+        it('should focus the text field', () => {\n+          page.newTodoField().should('be.focused');\n+        });\n+      });\n+\n+      describe('on a single fail', () => {\n+        beforeEach(() => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334).as('deleteRequest1');\n+          page\n+            .mockDelete(257335, {\n+              statusCode: 500,\n+              body: 'Internal Server Error',\n+            })\n+            .as('deleteRequest2');\n+          page.mockDelete(257336).as('deleteRequest3');\n+\n+          page.clearCompletedButton().click();\n+\n+          cy.wait('@deleteRequest1');\n+          cy.wait('@deleteRequest2');\n+          cy.wait('@deleteRequest3');\n+        });\n+\n+        it('should show an error message if any of the group deletions fails', () => {\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to delete a todo');\n+        });\n+\n+        it('should remove todos with success responses and keep todos with errors', () => {\n+          todos.assertCount(3);\n+          todos.assertTitle(0, 'CSS');\n+          todos.assertTitle(1, 'TypeScript');\n+        });\n+\n+        it('should not disable ClearCompleted button', () => {\n+          page.clearCompletedButton().should('not.be.disabled');\n+        });\n+      });\n+    });\n+\n+    describe('with all todos completed', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.mockDelete(257334).as('deleteRequest1');\n+        page.mockDelete(257335).as('deleteRequest2');\n+        page.mockDelete(257336).as('deleteRequest3');\n+        page.mockDelete(257337).as('deleteRequest4');\n+        page.mockDelete(257338).as('deleteRequest5');\n+\n+        page.clearCompletedButton().click();\n+\n+        cy.wait('@deleteRequest1');\n+        cy.wait('@deleteRequest2');\n+        cy.wait('@deleteRequest3');\n+        cy.wait('@deleteRequest4');\n+        cy.wait('@deleteRequest5');\n+      });\n+\n+      it('should hide todos after clearing all completed todos', () => {\n+        todos.assertCount(0);\n+      });\n+\n+      it('should hide footer after clearing all completed todos', () => {\n+        filter.assertHidden();\n+        page.clearCompletedButton().should('not.exist');\n+        page.todosCounter().should('not.exist');\n+      });\n+    });\n+  });\n+\n+  describe('Todo Toggling', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    describe('before receving response', () => {\n+      beforeEach(() => {\n+        page.mockUpdate(257334).as('updateRequest');\n+      });\n+\n+      it('should send an update request', () => {\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n+\n+      it('should show loader after click', () => {\n+        page.pauseTimers();\n+        todos.statusToggler(0).click();\n+\n+        todos.assertLoading(0);\n+      });\n+\n+      it('should not show error message after click', () => {\n+        page.pauseTimers();\n+        todos.statusToggler(0).click();\n+\n+        errorMessage.assertHidden();\n+      });\n+\n+      it('should not hide a todo if filtered', () => {\n+        filter.link('completed').click();\n+        page.pauseTimers();\n+        cy.tick(1000); // flush JS animation\n+        todos.statusToggler(0).click();\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+    });\n+\n+    describe('on success', () => {\n+      beforeEach(() => {\n+        page.mockUpdate(257334).as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n+\n+      it('should toggle a todo', () => {\n+        todos.assertNotCompleted(0);\n+        todos.statusToggler(0).should('not.be.checked');\n+      });\n+\n+      it('should cancel loading', () => {\n+        page.flushJSTimers();\n+        todos.assertNotLoading(0);\n+      });\n+\n+      it('should update the counter', () => {\n+        page.todosCounter().should('have.text', '3 items left');\n+      });\n+\n+      it('should not show an error message', () => {\n+        errorMessage.assertHidden();\n+      });\n+    });\n+\n+    describe('on fail', () => {\n+      beforeEach(() => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page\n+          .mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+          .as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+      });\n+\n+      it('should show an error', () => {\n+        errorMessage.assertVisible();\n+        errorMessage.assertText('Unable to update a todo');\n+      });\n+\n+      it('should not toggle a todo', () => {\n+        todos.assertCompleted(0);\n+        todos.statusToggler(0).should('be.checked');\n+      });\n+\n+      it('should cancel loading', () => {\n+        page.flushJSTimers();\n+        todos.assertNotLoading(0);\n+      });\n+\n+      it('should not update the counter', () => {\n+        page.todosCounter().should('have.text', '2 items left');\n+      });\n+\n+      it('should allow to toggle again', () => {\n+        page.mockUpdate(257334).as('updateRequest2');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest2');\n+\n+        todos.assertNotCompleted(0);\n+      });\n+    });\n+\n+    describe('if filtered', () => {\n+      beforeEach(() => {\n+        filter.link('completed').click();\n+      });\n+\n+      it('should hide a todo on success', () => {\n+        page.mockUpdate(257334).as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+\n+        todos.assertCount(2);\n+        todos.assertTitle(0, 'CSS');\n+      });\n+\n+      it('should show a todo on success when selected an oposite filter', () => {\n+        page.mockUpdate(257334).as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        filter.link('active').click();\n+        cy.wait('@updateRequest');\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+\n+      it('should not hide a todo on fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page\n+          .mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n+          .as('updateRequest');\n+\n+        todos.statusToggler(0).click();\n+        cy.wait('@updateRequest');\n+\n+        todos.assertCount(3);\n+        todos.assertTitle(0, 'HTML');\n+      });\n+    });\n+  });\n+\n+  describe('Toggle All Button', () => {\n+    describe('if there are no todos', () => {\n+      it('should not be visible while loading todos', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+\n+        page.pauseTimers();\n+        page.visit();\n+\n+        page.toggleAllButton().should('not.exist');\n+      });\n+\n+      it('should not be visible when loaded', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.toggleAllButton().should('not.exist');\n+      });\n+\n+      it('should appear after adding a todo', () => {\n+        page.mockLoad({ body: [] }).as('loadRequest');\n+        page.mockCreate().as('createRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        page.newTodoField().type('First todo{enter}');\n+        cy.wait('@createRequest');\n+\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should disappear after removing the last todo', () => {\n+        const todo = {\n+          id: 257334,\n+          createdAt: '2023-09-19T08:21:56.486Z',\n+          updatedAt: '2023-09-19T08:23:07.096Z',\n+          userId: 1,\n+          title: 'HTML',\n+          completed: false,\n+        };\n+\n+        page.mockLoad({ body: [todo] }).as('loadRequest');\n+        page.mockDelete(257334).as('deleteRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+\n+        todos.deleteButton(0).click();\n+        cy.wait('@deleteRequest');\n+\n+        page.toggleAllButton().should('not.exist');\n+      });\n+    });\n+\n+    describe('if all todos are completed', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should be visible', () => {\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should stay visible after filtering out all the todos', () => {\n+        filter.link('active').click();\n+\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should be active', () => {\n+        page.toggleAllButton().should('have.class', 'active');\n+      });\n+\n+      it('should become not active after toggling a todo', () => {\n+        page.mockUpdate(257335).as('updateRequest');\n+        todos.statusToggler(1).click();\n+        cy.wait('@updateRequest');\n+\n+        page.toggleAllButton().should('not.have.class', 'active');\n+      });\n+\n+      it('should stay active after a todo toggling fail', () => {\n+        // to prevent Cypress from failing the test on uncaught exception\n+        cy.once('uncaught:exception', () => false);\n+\n+        page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n+        todos.statusToggler(1).click();\n+        cy.wait('@updateRequest');\n+\n+        page.toggleAllButton().should('have.class', 'active');\n+      });\n+\n+      describe('on click', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334).as('updateRequest4');\n+          page.mockUpdate(257335).as('updateRequest5');\n+          page.mockUpdate(257336).as('updateRequest6');\n+          page.mockUpdate(257337).as('updateRequest7');\n+          page.mockUpdate(257338).as('updateRequest8');\n+\n+          page.toggleAllButton().click();\n+\n+          cy.wait('@updateRequest4');\n+          cy.wait('@updateRequest5');\n+          cy.wait('@updateRequest6');\n+          cy.wait('@updateRequest7');\n+          cy.wait('@updateRequest8');\n+        });\n+\n+        it('should send requests for all todos', () => {\n+          // if before each pass\n+        });\n+\n+        it('should make all todos active', () => {\n+          todos.assertNotCompleted(0);\n+          todos.assertNotCompleted(1);\n+          todos.assertNotCompleted(2);\n+          todos.assertNotCompleted(3);\n+          todos.assertNotCompleted(4);\n+        });\n+\n+        it('should become not active', () => {\n+          page.toggleAllButton().should('not.have.class', 'active');\n+        });\n+      });\n+    });\n+\n+    describe('if all todos are active', () => {\n+      beforeEach(() => {\n+        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should be visible', () => {\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should not be active', () => {\n+        page.toggleAllButton().should('not.have.class', 'active');\n+      });\n+\n+      it('should not become active after toggling a todo', () => {\n+        page.mockUpdate(257335).as('updateRequest');\n+        todos.statusToggler(1).click();\n+        cy.wait('@updateRequest');\n+\n+        page.toggleAllButton().should('not.have.class', 'active');\n+      });\n+\n+      describe('on click', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334).as('updateRequest4');\n+          page.mockUpdate(257335).as('updateRequest5');\n+          page.mockUpdate(257336).as('updateRequest6');\n+          page.mockUpdate(257337).as('updateRequest7');\n+          page.mockUpdate(257338).as('updateRequest8');\n+\n+          page.toggleAllButton().click();\n+\n+          cy.wait('@updateRequest4');\n+          cy.wait('@updateRequest5');\n+          cy.wait('@updateRequest6');\n+          cy.wait('@updateRequest7');\n+          cy.wait('@updateRequest8');\n+        });\n+\n+        it('should send requests for all todos', () => {\n+          // if before each pass\n+        });\n+\n+        it('should make all todos completed', () => {\n+          todos.assertCompleted(0);\n+          todos.assertCompleted(1);\n+          todos.assertCompleted(2);\n+          todos.assertCompleted(3);\n+          todos.assertCompleted(4);\n+        });\n+\n+        it('should become active', () => {\n+          page.toggleAllButton().should('have.class', 'active');\n+        });\n+      });\n+    });\n+\n+    describe('if there are some mixed todos', () => {\n+      beforeEach(() => {\n+        page.mockLoad().as('loadRequest');\n+\n+        page.visit();\n+        cy.wait('@loadRequest');\n+      });\n+\n+      it('should be visible', () => {\n+        page.toggleAllButton().should('exist');\n+      });\n+\n+      it('should not be active', () => {\n+        page.toggleAllButton().should('not.have.class', 'active');\n+      });\n+\n+      it('should become active after completing all todos', () => {\n+        page.mockUpdate(257337).as('updateRequest1');\n+        page.mockUpdate(257338).as('updateRequest2');\n+\n+        todos.statusToggler(3).click();\n+        cy.wait('@updateRequest1');\n+        todos.statusToggler(4).click();\n+        cy.wait('@updateRequest2');\n+\n+        page.toggleAllButton().should('have.class', 'active');\n+      });\n+\n+      describe('on click', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334, cy.stub().as('update4'));\n+          page.mockUpdate(257335, cy.stub().as('update5'));\n+          page.mockUpdate(257336, cy.stub().as('update6'));\n+          page.mockUpdate(257337).as('updateRequest7');\n+          page.mockUpdate(257338).as('updateRequest8');\n+\n+          page.toggleAllButton().click();\n+\n+          cy.wait('@updateRequest7');\n+          cy.wait('@updateRequest8');\n+        });\n+\n+        it('should send requests only for not completed todos', () => {\n+          cy.get('@update4').should('not.be.called');\n+          cy.get('@update5').should('not.be.called');\n+          cy.get('@update6').should('not.be.called');\n+        });\n+\n+        it('should make all todos completed', () => {\n+          todos.assertCompleted(0);\n+          todos.assertCompleted(1);\n+          todos.assertCompleted(2);\n+          todos.assertCompleted(3);\n+          todos.assertCompleted(4);\n+        });\n+\n+        it('should become active', () => {\n+          page.toggleAllButton().should('have.class', 'active');\n+        });\n+      });\n+    });\n+  });\n+\n+  describe('Renaming', () => {\n+    beforeEach(() => {\n+      page.mockLoad().as('loadRequest');\n+      page.visit();\n+      cy.wait('@loadRequest');\n+    });\n+\n+    it('should not show forms by default', () => {\n+      todos.titleField(0).should('not.exist');\n+      todos.titleField(1).should('not.exist');\n+      todos.titleField(2).should('not.exist');\n+      todos.titleField(3).should('not.exist');\n+      todos.titleField(4).should('not.exist');\n+    });\n+\n+    describe('Edit Form', () => {\n+      describe('by default', () => {\n+        it('should be opened on dblclick', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should have current value', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.titleField(0).should('have.value', 'HTML');\n+        });\n+\n+        it('should be focused', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.titleField(0).should('be.focused');\n+        });\n+\n+        it('should hide a title', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.title(0).should('not.exist');\n+        });\n+\n+        it('should hide DeleteButton', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.deleteButton(0).should('not.exist');\n+        });\n+\n+        it('should keep StatusToggler', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.statusToggler(0).should('exist');\n+        });\n+\n+        it('should not open forms for other todos', () => {\n+          todos.title(0).trigger('dblclick');\n+\n+          todos.titleField(1).should('not.exist');\n+          todos.titleField(2).should('not.exist');\n+          todos.titleField(3).should('not.exist');\n+          todos.titleField(4).should('not.exist');\n+        });\n+\n+        it('should not send a request on change', () => {\n+          const spy = cy\n+            .stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+      });\n+\n+      describe('on Escape', () => {\n+        it('should be closed', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should keep current title', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n+\n+          todos.assertTitle(0, 'HTML');\n+        });\n+\n+        it('should not send a request', () => {\n+          const spy = cy\n+            .stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123123{esc}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+      });\n+\n+      describe('on enter before recieved a response', () => {\n+        it('should send a request', () => {\n+          const spy = cy\n+            .stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123{enter}');\n+\n+          cy.get('@renameCallback').should('have.callCount', 1);\n+        });\n+\n+        it('should show loader', () => {\n+          page.mockUpdate(257334);\n+\n+          todos.title(0).trigger('dblclick');\n+          page.pauseTimers();\n+          todos.titleField(0).type('123{enter}');\n+\n+          todos.assertLoading(0);\n+        });\n+\n+        // It depend on your implementation\n+        it.skip('should stay while waiting', () => {\n+          page.mockUpdate(257334);\n+\n+          todos.title(0).trigger('dblclick');\n+          page.pauseTimers();\n+          todos.titleField(0).type('123{enter}');\n+\n+          todos.titleField(0).should('exist');\n+        });\n+      });\n+\n+      describe('on success', () => {\n+        beforeEach(() => {\n+          page.mockUpdate(257334).as('renameRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+        });\n+\n+        it('should cancel loading', () => {\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should be closed', () => {\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should show the updated title', () => {\n+          todos.titleField(0).type('Something{enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertTitle(0, 'Something');\n+        });\n+\n+        it('should show trim the new title', () => {\n+          todos.titleField(0).type('   Some new title      {enter}');\n+          cy.wait('@renameRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertTitle(0, 'Some new title');\n+        });\n+      });\n+\n+      describe('on fail', () => {\n+        beforeEach(() => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('123{enter}');\n+          cy.wait('@renameRequest');\n+        });\n+\n+        it('should cancel loading on fail', () => {\n+          page.flushJSTimers();\n+          todos.assertNotLoading(0);\n+        });\n+\n+        // it('should stay open on fail', () => {\n+        //   todos.titleField(0).should('exist');\n+        // });\n+\n+        it('should show error message', () => {\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to update a todo');\n+        });\n+\n+        it('should hide error message in 3s', () => {\n+          page.flushJSTimers(3000);\n+\n+          errorMessage.assertHidden();\n+        });\n+      });\n+\n+      describe('if title was not changed', () => {\n+        it('should not send a request on enter', () => {\n+          const spy = cy\n+            .stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+\n+        it('should be close on enter', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should be closed on Escape', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should preserve current title on save', () => {\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.assertTitle(0, 'HTML');\n+        });\n+      });\n+\n+      describe('if title became empty', () => {\n+        beforeEach(() => {\n+          const spy = cy\n+            .stub()\n+            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n+            .as('renameCallback');\n+\n+          page.mockUpdate(257334, spy);\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+        });\n+\n+        it('should not send an update request on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.get('@renameCallback').should('not.be.called');\n+        });\n+\n+        it('should send a delete request on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+\n+          cy.wait('@deleteRequest');\n+        });\n+\n+        it('should show loading on enter', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+\n+          page.pauseTimers();\n+          todos.titleField(0).type('{enter}');\n+\n+          todos.assertLoading(0);\n+        });\n+\n+        it('should delete a todo on success', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          todos.assertCount(4);\n+          todos.assertTitle(0, 'CSS');\n+        });\n+\n+        it('should show deleting error message on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          errorMessage.assertVisible();\n+          errorMessage.assertText('Unable to delete a todo');\n+        });\n+\n+        // this test may be unstable\n+        it.skip('should hide loader on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+          page.flushJSTimers();\n+\n+          todos.assertNotLoading(0);\n+        });\n+\n+        it('should stay open on fail', () => {\n+          // to prevent Cypress from failing the test on uncaught exception\n+          cy.once('uncaught:exception', () => false);\n+\n+          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n+\n+          todos.titleField(0).type('{enter}');\n+          cy.wait('@deleteRequest');\n+\n+          todos.titleField(0).should('exist');\n+        });\n+\n+        it('should be closed on Escape', () => {\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.titleField(0).should('not.exist');\n+        });\n+\n+        it('should preserve current title on close', () => {\n+          todos.titleField(0).type('{esc}');\n+\n+          todos.title(0).should('have.text', 'HTML');\n+        });\n+      });\n+\n+      describe('on Blur', () => {\n+        it('should delete if title is empty', () => {\n+          page.mockDelete(257334).as('deleteRequest');\n+\n+          todos.title(0).trigger('dblclick');\n+          todos.titleField(0).clear();\n+          todos.titleField(0).blur();\n+          cy.wait('@deleteRequest');\n+\n+          todos.assertCount(4);\n+          todos.assertTitle(0, 'CSS');\n+        });\n+      });\n+    });\n+  });\n+});\n"
                },
                {
                    "date": 1715620608057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1604,11 +1604,11 @@\n           page.flushJSTimers();\n           todos.assertNotLoading(0);\n         });\n \n-        // it('should stay open on fail', () => {\n-        //   todos.titleField(0).should('exist');\n-        // });\n+        it('should stay open on fail', () => {\n+          todos.titleField(0).should('exist');\n+        });\n \n         it('should show error message', () => {\n           errorMessage.assertVisible();\n           errorMessage.assertText('Unable to update a todo');\n"
                }
            ],
            "date": 1715356284654,
            "name": "Commit-0",
            "content": "/// <reference types='cypress' />\n/// <reference types='../support' />\n\nimport mixedTodos from '../fixtures/todos.json';\n\n//#region Page Objects\nconst page = {\n  toggleAllButton: () => cy.byDataCy('ToggleAllButton'),\n  newTodoField: () => cy.byDataCy('NewTodoField'),\n  todosCounter: () => cy.byDataCy('TodosCounter'),\n  clearCompletedButton: () => cy.byDataCy('ClearCompletedButton'),\n\n  visit: (url = '/') => {\n    cy.visit(url, {\n      onBeforeLoad: win => win.localStorage.setItem('user', '{ \"id\": 1 }'),\n    });\n\n    // to wait until React App is loaded\n    cy.get('.todoapp__title').should('exist');\n  },\n  pauseTimers: () => cy.clock(),\n\n  flushJSTimers: (delay = 1000) => {\n    cy.clock().then(clock => {\n      clock.tick(delay);\n      clock.restore();\n    });\n\n    cy.wait(50);\n  },\n\n  /**\n   * @param {*} response - can be a valid response object or stub\n   *\n   * { body: [] }\n   * { statusCode: 503: body: 'Service Unavailable' }\n   * spy = cy.stub().callsFake(req => req.reply(response)).as('alias')\n   */\n  mockLoad: (response = { fixture: 'todos' }) => {\n    return cy.intercept('**/todos?userId=*', response);\n  },\n  mockCreate: (response) => {\n    const options = { method: 'POST', url: '**/todos' };\n\n    const spy = cy.stub()\n      .callsFake(req => req.reply({\n        statusCode: 201,\n        body: { ...req.body, id: Math.random() },\n      }))\n      .as('createCallback');\n\n    return cy.intercept(options, response || spy);\n  },\n  mockDelete: (id, response) => {\n    const options = { method: 'DELETE', url: `**/todos/${id}` };\n\n    return cy.intercept(options, response || { body: '1' });\n  },\n  mockUpdate: (id, response) => {\n    const todo = mixedTodos.find(todo => todo.id === id) || {};\n    const options = { method: 'PATCH', url: `**/todos/${id}` };\n\n    const spy = cy.stub()\n      .callsFake(req => req.reply({ body: { ...todo, ...req.body, id } }))\n      .as('updateCallback');\n\n    return cy.intercept(options, response || spy);\n  },\n};\n\nconst todos = {\n  el: index => cy.byDataCy('Todo').eq(index),\n  deleteButton: index => todos.el(index).byDataCy('TodoDelete'),\n  statusToggler: index => todos.el(index).byDataCy('TodoStatus'),\n  title: index => todos.el(index).byDataCy('TodoTitle'),\n  titleField: index => todos.el(index).byDataCy('TodoTitleField'),\n\n  assertCount: length => cy.byDataCy('Todo').should('have.length', length),\n  assertTitle: (index, title) => todos.title(index).should('have.text', title),\n  assertLoading: index => todos.el(index).byDataCy('TodoLoader').should('have.class', 'is-active'),\n  assertNotLoading: index => todos.el(index).byDataCy('TodoLoader').should('not.have.class', 'is-active'),\n  assertCompleted: index => todos.el(index).should('have.class', 'completed'),\n  assertNotCompleted: index => todos.el(index).should('not.have.class', 'completed'),\n};\n\nconst errorMessage = {\n  el: () => cy.byDataCy('ErrorNotification'),\n  closeButton: () => errorMessage.el().byDataCy('HideErrorButton'),\n  assertVisible: () => errorMessage.el().should('not.have.class', 'hidden'),\n  assertHidden: () => errorMessage.el().should('have.class', 'hidden'),\n  assertText: text => errorMessage.el().should('have.text', text),\n};\n\nconst FilterLinkKeys = {\n  all: 'FilterLinkAll',\n  active: 'FilterLinkActive',\n  completed: 'FilterLinkCompleted',\n};\n\nconst filter = {\n  el: () => cy.byDataCy('Filter'),\n  link: type => cy.byDataCy(FilterLinkKeys[type]),\n  assertVisible: () => filter.el().should('exist'),\n  assertHidden: () => filter.el().should('not.exist'),\n  assertSelected: type => filter.link(type).should('have.class', 'selected'),\n  assertNotSelected: type => filter.link(type).should('not.have.class', 'selected'),\n};\n//#endregion\n\nlet failed = false;\n\nCypress.on('fail', (e) => {\n  failed = true;\n  throw e;\n});\n\ndescribe('', () => {\n  beforeEach(() => {\n    if (failed) Cypress.runner.stop();\n  });\n\n  describe('Page with no todos', () => {\n    it('should send 1 todos request', () => {\n      const spy = cy.stub()\n        .callsFake(req => req.reply({ body: [] }))\n        .as('loadCallback')\n\n      page.mockLoad(spy).as('loadRequest');\n      page.visit();\n\n      cy.wait('@loadRequest');\n      cy.wait(500);\n\n      cy.get('@loadCallback').should('have.callCount', 1);\n    });\n\n    describe('', () => {\n      beforeEach(() => {\n        page.mockLoad({ body: [] }).as('loadRequest');\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n\n      it('should have NewTodoField', () => {\n        page.newTodoField().should('exist');\n      });\n\n      it('should not have Todos', () => {\n        todos.assertCount(0);\n      });\n\n      it('should not have Footer', () => {\n        filter.assertHidden();\n        page.clearCompletedButton().should('not.exist');\n        page.todosCounter().should('not.exist');\n      });\n\n      it('should not show error message', () => {\n        errorMessage.assertHidden();\n      });\n    });\n\n    describe('on loading error', () => {\n      beforeEach(() => {\n        // to prevent Cypress from failing the test on uncaught exception\n        cy.once('uncaught:exception', () => false);\n\n        page.mockLoad({ statusCode: 404, body: 'Not found' }).as('loadRequest');\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n\n      it('should show error', () => {\n        errorMessage.assertVisible();\n      });\n\n      it('should show correct message', () => {\n        errorMessage.assertText('Unable to load todos');\n      });\n\n      it('should hide error after 3 seconds', () => {\n        // just in case\n        cy.wait(50);\n\n        cy.clock();\n        cy.tick(2500);\n        errorMessage.assertVisible();\n\n        cy.tick(500);\n        errorMessage.assertHidden();\n      });\n\n      it('should hide error on close button click', () => {\n        errorMessage.closeButton().click();\n        errorMessage.assertHidden();\n      });\n    });\n  });\n\n  describe('Page with mixed todos', () => {\n    beforeEach(() => {\n      page.mockLoad().as('loadRequest');\n      page.visit();\n      cy.wait('@loadRequest');\n    });\n\n    it('should have NewTodoField', () => {\n      page.newTodoField().should('exist');\n    });\n\n    it('should have all loaded todos', () => {\n      todos.assertCount(5);\n    });\n\n    it('should have delete buttons for every todo', () => {\n      todos.deleteButton(0).should('exist');\n    });\n\n    it('should not have loaders', () => {\n      todos.assertNotLoading(0);\n      todos.assertNotLoading(1);\n      todos.assertNotLoading(2);\n      todos.assertNotLoading(3);\n      todos.assertNotLoading(4);\n    })\n\n    it('should have correct todo titles', () => {\n      todos.assertTitle(0, 'HTML');\n      todos.assertTitle(1, 'CSS');\n      todos.assertTitle(2, 'JS');\n      todos.assertTitle(3, 'TypeScript');\n      todos.assertTitle(4, 'React');\n    });\n\n    it('should higlight all completed todos', () => {\n      todos.assertCompleted(0);\n      todos.assertCompleted(1);\n      todos.assertCompleted(2);\n    });\n\n    it('should not higlight not completed todos', () => {\n      todos.assertNotCompleted(3);\n      todos.assertNotCompleted(4);\n    });\n\n    it('should have correct completed statuses', () => {\n      todos.statusToggler(0).should('be.checked');\n      todos.statusToggler(1).should('be.checked');\n      todos.statusToggler(2).should('be.checked');\n      todos.statusToggler(3).should('not.be.checked');\n      todos.statusToggler(4).should('not.be.checked');\n    });\n\n    it('should have Filter', () => {\n      filter.assertVisible();\n    });\n\n    it('should have todosCounter with a number of not completed todos', () => {\n      page.todosCounter().should('have.text', '2 items left');\n    });\n\n    it('should have clearCompletedButton', () => {\n      page.clearCompletedButton().should('exist');\n    });\n\n    it('should have Filter', () => {\n      filter.assertVisible();\n    });\n\n    it('should not show error message', () => {\n      errorMessage.assertHidden();\n    });\n  });\n\n  describe('Filtering', () => {\n    describe('with mixed todos', () => {\n      beforeEach(() => {\n        page.mockLoad().as('loadRequest');\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n\n      it('should have only filterLinkAll active', () => {\n        filter.assertSelected('all');\n        filter.assertNotSelected('active');\n        filter.assertNotSelected('completed');\n      });\n\n      it('should allow to select the active filter', () => {\n        filter.link('active').click();\n\n        filter.assertNotSelected('all');\n        filter.assertSelected('active');\n        filter.assertNotSelected('completed');\n      });\n\n      it('should show only active todos when active filter is selected', () => {\n        filter.link('active').click();\n\n        todos.assertCount(2);\n        todos.assertTitle(0, 'TypeScript');\n        todos.assertTitle(1, 'React');\n      });\n\n      it('should keep footer when active todos are shown', () => {\n        filter.link('active').click();\n\n        page.todosCounter().should('have.text', '2 items left');\n        filter.assertVisible();\n        page.clearCompletedButton().should('exist');\n      });\n\n      it('should allow to select the completed filter', () => {\n        filter.link('completed').click();\n\n        filter.assertNotSelected('all');\n        filter.assertNotSelected('active');\n        filter.assertSelected('completed');\n      });\n\n      it('should show only completed todos when completed filter is selected', () => {\n        filter.link('completed').click();\n\n        todos.assertCount(3);\n        todos.assertTitle(0, 'HTML');\n        todos.assertTitle(1, 'CSS');\n        todos.assertTitle(2, 'JS');\n      });\n\n      it('should keep footer when completed todos are shown', () => {\n        filter.link('completed').click();\n\n        page.todosCounter().should('have.text', '2 items left');\n        filter.assertVisible();\n        page.clearCompletedButton().should('exist');\n      });\n\n      it('should allow to reset filter', () => {\n        filter.link('completed').click();\n        filter.link('all').click();\n\n        todos.assertCount(5);\n        filter.assertSelected('all');\n        filter.assertNotSelected('active');\n        filter.assertNotSelected('completed');\n      });\n    });\n\n    describe('with active todos only', () => {\n      beforeEach(() => {\n        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n\n      it('should hide todos on completed selection', () => {\n        filter.link('completed').click();\n\n        todos.assertCount(0);\n      });\n\n      it('should keep footer on completed selection', () => {\n        filter.link('completed').click();\n        filter.assertVisible();\n      });\n\n      it('should keep todos counter on completed selection', () => {\n        filter.link('completed').click();\n        page.todosCounter().should('have.text', '5 items left');\n      });\n    });\n\n    describe('with completed todos only', () => {\n      beforeEach(() => {\n        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n    });\n  });\n\n  describe('Adding a todo', () => {\n    beforeEach(() => {\n      page.mockLoad().as('loadRequest');\n      page.visit();\n      cy.wait('@loadRequest');\n    });\n\n    it('should focus text field by default', () => {\n      page.newTodoField().should('be.focused');\n    });\n\n    describe('if title is empty', () => {\n      beforeEach(() => {\n        page.mockCreate();\n        page.newTodoField().type('{enter}');\n      });\n\n      it('should not send a request', () => {\n        cy.get('@createCallback').should('not.be.called');\n      });\n\n      it('should keep text field focused', () => {\n        page.newTodoField().should('be.focused');\n      });\n\n      it('should display an error message', () => {\n        errorMessage.assertVisible();\n        errorMessage.assertText('Title should not be empty');\n      });\n\n      it('should hide an error message after 3 seconds', () => {\n        // just in case\n        cy.wait(50);\n\n        cy.clock();\n        cy.tick(3000);\n        errorMessage.assertHidden();\n      });\n    });\n\n    describe('if title title has only whitespaces', () => {\n      beforeEach(() => {\n        page.mockCreate();\n        page.newTodoField().type('     {enter}');\n      });\n\n      it('should not send a request', () => {\n        cy.get('@createCallback').should('not.be.called');\n      });\n\n      it('should keep text field focused', () => {\n        page.newTodoField().should('be.focused');\n      });\n\n      it('should display an error message', () => {\n        errorMessage.assertVisible();\n        errorMessage.assertText('Title should not be empty');\n      });\n\n      it('should hide an error message after 3 seconds', () => {\n        // just in case\n        cy.wait(50);\n\n        cy.clock();\n        cy.tick(3000);\n        errorMessage.assertHidden();\n      });\n    });\n\n    describe('after form submition before response is received', () => {\n      beforeEach(() => {\n        page.mockCreate();\n        page.pauseTimers();\n        page.newTodoField().type('Test Todo{enter}');\n      });\n\n      it('should send a create request', () => {\n        cy.tick(1000);\n        cy.get('@createCallback').should('have.callCount', 1);\n      });\n\n      it('should disable the input', () => {\n        page.newTodoField().should('be.disabled');\n      });\n\n      it('should keep entered text', () => {\n        page.newTodoField().should('have.value', 'Test Todo');\n      });\n\n      it('should create and show a temp TodoItem with Loader', () => {\n        todos.assertCount(6);\n        todos.assertLoading(5);\n      });\n\n      it('should show a temp TodoItem with correct title', () => {\n        todos.assertTitle(5, 'Test Todo');\n      });\n\n      it('should show a not completed temp TodoItem', () => {\n        todos.assertNotCompleted(5);\n      });\n\n      it('should not show loaders for existing todos', () => {\n        todos.assertNotLoading(0);\n        todos.assertNotLoading(1);\n        todos.assertNotLoading(2);\n        todos.assertNotLoading(3);\n        todos.assertNotLoading(4);\n      });\n\n      it('should not update active counter', () => {\n        page.todosCounter().should('have.text', '2 items left');\n      });\n    });\n\n    describe('on success response', () => {\n      describe('', () => {\n        beforeEach(() => {\n          page.mockCreate().as('createRequest');\n          page.newTodoField().type('Test Todo{enter}');\n\n          cy.wait('@createRequest');\n        });\n\n        // this test may be flaky\n        it.skip('should replace loader with a created todo', () => {\n          page.flushJSTimers();\n          todos.assertCount(6);\n          todos.assertNotLoading(5);\n        });\n\n        it('should add a todo with a correct title', () => {\n          todos.assertTitle(5, 'Test Todo');\n        });\n\n        it('should add a not completed todo', () => {\n          todos.assertNotCompleted(5);\n        });\n\n        it('should update active counter', () => {\n          page.todosCounter().should('have.text', '3 items left');\n        });\n\n        it('should enable the text field', () => {\n          page.newTodoField().should('not.be.disabled');\n        });\n\n        it('should not show error message', () => {\n          errorMessage.assertHidden();\n        });\n\n        it('should clear text field', () => {\n          page.newTodoField().should('have.value', '');\n        });\n\n        it('should focus text field', () => {\n          page.newTodoField().should('be.focused');\n        });\n\n        it('should allow to add one more todo', () => {\n          page.mockCreate().as('createRequest2');\n\n          page.newTodoField().type('Hello world{enter}');\n          cy.wait('@createRequest2');\n          page.flushJSTimers();\n\n          todos.assertCount(7);\n          // todos.assertNotLoading(6);\n          todos.assertNotCompleted(6);\n          todos.assertTitle(6, 'Hello world');\n          page.todosCounter().should('have.text', '4 items left');\n        });\n      });\n\n      it('should add trimmed title', () => {\n        page.mockCreate().as('createRequest');\n\n        page.newTodoField().type('  Other Title    {enter}');\n        cy.wait('@createRequest');\n\n        // just in case\n        page.flushJSTimers();\n\n        todos.assertTitle(5, 'Other Title');\n      });\n\n      it('should keep current filter', () => {\n        page.mockCreate().as('createRequest');\n\n        filter.link('active').click();\n        page.newTodoField().type('Test Todo{enter}');\n        cy.wait('@createRequest');\n\n        filter.assertSelected('active');\n      });\n    });\n\n    describe('on request fail', () => {\n      beforeEach(() => {\n        // to prevent Cypress from failing the test on uncaught exception\n        cy.once('uncaught:exception', () => false);\n\n        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n          .as('createRequest');\n\n        page.newTodoField().type('Test Todo{enter}');\n\n        cy.wait('@createRequest');\n      });\n\n      it('should show an error message', () => {\n        errorMessage.assertVisible();\n        errorMessage.assertText('Unable to add a todo');\n      });\n\n      it('should hide an error message in 3 seconds', () => {\n        cy.clock();\n        cy.tick(2500);\n\n        errorMessage.assertVisible();\n\n        cy.tick(500);\n        errorMessage.assertHidden();\n      });\n\n      it('should remove a temp TodoItem on request fail', () => {\n        todos.assertCount(5);\n        todos.assertTitle(4, 'React');\n      });\n\n      it('should enable the text field on request fail', () => {\n        page.newTodoField().should('not.be.disabled');\n      });\n\n      it('should keep the entered text on request fail', () => {\n        page.newTodoField().should('have.value', 'Test Todo');\n      });\n\n      it('should focus text field', () => {\n        page.newTodoField().should('be.focused');\n      });\n\n      it('should not update active counter', () => {\n        page.todosCounter().should('have.text', '2 items left');\n      });\n\n      it('should immediately hide an error message on new request', () => {\n        page.newTodoField().type(`{enter}`);\n        errorMessage.assertHidden();\n      });\n\n      it('should show an error message again on a next fail', () => {\n        // to prevent Cypress from failing the test on uncaught exception\n        cy.once('uncaught:exception', () => false);\n\n        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n          .as('createRequest2');\n\n        page.newTodoField().type(`{enter}`);\n        cy.wait('@createRequest2');\n\n        errorMessage.assertVisible();\n      });\n\n      it('should keep an error message for 3s after the last fail', () => {\n        // to prevent Cypress from failing the test on uncaught exception\n        cy.once('uncaught:exception', () => false);\n\n        page.mockCreate({ statusCode: 503, body: 'Service Unavailable' })\n          .as('createRequest2');\n\n        cy.clock();\n\n        cy.tick(2000);\n        page.newTodoField().type(`{enter}`);\n        cy.tick(500);\n        cy.wait('@createRequest2');\n        cy.tick(2000);\n\n        errorMessage.assertVisible();\n      });\n\n      it('should allow to add a todo', () => {\n        page.mockCreate().as('createRequest2');\n        page.newTodoField().type('{enter}');\n\n        cy.wait('@createRequest2');\n        page.flushJSTimers();\n\n        todos.assertCount(6);\n        // todos.assertNotLoading(5);\n        todos.assertNotCompleted(5);\n        todos.assertTitle(5, 'Test Todo');\n\n        page.todosCounter().should('have.text', '3 items left');\n      });\n    });\n  });\n\n  describe('Adding a first todo', () => {\n    beforeEach(() => {\n      page.mockLoad({ body: [] }).as('loadRequest');\n      page.visit();\n      cy.wait('@loadRequest');\n\n      page.mockCreate().as('createRequest');\n      page.newTodoField().type('First todo{enter}');\n\n      cy.wait('@createRequest');\n    });\n\n    it('should show a new todos', () => {\n      todos.assertCount(1);\n      todos.assertTitle(0, 'First todo');\n      todos.assertNotCompleted(0);\n    });\n\n    it('should show Filter', () => {\n      filter.assertVisible();\n    });\n\n    it('should show todosCounter', () => {\n      page.todosCounter().should('contain.text', '1 item');\n    });\n  });\n\n  describe('Individual Todo Deletion', () => {\n    describe('Default behavior', () => {\n      beforeEach(() => {\n        page.mockLoad().as('loadRequest');\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n\n      it('should display a loader on the todo when the TodoDeleteButton is clicked', () => {\n        page.mockDelete(257334);\n        page.pauseTimers();\n        todos.deleteButton(0).click();\n\n        todos.assertLoading(0);\n      });\n\n      it('should not delete a todo before successful response', () => {\n        page.mockDelete(257334);\n        page.pauseTimers();\n        todos.deleteButton(0).click();\n\n        todos.assertCount(5);\n      });\n\n      it('should remove the todo from the list on a successful API response', () => {\n        page.mockDelete(257334).as('deleteRequest');\n\n        todos.deleteButton(0).click();\n        cy.wait('@deleteRequest');\n\n        todos.assertCount(4);\n        todos.assertTitle(0, 'CSS');\n      });\n\n      it('should focus text field after todo deletion', () => {\n        page.mockDelete(257334).as('deleteRequest');\n\n        todos.deleteButton(0).click();\n        cy.wait('@deleteRequest');\n\n        page.newTodoField().should('be.focused');\n      });\n\n      it('should not remove the todo from the list on an API error', () => {\n        // to prevent Cypress from failing the test on uncaught exception\n        cy.once('uncaught:exception', () => false);\n\n        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n\n        todos.deleteButton(0).click();\n        cy.wait('@deleteRequest');\n\n        todos.assertCount(5);\n        todos.assertTitle(0, 'HTML');\n      });\n\n      it('should show an error message on an API error', () => {\n        // to prevent Cypress from failing the test on uncaught exception\n        cy.once('uncaught:exception', () => false);\n\n        page.mockDelete(257334, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest');\n\n        todos.deleteButton(0).click();\n        cy.wait('@deleteRequest');\n\n        errorMessage.assertVisible();\n        errorMessage.assertText('Unable to delete a todo');\n      });\n\n      it('should adjust the active todo count correctly after successful deletion', () => {\n        page.mockDelete(257338).as('deleteRequest');\n        todos.deleteButton(4).click();\n        cy.wait('@deleteRequest');\n\n        page.todosCounter().should('contain.text', '1 item');\n      });\n\n      it('should not adjust the active todo count after failed deletion', () => {\n        // to prevent Cypress from failing the test on uncaught exception\n        cy.once('uncaught:exception', () => false);\n\n        page.mockDelete(257338, { statusCode: 500, body: 'Internal Server Error' })\n          .as('deleteRequest');\n\n        todos.deleteButton(4).click();\n        cy.wait('@deleteRequest');\n\n        page.todosCounter().should('have.text', '2 items left');\n      });\n    });\n\n    describe('Last todo deletion', () => {\n      beforeEach(() => {\n        const todo = {\n          \"id\": 257334,\n          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n          \"userId\": 1,\n          \"title\": \"HTML\",\n          \"completed\": false\n        };\n\n        page.mockLoad({ body: [todo] }).as('loadRequest');\n        page.visit();\n        cy.wait('@loadRequest');\n\n        page.mockDelete(257334);\n        todos.deleteButton(0).click();\n      });\n\n      it('should hide todos', () => {\n        todos.assertCount(0);\n      });\n\n      it('should hide footer', () => {\n        filter.assertHidden();\n        page.clearCompletedButton().should('not.exist');\n        page.todosCounter().should('not.exist');\n      });\n\n      it('should focus text field after todo deletion', () => {\n        page.newTodoField().should('be.focused');\n      });\n    });\n  });\n\n  describe('Group Todo Deletion', () => {\n    describe('with no completed todos', () => {\n      beforeEach(() => {\n        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n\n      it('should not have active ClearCompleted button', () => {\n        page.clearCompletedButton().should('be.disabled');\n      });\n    });\n\n    describe('with some completed todos', () => {\n      beforeEach(() => {\n        page.mockLoad().as('loadRequest');\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n\n      it('should have ClearCompleted button enabled', () => {\n        page.clearCompletedButton().should('not.be.disabled');\n      });\n\n      it('should send individual deletion request for each completed todo', () => {\n        page.mockDelete(257334).as('deleteRequest1');\n        page.mockDelete(257335).as('deleteRequest2');\n        page.mockDelete(257336).as('deleteRequest3');\n\n        page.clearCompletedButton().click();\n\n        cy.wait('@deleteRequest1');\n        cy.wait('@deleteRequest2');\n        cy.wait('@deleteRequest3');\n      });\n\n      describe('on success', () => {\n        beforeEach(() => {\n          page.mockDelete(257334).as('deleteRequest1');\n          page.mockDelete(257335).as('deleteRequest2');\n          page.mockDelete(257336).as('deleteRequest3');\n\n          page.clearCompletedButton().click();\n\n          cy.wait('@deleteRequest1');\n          cy.wait('@deleteRequest2');\n          cy.wait('@deleteRequest3');\n        });\n\n        it('should remove all completed todos from the list', () => {\n          todos.assertCount(2);\n          todos.assertTitle(0, 'TypeScript');\n          todos.assertTitle(1, 'React');\n        });\n\n        it('should disable ClearCompleted button', () => {\n          page.clearCompletedButton().should('be.disabled');\n        });\n\n        it('should focus the text field', () => {\n          page.newTodoField().should('be.focused');\n        });\n      });\n\n      describe('on a single fail', () => {\n        beforeEach(() => {\n          // to prevent Cypress from failing the test on uncaught exception\n          cy.once('uncaught:exception', () => false);\n\n          page.mockDelete(257334).as('deleteRequest1');\n          page.mockDelete(257335, { statusCode: 500, body: 'Internal Server Error' }).as('deleteRequest2');\n          page.mockDelete(257336).as('deleteRequest3');\n\n          page.clearCompletedButton().click();\n\n          cy.wait('@deleteRequest1');\n          cy.wait('@deleteRequest2');\n          cy.wait('@deleteRequest3');\n        });\n\n        it('should show an error message if any of the group deletions fails', () => {\n          errorMessage.assertVisible();\n          errorMessage.assertText('Unable to delete a todo');\n        });\n\n        it('should remove todos with success responses and keep todos with errors', () => {\n          todos.assertCount(3);\n          todos.assertTitle(0, 'CSS');\n          todos.assertTitle(1, 'TypeScript');\n        });\n\n        it('should not disable ClearCompleted button', () => {\n          page.clearCompletedButton().should('not.be.disabled');\n        });\n      });\n    });\n\n    describe('with all todos completed', () => {\n      beforeEach(() => {\n        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n        page.visit();\n        cy.wait('@loadRequest');\n\n        page.mockDelete(257334).as('deleteRequest1');\n        page.mockDelete(257335).as('deleteRequest2');\n        page.mockDelete(257336).as('deleteRequest3');\n        page.mockDelete(257337).as('deleteRequest4');\n        page.mockDelete(257338).as('deleteRequest5');\n\n        page.clearCompletedButton().click();\n\n        cy.wait('@deleteRequest1');\n        cy.wait('@deleteRequest2');\n        cy.wait('@deleteRequest3');\n        cy.wait('@deleteRequest4');\n        cy.wait('@deleteRequest5');\n      });\n\n      it('should hide todos after clearing all completed todos', () => {\n        todos.assertCount(0);\n      });\n\n      it('should hide footer after clearing all completed todos', () => {\n        filter.assertHidden();\n        page.clearCompletedButton().should('not.exist');\n        page.todosCounter().should('not.exist');\n      });\n    });\n  });\n\n  describe('Todo Toggling', () => {\n    beforeEach(() => {\n      page.mockLoad().as('loadRequest');\n      page.visit();\n      cy.wait('@loadRequest');\n    });\n\n    describe('before receving response', () => {\n      beforeEach(() => {\n        page.mockUpdate(257334).as('updateRequest');\n      });\n\n      it('should send an update request', () => {\n        todos.statusToggler(0).click();\n        cy.wait('@updateRequest');\n      });\n\n      it('should show loader after click', () => {\n        page.pauseTimers();\n        todos.statusToggler(0).click();\n\n        todos.assertLoading(0);\n      });\n\n      it('should not show error message after click', () => {\n        page.pauseTimers();\n        todos.statusToggler(0).click();\n\n        errorMessage.assertHidden();\n      });\n\n      it('should not hide a todo if filtered', () => {\n        filter.link('completed').click();\n        page.pauseTimers();\n        cy.tick(1000); // flush JS animation\n        todos.statusToggler(0).click();\n\n        todos.assertCount(3);\n        todos.assertTitle(0, 'HTML');\n      });\n    });\n\n    describe('on success', () => {\n      beforeEach(() => {\n        page.mockUpdate(257334).as('updateRequest');\n\n        todos.statusToggler(0).click();\n        cy.wait('@updateRequest');\n      });\n\n      it('should toggle a todo', () => {\n        todos.assertNotCompleted(0);\n        todos.statusToggler(0).should('not.be.checked');\n      });\n\n      it('should cancel loading', () => {\n        page.flushJSTimers();\n        todos.assertNotLoading(0);\n      });\n\n      it('should update the counter', () => {\n        page.todosCounter().should('have.text', '3 items left');\n      });\n\n      it('should not show an error message', () => {\n        errorMessage.assertHidden();\n      });\n    });\n\n    describe('on fail', () => {\n      beforeEach(() => {\n        // to prevent Cypress from failing the test on uncaught exception\n        cy.once('uncaught:exception', () => false);\n\n        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n          .as('updateRequest');\n\n        todos.statusToggler(0).click();\n        cy.wait('@updateRequest');\n      });\n\n      it('should show an error', () => {\n        errorMessage.assertVisible();\n        errorMessage.assertText('Unable to update a todo');\n      });\n\n      it('should not toggle a todo', () => {\n        todos.assertCompleted(0);\n        todos.statusToggler(0).should('be.checked');\n      });\n\n      it('should cancel loading', () => {\n        page.flushJSTimers();\n        todos.assertNotLoading(0);\n      });\n\n      it('should not update the counter', () => {\n        page.todosCounter().should('have.text', '2 items left');\n      });\n\n      it('should allow to toggle again', () => {\n        page.mockUpdate(257334).as('updateRequest2');\n\n        todos.statusToggler(0).click();\n        cy.wait('@updateRequest2');\n\n        todos.assertNotCompleted(0);\n      });\n    });\n\n    describe('if filtered', () => {\n      beforeEach(() => {\n        filter.link('completed').click();\n      });\n\n      it('should hide a todo on success', () => {\n        page.mockUpdate(257334).as('updateRequest');\n\n        todos.statusToggler(0).click();\n        cy.wait('@updateRequest');\n\n        todos.assertCount(2);\n        todos.assertTitle(0, 'CSS');\n      });\n\n      it('should show a todo on success when selected an oposite filter', () => {\n        page.mockUpdate(257334).as('updateRequest');\n\n        todos.statusToggler(0).click();\n        filter.link('active').click();\n        cy.wait('@updateRequest');\n\n        todos.assertCount(3);\n        todos.assertTitle(0, 'HTML');\n      });\n\n      it('should not hide a todo on fail', () => {\n        // to prevent Cypress from failing the test on uncaught exception\n        cy.once('uncaught:exception', () => false);\n\n        page.mockUpdate(257334, { statusCode: 503, body: 'Service Unavailable' })\n          .as('updateRequest');\n\n        todos.statusToggler(0).click();\n        cy.wait('@updateRequest');\n\n        todos.assertCount(3);\n        todos.assertTitle(0, 'HTML');\n      });\n    });\n  });\n\n\n  \n\n  describe('Toggle All Button', () => {\n    describe('if there are no todos', () => {\n      it('should not be visible while loading todos', () => {\n        page.mockLoad({ body: [] }).as('loadRequest');\n\n        page.pauseTimers();\n        page.visit();\n\n        page.toggleAllButton().should('not.exist');\n      });\n\n      it('should not be visible when loaded', () => {\n        page.mockLoad({ body: [] }).as('loadRequest');\n\n        page.visit();\n        cy.wait('@loadRequest');\n\n        page.toggleAllButton().should('not.exist');\n      });\n\n      it('should appear after adding a todo', () => {\n        page.mockLoad({ body: [] }).as('loadRequest');\n        page.mockCreate().as('createRequest');\n\n        page.visit();\n        cy.wait('@loadRequest');\n\n        page.newTodoField().type('First todo{enter}');\n        cy.wait('@createRequest');\n\n        page.toggleAllButton().should('exist');\n      });\n\n      it('should disappear after removing the last todo', () => {\n        const todo = {\n          \"id\": 257334,\n          \"createdAt\": \"2023-09-19T08:21:56.486Z\",\n          \"updatedAt\": \"2023-09-19T08:23:07.096Z\",\n          \"userId\": 1,\n          \"title\": \"HTML\",\n          \"completed\": false\n        };\n\n        page.mockLoad({ body: [todo] }).as('loadRequest');\n        page.mockDelete(257334).as('deleteRequest');\n\n        page.visit();\n        cy.wait('@loadRequest');\n\n        todos.deleteButton(0).click();\n        cy.wait('@deleteRequest');\n\n        page.toggleAllButton().should('not.exist');\n      });\n    });\n\n    describe('if all todos are completed', () => {\n      beforeEach(() => {\n        page.mockLoad({ fixture: 'completed-todos' }).as('loadRequest');\n\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n\n      it('should be visible', () => {\n        page.toggleAllButton().should('exist');\n      });\n\n      it('should stay visible after filtering out all the todos', () => {\n        filter.link('active').click();\n\n        page.toggleAllButton().should('exist');\n      });\n\n      it('should be active', () => {\n        page.toggleAllButton().should('have.class', 'active');\n      });\n\n      it('should become not active after toggling a todo', () => {\n        page.mockUpdate(257335).as('updateRequest');\n        todos.statusToggler(1).click();\n        cy.wait('@updateRequest');\n\n        page.toggleAllButton().should('not.have.class', 'active');\n      });\n\n      it('should stay active after a todo toggling fail', () => {\n        // to prevent Cypress from failing the test on uncaught exception\n        cy.once('uncaught:exception', () => false);\n\n        page.mockUpdate(257335, { statusCode: 503 }).as('updateRequest');\n        todos.statusToggler(1).click();\n        cy.wait('@updateRequest');\n\n        page.toggleAllButton().should('have.class', 'active');\n      });\n\n      describe('on click', () => {\n        beforeEach(() => {\n          page.mockUpdate(257334).as('updateRequest4');\n          page.mockUpdate(257335).as('updateRequest5');\n          page.mockUpdate(257336).as('updateRequest6');\n          page.mockUpdate(257337).as('updateRequest7');\n          page.mockUpdate(257338).as('updateRequest8');\n\n          page.toggleAllButton().click();\n\n          cy.wait('@updateRequest4');\n          cy.wait('@updateRequest5');\n          cy.wait('@updateRequest6');\n          cy.wait('@updateRequest7');\n          cy.wait('@updateRequest8');\n        });\n\n        it('should send requests for all todos', () => {\n          // if before each pass\n        });\n\n        it('should make all todos active', () => {\n          todos.assertNotCompleted(0);\n          todos.assertNotCompleted(1);\n          todos.assertNotCompleted(2);\n          todos.assertNotCompleted(3);\n          todos.assertNotCompleted(4);\n        });\n\n        it('should become not active', () => {\n          page.toggleAllButton().should('not.have.class', 'active');\n        });\n      });\n    });\n\n    describe('if all todos are active', () => {\n      beforeEach(() => {\n        page.mockLoad({ fixture: 'active-todos' }).as('loadRequest');\n\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n\n      it('should be visible', () => {\n        page.toggleAllButton().should('exist');\n      });\n\n      it('should not be active', () => {\n        page.toggleAllButton().should('not.have.class', 'active');\n      });\n\n      it('should not become active after toggling a todo', () => {\n        page.mockUpdate(257335).as('updateRequest');\n        todos.statusToggler(1).click();\n        cy.wait('@updateRequest');\n\n        page.toggleAllButton().should('not.have.class', 'active');\n      });\n\n      describe('on click', () => {\n        beforeEach(() => {\n          page.mockUpdate(257334).as('updateRequest4');\n          page.mockUpdate(257335).as('updateRequest5');\n          page.mockUpdate(257336).as('updateRequest6');\n          page.mockUpdate(257337).as('updateRequest7');\n          page.mockUpdate(257338).as('updateRequest8');\n\n          page.toggleAllButton().click();\n\n          cy.wait('@updateRequest4');\n          cy.wait('@updateRequest5');\n          cy.wait('@updateRequest6');\n          cy.wait('@updateRequest7');\n          cy.wait('@updateRequest8');\n        });\n\n        it('should send requests for all todos', () => {\n          // if before each pass\n        });\n\n        it('should make all todos completed', () => {\n          todos.assertCompleted(0);\n          todos.assertCompleted(1);\n          todos.assertCompleted(2);\n          todos.assertCompleted(3);\n          todos.assertCompleted(4);\n        });\n\n        it('should become active', () => {\n          page.toggleAllButton().should('have.class', 'active');\n        });\n      });\n    });\n\n    describe('if there are some mixed todos', () => {\n      beforeEach(() => {\n        page.mockLoad().as('loadRequest');\n\n        page.visit();\n        cy.wait('@loadRequest');\n      });\n\n      it('should be visible', () => {\n        page.toggleAllButton().should('exist');\n      });\n\n      it('should not be active', () => {\n        page.toggleAllButton().should('not.have.class', 'active');\n      });\n\n      it('should become active after completing all todos', () => {\n        page.mockUpdate(257337).as('updateRequest1');\n        page.mockUpdate(257338).as('updateRequest2');\n\n        todos.statusToggler(3).click();\n        cy.wait('@updateRequest1');\n        todos.statusToggler(4).click();\n        cy.wait('@updateRequest2');\n\n        page.toggleAllButton().should('have.class', 'active');\n      });\n\n      describe('on click', () => {\n        beforeEach(() => {\n          page.mockUpdate(257334, cy.stub().as('update4'));\n          page.mockUpdate(257335, cy.stub().as('update5'));\n          page.mockUpdate(257336, cy.stub().as('update6'));\n          page.mockUpdate(257337).as('updateRequest7');\n          page.mockUpdate(257338).as('updateRequest8');\n\n          page.toggleAllButton().click();\n\n          cy.wait('@updateRequest7');\n          cy.wait('@updateRequest8');\n        });\n\n        it('should send requests only for not completed todos', () => {\n          cy.get('@update4').should('not.be.called');\n          cy.get('@update5').should('not.be.called');\n          cy.get('@update6').should('not.be.called');\n        });\n\n        it('should make all todos completed', () => {\n          todos.assertCompleted(0);\n          todos.assertCompleted(1);\n          todos.assertCompleted(2);\n          todos.assertCompleted(3);\n          todos.assertCompleted(4);\n        });\n\n        it('should become active', () => {\n          page.toggleAllButton().should('have.class', 'active');\n        });\n      });\n    });\n  });\n\n  describe('Renaming', () => {\n    beforeEach(() => {\n      page.mockLoad().as('loadRequest');\n      page.visit();\n      cy.wait('@loadRequest');\n    });\n\n    it('should not show forms by default', () => {\n      todos.titleField(0).should('not.exist');\n      todos.titleField(1).should('not.exist');\n      todos.titleField(2).should('not.exist');\n      todos.titleField(3).should('not.exist');\n      todos.titleField(4).should('not.exist');\n    });\n\n    describe('Edit Form', () => {\n      describe('by default', () => {\n        it('should be opened on dblclick', () => {\n          todos.title(0).trigger('dblclick');\n\n          todos.titleField(0).should('exist');\n        });\n\n        it('should have current value', () => {\n          todos.title(0).trigger('dblclick');\n\n          todos.titleField(0).should('have.value', 'HTML');\n        });\n\n        it('should be focused', () => {\n          todos.title(0).trigger('dblclick');\n\n          todos.titleField(0).should('be.focused');\n        });\n\n        it('should hide a title', () => {\n          todos.title(0).trigger('dblclick');\n\n          todos.title(0).should('not.exist');\n        });\n\n        it('should hide DeleteButton', () => {\n          todos.title(0).trigger('dblclick');\n\n          todos.deleteButton(0).should('not.exist');\n        });\n\n        it('should keep StatusToggler', () => {\n          todos.title(0).trigger('dblclick');\n\n          todos.statusToggler(0).should('exist');\n        });\n\n        it('should not open forms for other todos', () => {\n          todos.title(0).trigger('dblclick');\n\n          todos.titleField(1).should('not.exist');\n          todos.titleField(2).should('not.exist');\n          todos.titleField(3).should('not.exist');\n          todos.titleField(4).should('not.exist');\n        });\n\n        it('should not send a request on change', () => {\n          const spy = cy.stub()\n            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n            .as('renameCallback');\n\n          page.mockUpdate(257334, spy);\n\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).type('123');\n\n          cy.get('@renameCallback').should('not.be.called');\n        });\n      });\n\n      describe('on Escape', () => {\n        it('should be closed', () => {\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).type('123123{esc}');\n\n          todos.titleField(0).should('not.exist');\n        });\n\n        it('should keep current title', () => {\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).type('123123{esc}');\n\n          todos.assertTitle(0, 'HTML');\n        });\n\n        it('should not send a request', () => {\n          const spy = cy.stub()\n            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n            .as('renameCallback');\n\n          page.mockUpdate(257334, spy);\n\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).type('123123{esc}');\n\n          cy.get('@renameCallback').should('not.be.called');\n        });\n      });\n\n      describe('on enter before recieved a response', () => {\n        it('should send a request', () => {\n          const spy = cy.stub()\n            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n            .as('renameCallback');\n\n          page.mockUpdate(257334, spy);\n\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).type('123{enter}');\n\n          cy.get('@renameCallback').should('have.callCount', 1);\n        });\n\n        it('should show loader', () => {\n          page.mockUpdate(257334);\n\n          todos.title(0).trigger('dblclick');\n          page.pauseTimers();\n          todos.titleField(0).type('123{enter}');\n\n          todos.assertLoading(0);\n        });\n\n        // It depend on your implementation\n        it.skip('should stay while waiting', () => {\n          page.mockUpdate(257334);\n\n          todos.title(0).trigger('dblclick');\n          page.pauseTimers();\n          todos.titleField(0).type('123{enter}');\n\n          todos.titleField(0).should('exist');\n        });\n      });\n\n      describe('on success', () => {\n        beforeEach(() => {\n          page.mockUpdate(257334).as('renameRequest');\n\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).clear()\n        });\n\n        it('should cancel loading', () => {\n          todos.titleField(0).type('123{enter}');\n          cy.wait('@renameRequest');\n          page.flushJSTimers();\n\n          todos.assertNotLoading(0);\n        });\n\n        it('should be closed', () => {\n          todos.titleField(0).type('123{enter}');\n          cy.wait('@renameRequest');\n          page.flushJSTimers();\n\n          todos.titleField(0).should('not.exist');\n        });\n\n        it('should show the updated title', () => {\n          todos.titleField(0).type('Something{enter}');\n          cy.wait('@renameRequest');\n          page.flushJSTimers();\n\n          todos.assertTitle(0, 'Something');\n        });\n\n        it('should show trim the new title', () => {\n          todos.titleField(0).type('   Some new title      {enter}');\n          cy.wait('@renameRequest');\n          page.flushJSTimers();\n\n          todos.assertTitle(0, 'Some new title');\n        });\n      });\n\n      describe('on fail', () => {\n        beforeEach(() => {\n          // to prevent Cypress from failing the test on uncaught exception\n          cy.once('uncaught:exception', () => false);\n\n          page.mockUpdate(257334, { statusCode: 503 }).as('renameRequest');\n\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).type('123{enter}');\n          cy.wait('@renameRequest');\n        });\n\n        it('should cancel loading on fail', () => {\n          page.flushJSTimers();\n          todos.assertNotLoading(0);\n        });\n\n        it('should stay open on fail', () => {\n          todos.titleField(0).should('exist');\n        });\n\n        it('should show error message', () => {\n          errorMessage.assertVisible();\n          errorMessage.assertText('Unable to update a todo');\n        });\n\n        it('should hide error message in 3s', () => {\n          page.flushJSTimers(3000);\n\n          errorMessage.assertHidden();\n        });\n      });\n\n      describe('if title was not changed', () => {\n        it('should not send a request on enter', () => {\n          const spy = cy.stub()\n            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n            .as('renameCallback');\n\n          page.mockUpdate(257334, spy);\n\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).type('{enter}');\n\n          cy.get('@renameCallback').should('not.be.called');\n        });\n\n        it('should be close on enter', () => {\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).type('{enter}');\n\n          todos.titleField(0).should('not.exist');\n        });\n\n        it('should be closed on Escape', () => {\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).type('{esc}');\n\n          todos.titleField(0).should('not.exist');\n        });\n\n        it('should preserve current title on save', () => {\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).type('{enter}');\n\n          todos.assertTitle(0, 'HTML');\n        });\n      });\n\n      describe('if title became empty', () => {\n        beforeEach(() => {\n          const spy = cy.stub()\n            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n            .as('renameCallback');\n\n          page.mockUpdate(257334, spy);\n\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).clear();\n        });\n\n        it('should not send an update request on enter', () => {\n          page.mockDelete(257334).as('deleteRequest');\n          todos.titleField(0).type('{enter}');\n\n          cy.get('@renameCallback').should('not.be.called');\n        });\n\n        it('should send a delete request on enter', () => {\n          page.mockDelete(257334).as('deleteRequest');\n          todos.titleField(0).type('{enter}');\n\n          cy.wait('@deleteRequest');\n        });\n\n        it('should show loading on enter', () => {\n          page.mockDelete(257334).as('deleteRequest');\n\n          page.pauseTimers();\n          todos.titleField(0).type('{enter}');\n\n          todos.assertLoading(0);\n        });\n\n        it('should delete a todo on success', () => {\n          page.mockDelete(257334).as('deleteRequest');\n          todos.titleField(0).type('{enter}');\n          cy.wait('@deleteRequest');\n\n          todos.assertCount(4);\n          todos.assertTitle(0, 'CSS');\n        });\n\n        it('should show deleting error message on fail', () => {\n          // to prevent Cypress from failing the test on uncaught exception\n          cy.once('uncaught:exception', () => false);\n\n          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n\n          todos.titleField(0).type('{enter}');\n          cy.wait('@deleteRequest');\n\n          errorMessage.assertVisible();\n          errorMessage.assertText('Unable to delete a todo')\n        });\n\n        // this test may be unstable\n        it.skip('should hide loader on fail', () => {\n          // to prevent Cypress from failing the test on uncaught exception\n          cy.once('uncaught:exception', () => false);\n\n          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n\n          todos.titleField(0).type('{enter}');\n          cy.wait('@deleteRequest');\n          page.flushJSTimers();\n\n          todos.assertNotLoading(0);\n        });\n\n        it('should stay open on fail', () => {\n          // to prevent Cypress from failing the test on uncaught exception\n          cy.once('uncaught:exception', () => false);\n\n          page.mockDelete(257334, { statusCode: 503 }).as('deleteRequest');\n\n          todos.titleField(0).type('{enter}');\n          cy.wait('@deleteRequest');\n\n          todos.titleField(0).should('exist');\n        });\n\n        it('should be closed on Escape', () => {\n          todos.titleField(0).type('{esc}');\n\n          todos.titleField(0).should('not.exist');\n        });\n\n        it('should preserve current title on close', () => {\n          todos.titleField(0).type('{esc}');\n\n          todos.title(0).should('have.text', 'HTML');\n        });\n      });\n\n      describe('on Blur', () => {\n        it('should save', () => {\n          page.mockUpdate(257334).as('renameRequest');\n\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).clear()\n          todos.titleField(0).type('New title');\n          todos.titleField(0).blur();\n          cy.wait('@renameRequest');\n\n          // just in case\n          page.flushJSTimers();\n\n          todos.assertTitle(0, 'New title');\n        });\n\n        it('should cancel if title was not changed', () => {\n          const spy = cy.stub()\n            .callsFake(req => req.reply({ body: { ...req.body, id: 257334 } }))\n            .as('renameCallback');\n\n          page.mockUpdate(257334, spy);\n\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).blur();\n\n          cy.get('@renameCallback').should('not.be.called');\n          page.flushJSTimers();\n          todos.titleField(0).should('not.exist');\n          todos.assertTitle(0, 'HTML');\n        });\n\n        it('should delete if title is empty', () => {\n          page.mockDelete(257334).as('deleteRequest');\n\n          todos.title(0).trigger('dblclick');\n          todos.titleField(0).clear();\n          todos.titleField(0).blur();\n          cy.wait('@deleteRequest');\n\n          todos.assertCount(4);\n          todos.assertTitle(0, 'CSS');\n        })\n      });\n    });\n  });\n});\n"
        }
    ]
}